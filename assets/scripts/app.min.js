/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _stringify = __webpack_require__(1);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _getIterator2 = __webpack_require__(4);
	
	var _getIterator3 = _interopRequireDefault(_getIterator2);
	
	var _svg4everybody = __webpack_require__(56);
	
	var _svg4everybody2 = _interopRequireDefault(_svg4everybody);
	
	var _jquery = __webpack_require__(57);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	__webpack_require__(60);
	
	var _parallaxJs = __webpack_require__(61);
	
	var _parallaxJs2 = _interopRequireDefault(_parallaxJs);
	
	__webpack_require__(62);
	
	var _cocoen = __webpack_require__(63);
	
	var _cocoen2 = _interopRequireDefault(_cocoen);
	
	var _inputmask = __webpack_require__(64);
	
	var _inputmask2 = _interopRequireDefault(_inputmask);
	
	__webpack_require__(66);
	
	__webpack_require__(67);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(0, _jquery2.default)(function () {
		if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
			var $viber = (0, _jquery2.default)('.js-vib');
			var $viberMap = (0, _jquery2.default)('.js-vib-map');
			$viber.attr('href', 'viber://add?number=79037900722');
			$viberMap.attr('href', 'viber://add?number=79852272023');
			// $('difference__slide_mobile').css({display: 'none'});
		}
		(0, _svg4everybody2.default)();
		var menuButton = document.querySelector('.burger-menu');
		menuButton.addEventListener('click', function () {
			var lines = menuButton.children;
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;
	
			try {
				for (var _iterator = (0, _getIterator3.default)(lines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var item = _step.value;
	
					item.classList.toggle('burger-menu__line_active');
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
	
			var menu = document.querySelector('.header__mobile-menu');
			menu.classList.toggle('header__mobile-menu_active');
			if ((0, _jquery2.default)('.burger-menu').hasClass('pressed')) {
				menuButton.classList.toggle('pressed');
				// overlayDisable();
			} else {
				overlayActivate();
				menuButton.classList.toggle('pressed');
			}
		});
		var $select = (0, _jquery2.default)('.chosen-select');
		$select.chosen({
			// eslint-disable-next-line
			placeholder_text_multiple: "Выберите услуги...",
			width: '100%'
		});
		var im = new _inputmask2.default('+7 ( 999 ) 999-99-99');
		var tels = document.querySelectorAll('input[type=tel]');
		im.mask(tels);
		var date = new _inputmask2.default('99 /99 /9999');
		var dateField = document.querySelector('input[name=date]');
		date.mask(dateField);
		var time = new _inputmask2.default('99:99');
		var timeField = document.querySelector('input[name=time]');
		time.mask(timeField);
	
		var firstScreen = document.getElementById('main-clouds');
		// eslint-disable-next-line
		var mainClouds = new _parallaxJs2.default(firstScreen);
		var salonScreen = document.getElementById('salon-clouds');
		// eslint-disable-next-line
		var salonClouds = new _parallaxJs2.default(salonScreen);
		var consultScreen = document.getElementById('consult-clouds');
		// eslint-disable-next-line
		var consultClouds = new _parallaxJs2.default(consultScreen);
		(0, _jquery2.default)('.js-navlink').on('click', function () {
			menuButton.click();
			overlayDisable();
		});
		(0, _jquery2.default)('.js-master-item').on('click', function () {
			var id = (0, _jquery2.default)(this).data('master');
			var content = (0, _jquery2.default)('.js-master-tab[data-master = "' + id + '"]');
			var slider = (0, _jquery2.default)('.master-slider[data-master = "' + id + '"]');
			// $('.js-master-tab').css({display: 'none'});
			(0, _jquery2.default)('.js-master-tab').removeClass('active');
			// content.css({display: 'block'});
			content.addClass('active');
			(0, _jquery2.default)('.js-master-item').removeClass('active-item');
			(0, _jquery2.default)(this).addClass('active-item');
			(0, _jquery2.default)('.master-slider').removeClass('active-slider');
			slider.addClass('active-slider').find('.js-master-slider').slick({
				slidesToShow: 4,
				slidesToScroll: 1,
				dots: true,
				arrows: true,
				prevArrow: '.master-slider__left-btn',
				nextArrow: '.master-slider__right-btn',
				lazyLoad: 'ondemand',
				dotsClass: 'my-dots',
				responsive: [{
					breakpoint: 1450,
					settings: {
						slidesToShow: 3,
						slidesToScroll: 1
					}
				}, {
					breakpoint: 930,
					settings: {
						slidesToShow: 3,
						slidesToScroll: 1
					}
				}, {
					breakpoint: 710,
					settings: {
						slidesToShow: 2,
						slidesToScroll: 1
					}
				}, {
					breakpoint: 540,
					settings: {
						slidesToShow: 1,
						slidesToScroll: 1
					}
				}]
			});
		});
		(0, _jquery2.default)('.master-slider.active-slider').find('.js-master-slider').slick({
			slidesToShow: 4,
			slidesToScroll: 1,
			arrows: true,
			prevArrow: '.master-slider__left-btn',
			nextArrow: '.master-slider__right-btn',
			dots: true,
			lazyLoad: 'ondemand',
			dotsClass: 'my-dots',
			responsive: [{
				breakpoint: 1450,
				settings: {
					slidesToShow: 3,
					slidesToScroll: 1
				}
			}, {
				breakpoint: 930,
				settings: {
					slidesToShow: 3,
					slidesToScroll: 1
				}
			}, {
				breakpoint: 710,
				settings: {
					slidesToShow: 2,
					slidesToScroll: 1
				}
			}, {
				breakpoint: 540,
				settings: {
					slidesToShow: 1,
					slidesToScroll: 1
				}
			}]
		});
		(0, _jquery2.default)('[data-fancybox="serts"]').fancybox({
			loop: false,
			toolbar: false,
			smallBtn: true,
			thumbs: true,
			helpers: {
				thumbs: {
					width: 50,
					height: 50
				}
			}
		});
		document.querySelectorAll('.cocoen').forEach(function (element) {
			new _cocoen2.default(element);
		});
		// new Cocoen(document.querySelector('.cocoen'));
		(0, _jquery2.default)('.js-difference-slider').slick({
			slidesToShow: 1,
			slidesToScroll: 1,
			centerMode: true,
			centerPadding: 20,
			prevArrow: '.difference__left-btn',
			nextArrow: '.difference__right-btn',
			draggable: false,
			swipe: false
		});
		(0, _jquery2.default)('.js-salon-slider').slick({
			slidesToShow: 1,
			slidesToScroll: 1,
			centerMode: true,
			arrows: false,
			centerPadding: 0,
			dots: true,
			dotsClass: 'my-dots-salon'
		});
	
		(0, _jquery2.default)('.js-service-list').each(function (index) {
			(0, _jquery2.default)(this).children('.js-service-item').first().addClass('active-item');
			(0, _jquery2.default)(this).children('.js-service-item').first().find('.js-item-price').addClass('active-item');
			(0, _jquery2.default)(this).parentsUntil('.service').find('.js-curr-pic').first().addClass('active-pic');
		});
	
		(0, _jquery2.default)('.js-service-item').on('click', function () {
			var id = (0, _jquery2.default)(this).data('type');
			var slider = (0, _jquery2.default)('.js-curr-pic[data-type = "' + id + '"]');
	
			(0, _jquery2.default)(this).parents('.js-service-list').children('.js-service-item').removeClass('active-item');
			(0, _jquery2.default)(this).parents('.js-service-list').children('.js-service-item').find('.js-item-price').removeClass('active-item');
			// $(this).parents('.')
			(0, _jquery2.default)(this).addClass('active-item');
			(0, _jquery2.default)(this).find('.js-item-price').addClass('active-item');
			(0, _jquery2.default)(this).parentsUntil('.service').find('.js-curr-pic').removeClass('active-pic');
			slider.addClass('active-pic');
		});
		/** Video */
		var play = document.querySelector('#play');
		var contain = document.querySelectorAll('.video-box');
		var videoPlayer = document.querySelectorAll('.video-section__video-wrap');
		var video = document.querySelectorAll('.video-section__frame');
		play.addEventListener('click', function () {
			contain[0].classList.add('video-box_hidden');
			videoPlayer[0].classList.add('video-section__video-wrap_visible');
			video[0].contentWindow.postMessage((0, _stringify2.default)({ event: 'command', func: 'playVideo' }), '*');
		});
	
		(0, _jquery2.default)('.js-slider-feedback').slick({
			slidesToShow: 3,
			slidesToScroll: 1,
			centerMode: true,
			centerPadding: 20,
			prevArrow: '.feedback__left-btn',
			nextArrow: '.feedback__right-btn',
			responsive: [{
				breakpoint: 930,
				settings: {
					slidesToShow: 2,
					slidesToScroll: 1
				}
			}, {
				breakpoint: 710,
				settings: {
					slidesToShow: 2,
					slidesToScroll: 1
				}
			}, {
				breakpoint: 540,
				settings: {
					slidesToShow: 1,
					slidesToScroll: 1
				}
			}]
		});
		var $overlay = (0, _jquery2.default)('.overlay');
		var $popups = (0, _jquery2.default)('.js-popup');
		var $popupConsultation = (0, _jquery2.default)('.js-popup-consultation');
		var $popupDisclaimer = (0, _jquery2.default)('.js-popup-disclaimer');
		// const $disclaimerBtn = $('.js-disclaimer');
		var $consultationBtn = (0, _jquery2.default)('.js-consultation-btn');
		var $popupCallback = (0, _jquery2.default)('.js-popup-callback');
		var $callbackBtn = (0, _jquery2.default)('.js-callback-btn');
		var $popupThanks = (0, _jquery2.default)('.js-popup-thanks');
		var $popupThanksOrder = (0, _jquery2.default)('.js-popup-thanks-order');
		var $close = (0, _jquery2.default)('.js-close');
		var $popupSign = (0, _jquery2.default)('.js-popup-sign');
		var $popupSignBtn = (0, _jquery2.default)('.js-popup-sign-btn');
		var $popupPrice = (0, _jquery2.default)('.js-popup-price');
		var $popupPriceBtn = (0, _jquery2.default)('.js-popup-price-btn');
	
		function setPopupPosition() {
			var popupConsultationMargin = ((0, _jquery2.default)(window).innerHeight() - $popupConsultation.innerHeight()) / 2;
			$popupConsultation.css('marginTop', popupConsultationMargin < 30 ? '30px' : popupConsultationMargin + 'px');
			var popupCallbackMargin = ((0, _jquery2.default)(window).innerHeight() - $popupCallback.innerHeight()) / 2;
			$popupCallback.css('marginTop', popupCallbackMargin < 30 ? '30px' : popupCallbackMargin + 'px');
			var popupThanksMargin = ((0, _jquery2.default)(window).innerHeight() - $popupThanks.innerHeight()) / 2;
			$popupThanks.css('marginTop', popupThanksMargin < 30 ? '30px' : popupThanksMargin + 'px');
			var popupThanksMarginOrder = ((0, _jquery2.default)(window).innerHeight() - $popupThanksOrder.innerHeight()) / 2;
			$popupThanksOrder.css('marginTop', popupThanksMarginOrder < 30 ? '30px' : popupThanksMarginOrder + 'px');
			var popupDisclaimerMargin = ((0, _jquery2.default)(window).innerHeight() - $popupDisclaimer.innerHeight()) / 2;
			$popupDisclaimer.css('marginTop', popupDisclaimerMargin < 30 ? '30px' : popupDisclaimerMargin + 'px');
			var popupSignMargin = ((0, _jquery2.default)(window).innerHeight() - $popupSign.innerHeight()) / 2;
			$popupSign.css('marginTop', popupSignMargin < 30 ? '30px' : popupSignMargin + 'px');
			var popupPriceMargin = ((0, _jquery2.default)(window).innerHeight() - $popupPrice.innerHeight()) / 2;
			$popupPrice.css('marginTop', popupPriceMargin < 30 ? '30px' : popupPriceMargin + 'px');
		}
		function overlayActivate() {
			$overlay.addClass('active-overlay');
			document.body.style.overflowY = 'hidden';
			setPopupPosition();
		}
		function overlayDisable() {
			$overlay.removeClass('active-overlay');
			document.body.style.overflowY = 'auto';
		}
		$callbackBtn.on('click', function () {
			if ((0, _jquery2.default)('.burger-menu') && (0, _jquery2.default)('.burger-menu').hasClass('pressed')) {
				menuButton.click();
				menuButton.classList.toggle('pressed');
			}
	
			$popupCallback.addClass('active-overlay');
			overlayActivate();
		});
		$consultationBtn.on('click', function () {
			$popupConsultation.addClass('active-overlay');
			overlayActivate();
		});
		$popupSignBtn.on('click', function () {
			$popupSign.addClass('active-overlay');
			overlayActivate();
		});
		$popupPriceBtn.on('click', function () {
			$popupPrice.addClass('active-overlay');
			overlayActivate();
		});
	
		(0, _jquery2.default)('a[href^="#"]').on('click', function (event) {
			event.preventDefault();
			var sc = (0, _jquery2.default)(this).attr('href');
			var dn = (0, _jquery2.default)(sc).offset().top;
			(0, _jquery2.default)('html, body').animate({ scrollTop: dn }, 1000);
		});
		(0, _jquery2.default)(window).resize(setPopupPosition);
		$close.on('click', function () {
			var ifDisc = (0, _jquery2.default)(this).parents('.js-popup').hasClass('js-popup-disclaimer');
			var ifCall = (0, _jquery2.default)(this).parents('.js-popup').hasClass('js-popup-callback');
			var ifLeave = (0, _jquery2.default)(this).parents('.js-popup').hasClass('js-popup-add');
			if (ifDisc) {
				$popupDisclaimer.removeClass('active-overlay');
				var openPopups = $popups.hasClass('active-overlay');
				if (!openPopups) {
					overlayDisable();
				}
			} else if (ifCall) {
				$popupCallback.removeClass('active-overlay');
				overlayDisable();
			} else if (ifLeave) {
				// $popupAdd.remove();
				overlayDisable();
				// $popupAdd.addClass('shown');
			} else {
				$popups.removeClass('active-overlay');
				overlayDisable();
			}
		});
	
		$overlay.on('click', function (e) {
			if (e.target !== $popups) {
				// if ($popupAdd.hasClass('active')) {
				// 	$popupAdd.remove();
				// 	// $popupAdd.addClass('shown');
				// };
				$popups.removeClass('active-overlay');
				if ((0, _jquery2.default)('.burger-menu') && (0, _jquery2.default)('.burger-menu').hasClass('pressed')) {
					menuButton.click();
					overlayDisable();
				}
				overlayDisable();
			}
		});
		function showThanks() {
			$popups.removeClass('active-overlay');
			$popupThanks.addClass('active-overlay');
			setPopupPosition();
		}
		function showOrder() {
			$popups.removeClass('active-overlay');
			$popupThanksOrder.addClass('active-overlay');
			setPopupPosition();
		}
		function formSend(form) {
			if (form.valid()) {
				var msg = form.serialize();
				console.log(msg);
				_jquery2.default.ajax({
					type: 'POST',
					url: './include/mail.php',
					data: msg,
					success: function success() {
						//if (form.get(0).type.value === 'sign') {
							//showOrder();
						//} else {
							//showThanks();
						//}
						window.location = "./thanks";
					},
					error: function error(xhr) {
						// eslint-disable-next-line
						alert('Возникла ошибка: ' + xhr.responseCode);
					}
				});
			}
		}
	
		(0, _jquery2.default)('[type=submit]').on('click', function (e) {
			e.preventDefault();
			formSend((0, _jquery2.default)(this).parents('form'));
		});
		var rules = {
			rules: {
				tel: {
					normalizer: function normalizer(value) {
						return value.replace(/[- _\)\(]/g, '');
					},
					required: true,
					minlength: 12
				}
			},
			messages: {
				tel: {
					required: 'Это обязательное поле',
					minlength: 'Некорректный номер телефона'
				}
			}
		};
		(0, _jquery2.default)('.popup-callback__form').validate(rules);
		(0, _jquery2.default)('.popup-consult__form').validate(rules);
		(0, _jquery2.default)('.popup-sign__form').validate(rules);
		(0, _jquery2.default)('.consult__form').validate(rules);
	});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(2), __esModule: true };

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(3);
	var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
	module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.6.12' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(5), __esModule: true };

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(6);
	__webpack_require__(51);
	module.exports = __webpack_require__(53);


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(7);
	var global = __webpack_require__(18);
	var hide = __webpack_require__(21);
	var Iterators = __webpack_require__(10);
	var TO_STRING_TAG = __webpack_require__(48)('toStringTag');
	
	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');
	
	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(8);
	var step = __webpack_require__(9);
	var Iterators = __webpack_require__(10);
	var toIObject = __webpack_require__(11);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(15)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	module.exports = function () { /* empty */ };


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ }),
/* 10 */
/***/ (function(module, exports) {

	module.exports = {};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(12);
	var defined = __webpack_require__(14);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(13);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(16);
	var $export = __webpack_require__(17);
	var redefine = __webpack_require__(32);
	var hide = __webpack_require__(21);
	var Iterators = __webpack_require__(10);
	var $iterCreate = __webpack_require__(33);
	var setToStringTag = __webpack_require__(47);
	var getPrototypeOf = __webpack_require__(49);
	var ITERATOR = __webpack_require__(48)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	
	var returnThis = function () { return this; };
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	module.exports = true;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(18);
	var core = __webpack_require__(3);
	var ctx = __webpack_require__(19);
	var hide = __webpack_require__(21);
	var has = __webpack_require__(31);
	var PROTOTYPE = 'prototype';
	
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && has(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(20);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(22);
	var createDesc = __webpack_require__(30);
	module.exports = __webpack_require__(26) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(23);
	var IE8_DOM_DEFINE = __webpack_require__(25);
	var toPrimitive = __webpack_require__(29);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(26) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(24);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 24 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(26) && !__webpack_require__(27)(function () {
	  return Object.defineProperty(__webpack_require__(28)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(27)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(24);
	var document = __webpack_require__(18).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(24);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 31 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(21);


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(34);
	var descriptor = __webpack_require__(30);
	var setToStringTag = __webpack_require__(47);
	var IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(21)(IteratorPrototype, __webpack_require__(48)('iterator'), function () { return this; });
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(23);
	var dPs = __webpack_require__(35);
	var enumBugKeys = __webpack_require__(45);
	var IE_PROTO = __webpack_require__(42)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(28)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(46).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(22);
	var anObject = __webpack_require__(23);
	var getKeys = __webpack_require__(36);
	
	module.exports = __webpack_require__(26) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(37);
	var enumBugKeys = __webpack_require__(45);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(31);
	var toIObject = __webpack_require__(11);
	var arrayIndexOf = __webpack_require__(38)(false);
	var IE_PROTO = __webpack_require__(42)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(11);
	var toLength = __webpack_require__(39);
	var toAbsoluteIndex = __webpack_require__(41);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(40);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 40 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(40);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(43)('keys');
	var uid = __webpack_require__(44);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(3);
	var global = __webpack_require__(18);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	
	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: core.version,
	  mode: __webpack_require__(16) ? 'pure' : 'global',
	  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
	});


/***/ }),
/* 44 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 45 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(18).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(22).f;
	var has = __webpack_require__(31);
	var TAG = __webpack_require__(48)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(43)('wks');
	var uid = __webpack_require__(44);
	var Symbol = __webpack_require__(18).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(31);
	var toObject = __webpack_require__(50);
	var IE_PROTO = __webpack_require__(42)('IE_PROTO');
	var ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(14);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(52)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(15)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(40);
	var defined = __webpack_require__(14);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(23);
	var get = __webpack_require__(54);
	module.exports = __webpack_require__(3).getIterator = function (it) {
	  var iterFn = get(it);
	  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(55);
	var ITERATOR = __webpack_require__(48)('iterator');
	var Iterators = __webpack_require__(10);
	module.exports = __webpack_require__(3).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(13);
	var TAG = __webpack_require__(48)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};
	
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(root, factory) {
	     true ? // AMD. Register as an anonymous module unless amdModuleId is set
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        return root.svg4everybody = factory();
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory() : root.svg4everybody = factory();
	}(this, function() {
	    /*! svg4everybody v2.1.9 | github.com/jonathantneal/svg4everybody */
	    function embed(parent, svg, target) {
	        // if the target exists
	        if (target) {
	            // create a document fragment to hold the contents of the target
	            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute("viewBox") && target.getAttribute("viewBox");
	            // conditionally set the viewBox on the svg
	            viewBox && svg.setAttribute("viewBox", viewBox);
	            // copy the contents of the clone into the fragment
	            for (// clone the target
	            var clone = target.cloneNode(!0); clone.childNodes.length; ) {
	                fragment.appendChild(clone.firstChild);
	            }
	            // append the fragment into the svg
	            parent.appendChild(fragment);
	        }
	    }
	    function loadreadystatechange(xhr) {
	        // listen to changes in the request
	        xhr.onreadystatechange = function() {
	            // if the request is ready
	            if (4 === xhr.readyState) {
	                // get the cached html document
	                var cachedDocument = xhr._cachedDocument;
	                // ensure the cached html document based on the xhr response
	                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(""), 
	                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item
	                xhr._embeds.splice(0).map(function(item) {
	                    // get the cached target
	                    var target = xhr._cachedTarget[item.id];
	                    // ensure the cached target
	                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), 
	                    // embed the target into the svg
	                    embed(item.parent, item.svg, target);
	                });
	            }
	        }, // test the ready state change immediately
	        xhr.onreadystatechange();
	    }
	    function svg4everybody(rawopts) {
	        function oninterval() {
	            // while the index exists in the live <use> collection
	            for (// get the cached <use> index
	            var index = 0; index < uses.length; ) {
	                // get the current <use>
	                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent), src = use.getAttribute("xlink:href") || use.getAttribute("href");
	                if (!src && opts.attributeName && (src = use.getAttribute(opts.attributeName)), 
	                svg && src) {
	                    if (polyfill) {
	                        if (!opts.validate || opts.validate(src, svg, use)) {
	                            // remove the <use> element
	                            parent.removeChild(use);
	                            // parse the src and get the url and id
	                            var srcSplit = src.split("#"), url = srcSplit.shift(), id = srcSplit.join("#");
	                            // if the link is external
	                            if (url.length) {
	                                // get the cached xhr request
	                                var xhr = requests[url];
	                                // ensure the xhr request exists
	                                xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open("GET", url), xhr.send(), 
	                                xhr._embeds = []), // add the svg and id as an item to the xhr embeds list
	                                xhr._embeds.push({
	                                    parent: parent,
	                                    svg: svg,
	                                    id: id
	                                }), // prepare the xhr ready state change event
	                                loadreadystatechange(xhr);
	                            } else {
	                                // embed the local id into the svg
	                                embed(parent, svg, document.getElementById(id));
	                            }
	                        } else {
	                            // increase the index when the previous value was not "valid"
	                            ++index, ++numberOfSvgUseElementsToBypass;
	                        }
	                    }
	                } else {
	                    // increase the index when the previous value was not "valid"
	                    ++index;
	                }
	            }
	            // continue the interval
	            (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) && requestAnimationFrame(oninterval, 67);
	        }
	        var polyfill, opts = Object(rawopts), newerIEUA = /\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/, webkitUA = /\bAppleWebKit\/(\d+)\b/, olderEdgeUA = /\bEdge\/12\.(\d+)\b/, edgeUA = /\bEdge\/.(\d+)\b/, inIframe = window.top !== window.self;
	        polyfill = "polyfill" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;
	        // create xhr requests object
	        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName("use"), numberOfSvgUseElementsToBypass = 0;
	        // conditionally start the interval if the polyfill is active
	        polyfill && oninterval();
	    }
	    function getSVGAncestor(node) {
	        for (var svg = node; "svg" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode); ) {}
	        return svg;
	    }
	    return svg4everybody;
	});

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(58);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["jQuery"] = __webpack_require__(59);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-05-20T17:23Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];
	
	var document = window.document;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var support = {};
	
	
	
	var
		version = "2.2.4",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},
	
		isPlainObject: function( obj ) {
			var key;
	
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;
	
			code = jQuery.trim( code );
	
			if ( code ) {
	
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
	
					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval
	
					indirect( code );
				}
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {
	
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
	
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add( function() {
	
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}
	
			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	} );
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
	
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );
	
			} else {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		register: function( owner, initial ) {
			var value = initial || {};
	
			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;
	
			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {
	
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				stored = this.get( owner, key );
	
				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key === undefined ) {
				this.register( owner );
	
			} else {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
	
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
	
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}
	
				i = name.length;
	
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data, camelKey;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||
	
						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );
	
					if ( data !== undefined ) {
						return data;
					}
	
					camelKey = jQuery.camelCase( key );
	
					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {
	
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );
	
					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );
	
					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
	
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([\w:-]+)/ );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}
	
			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	
		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
	
		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,
	
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	
	
	var iframe,
		elemdisplay = {
	
			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			display = jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var documentElement = document.documentElement;
	
	
	
	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =
	
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
		}
	
		jQuery.extend( support, {
			pixelPosition: function() {
	
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
	
				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
	
				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {
	
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );
	
				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
	
					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );
	
				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );
	
				documentElement.removeChild( container );
				div.removeChild( marginDiv );
	
				return ret;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;
	
		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}
	
		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
	
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );
	
				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
	
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
	
			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
	
			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
	
			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}
	
			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
	
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
	
		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
	
						// Set corresponding property to false
						elem[ propName ] = false;
					}
	
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// Handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// The jqXHR state
				state = 0,
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
	
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
	
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );
	
	
	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {
	
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
	
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	return jQuery;
	}));


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	     _ _      _       _
	 ___| (_) ___| | __  (_)___
	/ __| | |/ __| |/ /  | / __|
	\__ \ | | (__|   < _ | \__ \
	|___/_|_|\___|_|\_(_)/ |___/
	                   |__/
	
	 Version: 1.9.0
	  Author: Ken Wheeler
	 Website: http://kenwheeler.github.io
	    Docs: http://kenwheeler.github.io/slick
	    Repo: http://github.com/kenwheeler/slick
	  Issues: http://github.com/kenwheeler/slick/issues
	
	 */
	/* global window, document, define, jQuery, setInterval, clearInterval */
	;(function(factory) {
	    'use strict';
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(57)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== 'undefined') {
	        module.exports = factory(require('jquery'));
	    } else {
	        factory(jQuery);
	    }
	
	}(function($) {
	    'use strict';
	    var Slick = window.Slick || {};
	
	    Slick = (function() {
	
	        var instanceUid = 0;
	
	        function Slick(element, settings) {
	
	            var _ = this, dataSettings;
	
	            _.defaults = {
	                accessibility: true,
	                adaptiveHeight: false,
	                appendArrows: $(element),
	                appendDots: $(element),
	                arrows: true,
	                asNavFor: null,
	                prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
	                nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
	                autoplay: false,
	                autoplaySpeed: 3000,
	                centerMode: false,
	                centerPadding: '50px',
	                cssEase: 'ease',
	                customPaging: function(slider, i) {
	                    return $('<button type="button" />').text(i + 1);
	                },
	                dots: false,
	                dotsClass: 'slick-dots',
	                draggable: true,
	                easing: 'linear',
	                edgeFriction: 0.35,
	                fade: false,
	                focusOnSelect: false,
	                focusOnChange: false,
	                infinite: true,
	                initialSlide: 0,
	                lazyLoad: 'ondemand',
	                mobileFirst: false,
	                pauseOnHover: true,
	                pauseOnFocus: true,
	                pauseOnDotsHover: false,
	                respondTo: 'window',
	                responsive: null,
	                rows: 1,
	                rtl: false,
	                slide: '',
	                slidesPerRow: 1,
	                slidesToShow: 1,
	                slidesToScroll: 1,
	                speed: 500,
	                swipe: true,
	                swipeToSlide: false,
	                touchMove: true,
	                touchThreshold: 5,
	                useCSS: true,
	                useTransform: true,
	                variableWidth: false,
	                vertical: false,
	                verticalSwiping: false,
	                waitForAnimate: true,
	                zIndex: 1000
	            };
	
	            _.initials = {
	                animating: false,
	                dragging: false,
	                autoPlayTimer: null,
	                currentDirection: 0,
	                currentLeft: null,
	                currentSlide: 0,
	                direction: 1,
	                $dots: null,
	                listWidth: null,
	                listHeight: null,
	                loadIndex: 0,
	                $nextArrow: null,
	                $prevArrow: null,
	                scrolling: false,
	                slideCount: null,
	                slideWidth: null,
	                $slideTrack: null,
	                $slides: null,
	                sliding: false,
	                slideOffset: 0,
	                swipeLeft: null,
	                swiping: false,
	                $list: null,
	                touchObject: {},
	                transformsEnabled: false,
	                unslicked: false
	            };
	
	            $.extend(_, _.initials);
	
	            _.activeBreakpoint = null;
	            _.animType = null;
	            _.animProp = null;
	            _.breakpoints = [];
	            _.breakpointSettings = [];
	            _.cssTransitions = false;
	            _.focussed = false;
	            _.interrupted = false;
	            _.hidden = 'hidden';
	            _.paused = true;
	            _.positionProp = null;
	            _.respondTo = null;
	            _.rowCount = 1;
	            _.shouldClick = true;
	            _.$slider = $(element);
	            _.$slidesCache = null;
	            _.transformType = null;
	            _.transitionType = null;
	            _.visibilityChange = 'visibilitychange';
	            _.windowWidth = 0;
	            _.windowTimer = null;
	
	            dataSettings = $(element).data('slick') || {};
	
	            _.options = $.extend({}, _.defaults, settings, dataSettings);
	
	            _.currentSlide = _.options.initialSlide;
	
	            _.originalSettings = _.options;
	
	            if (typeof document.mozHidden !== 'undefined') {
	                _.hidden = 'mozHidden';
	                _.visibilityChange = 'mozvisibilitychange';
	            } else if (typeof document.webkitHidden !== 'undefined') {
	                _.hidden = 'webkitHidden';
	                _.visibilityChange = 'webkitvisibilitychange';
	            }
	
	            _.autoPlay = $.proxy(_.autoPlay, _);
	            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
	            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
	            _.changeSlide = $.proxy(_.changeSlide, _);
	            _.clickHandler = $.proxy(_.clickHandler, _);
	            _.selectHandler = $.proxy(_.selectHandler, _);
	            _.setPosition = $.proxy(_.setPosition, _);
	            _.swipeHandler = $.proxy(_.swipeHandler, _);
	            _.dragHandler = $.proxy(_.dragHandler, _);
	            _.keyHandler = $.proxy(_.keyHandler, _);
	
	            _.instanceUid = instanceUid++;
	
	            // A simple way to check for HTML strings
	            // Strict HTML recognition (must start with <)
	            // Extracted from jQuery v1.11 source
	            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
	
	
	            _.registerBreakpoints();
	            _.init(true);
	
	        }
	
	        return Slick;
	
	    }());
	
	    Slick.prototype.activateADA = function() {
	        var _ = this;
	
	        _.$slideTrack.find('.slick-active').attr({
	            'aria-hidden': 'false'
	        }).find('a, input, button, select').attr({
	            'tabindex': '0'
	        });
	
	    };
	
	    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
	
	        var _ = this;
	
	        if (typeof(index) === 'boolean') {
	            addBefore = index;
	            index = null;
	        } else if (index < 0 || (index >= _.slideCount)) {
	            return false;
	        }
	
	        _.unload();
	
	        if (typeof(index) === 'number') {
	            if (index === 0 && _.$slides.length === 0) {
	                $(markup).appendTo(_.$slideTrack);
	            } else if (addBefore) {
	                $(markup).insertBefore(_.$slides.eq(index));
	            } else {
	                $(markup).insertAfter(_.$slides.eq(index));
	            }
	        } else {
	            if (addBefore === true) {
	                $(markup).prependTo(_.$slideTrack);
	            } else {
	                $(markup).appendTo(_.$slideTrack);
	            }
	        }
	
	        _.$slides = _.$slideTrack.children(this.options.slide);
	
	        _.$slideTrack.children(this.options.slide).detach();
	
	        _.$slideTrack.append(_.$slides);
	
	        _.$slides.each(function(index, element) {
	            $(element).attr('data-slick-index', index);
	        });
	
	        _.$slidesCache = _.$slides;
	
	        _.reinit();
	
	    };
	
	    Slick.prototype.animateHeight = function() {
	        var _ = this;
	        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
	            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
	            _.$list.animate({
	                height: targetHeight
	            }, _.options.speed);
	        }
	    };
	
	    Slick.prototype.animateSlide = function(targetLeft, callback) {
	
	        var animProps = {},
	            _ = this;
	
	        _.animateHeight();
	
	        if (_.options.rtl === true && _.options.vertical === false) {
	            targetLeft = -targetLeft;
	        }
	        if (_.transformsEnabled === false) {
	            if (_.options.vertical === false) {
	                _.$slideTrack.animate({
	                    left: targetLeft
	                }, _.options.speed, _.options.easing, callback);
	            } else {
	                _.$slideTrack.animate({
	                    top: targetLeft
	                }, _.options.speed, _.options.easing, callback);
	            }
	
	        } else {
	
	            if (_.cssTransitions === false) {
	                if (_.options.rtl === true) {
	                    _.currentLeft = -(_.currentLeft);
	                }
	                $({
	                    animStart: _.currentLeft
	                }).animate({
	                    animStart: targetLeft
	                }, {
	                    duration: _.options.speed,
	                    easing: _.options.easing,
	                    step: function(now) {
	                        now = Math.ceil(now);
	                        if (_.options.vertical === false) {
	                            animProps[_.animType] = 'translate(' +
	                                now + 'px, 0px)';
	                            _.$slideTrack.css(animProps);
	                        } else {
	                            animProps[_.animType] = 'translate(0px,' +
	                                now + 'px)';
	                            _.$slideTrack.css(animProps);
	                        }
	                    },
	                    complete: function() {
	                        if (callback) {
	                            callback.call();
	                        }
	                    }
	                });
	
	            } else {
	
	                _.applyTransition();
	                targetLeft = Math.ceil(targetLeft);
	
	                if (_.options.vertical === false) {
	                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
	                } else {
	                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
	                }
	                _.$slideTrack.css(animProps);
	
	                if (callback) {
	                    setTimeout(function() {
	
	                        _.disableTransition();
	
	                        callback.call();
	                    }, _.options.speed);
	                }
	
	            }
	
	        }
	
	    };
	
	    Slick.prototype.getNavTarget = function() {
	
	        var _ = this,
	            asNavFor = _.options.asNavFor;
	
	        if ( asNavFor && asNavFor !== null ) {
	            asNavFor = $(asNavFor).not(_.$slider);
	        }
	
	        return asNavFor;
	
	    };
	
	    Slick.prototype.asNavFor = function(index) {
	
	        var _ = this,
	            asNavFor = _.getNavTarget();
	
	        if ( asNavFor !== null && typeof asNavFor === 'object' ) {
	            asNavFor.each(function() {
	                var target = $(this).slick('getSlick');
	                if(!target.unslicked) {
	                    target.slideHandler(index, true);
	                }
	            });
	        }
	
	    };
	
	    Slick.prototype.applyTransition = function(slide) {
	
	        var _ = this,
	            transition = {};
	
	        if (_.options.fade === false) {
	            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
	        } else {
	            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
	        }
	
	        if (_.options.fade === false) {
	            _.$slideTrack.css(transition);
	        } else {
	            _.$slides.eq(slide).css(transition);
	        }
	
	    };
	
	    Slick.prototype.autoPlay = function() {
	
	        var _ = this;
	
	        _.autoPlayClear();
	
	        if ( _.slideCount > _.options.slidesToShow ) {
	            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
	        }
	
	    };
	
	    Slick.prototype.autoPlayClear = function() {
	
	        var _ = this;
	
	        if (_.autoPlayTimer) {
	            clearInterval(_.autoPlayTimer);
	        }
	
	    };
	
	    Slick.prototype.autoPlayIterator = function() {
	
	        var _ = this,
	            slideTo = _.currentSlide + _.options.slidesToScroll;
	
	        if ( !_.paused && !_.interrupted && !_.focussed ) {
	
	            if ( _.options.infinite === false ) {
	
	                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
	                    _.direction = 0;
	                }
	
	                else if ( _.direction === 0 ) {
	
	                    slideTo = _.currentSlide - _.options.slidesToScroll;
	
	                    if ( _.currentSlide - 1 === 0 ) {
	                        _.direction = 1;
	                    }
	
	                }
	
	            }
	
	            _.slideHandler( slideTo );
	
	        }
	
	    };
	
	    Slick.prototype.buildArrows = function() {
	
	        var _ = this;
	
	        if (_.options.arrows === true ) {
	
	            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
	            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');
	
	            if( _.slideCount > _.options.slidesToShow ) {
	
	                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
	                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
	
	                if (_.htmlExpr.test(_.options.prevArrow)) {
	                    _.$prevArrow.prependTo(_.options.appendArrows);
	                }
	
	                if (_.htmlExpr.test(_.options.nextArrow)) {
	                    _.$nextArrow.appendTo(_.options.appendArrows);
	                }
	
	                if (_.options.infinite !== true) {
	                    _.$prevArrow
	                        .addClass('slick-disabled')
	                        .attr('aria-disabled', 'true');
	                }
	
	            } else {
	
	                _.$prevArrow.add( _.$nextArrow )
	
	                    .addClass('slick-hidden')
	                    .attr({
	                        'aria-disabled': 'true',
	                        'tabindex': '-1'
	                    });
	
	            }
	
	        }
	
	    };
	
	    Slick.prototype.buildDots = function() {
	
	        var _ = this,
	            i, dot;
	
	        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
	
	            _.$slider.addClass('slick-dotted');
	
	            dot = $('<ul />').addClass(_.options.dotsClass);
	
	            for (i = 0; i <= _.getDotCount(); i += 1) {
	                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
	            }
	
	            _.$dots = dot.appendTo(_.options.appendDots);
	
	            _.$dots.find('li').first().addClass('slick-active');
	
	        }
	
	    };
	
	    Slick.prototype.buildOut = function() {
	
	        var _ = this;
	
	        _.$slides =
	            _.$slider
	                .children( _.options.slide + ':not(.slick-cloned)')
	                .addClass('slick-slide');
	
	        _.slideCount = _.$slides.length;
	
	        _.$slides.each(function(index, element) {
	            $(element)
	                .attr('data-slick-index', index)
	                .data('originalStyling', $(element).attr('style') || '');
	        });
	
	        _.$slider.addClass('slick-slider');
	
	        _.$slideTrack = (_.slideCount === 0) ?
	            $('<div class="slick-track"/>').appendTo(_.$slider) :
	            _.$slides.wrapAll('<div class="slick-track"/>').parent();
	
	        _.$list = _.$slideTrack.wrap(
	            '<div class="slick-list"/>').parent();
	        _.$slideTrack.css('opacity', 0);
	
	        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
	            _.options.slidesToScroll = 1;
	        }
	
	        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');
	
	        _.setupInfinite();
	
	        _.buildArrows();
	
	        _.buildDots();
	
	        _.updateDots();
	
	
	        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);
	
	        if (_.options.draggable === true) {
	            _.$list.addClass('draggable');
	        }
	
	    };
	
	    Slick.prototype.buildRows = function() {
	
	        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;
	
	        newSlides = document.createDocumentFragment();
	        originalSlides = _.$slider.children();
	
	        if(_.options.rows > 0) {
	
	            slidesPerSection = _.options.slidesPerRow * _.options.rows;
	            numOfSlides = Math.ceil(
	                originalSlides.length / slidesPerSection
	            );
	
	            for(a = 0; a < numOfSlides; a++){
	                var slide = document.createElement('div');
	                for(b = 0; b < _.options.rows; b++) {
	                    var row = document.createElement('div');
	                    for(c = 0; c < _.options.slidesPerRow; c++) {
	                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
	                        if (originalSlides.get(target)) {
	                            row.appendChild(originalSlides.get(target));
	                        }
	                    }
	                    slide.appendChild(row);
	                }
	                newSlides.appendChild(slide);
	            }
	
	            _.$slider.empty().append(newSlides);
	            _.$slider.children().children().children()
	                .css({
	                    'width':(100 / _.options.slidesPerRow) + '%',
	                    'display': 'inline-block'
	                });
	
	        }
	
	    };
	
	    Slick.prototype.checkResponsive = function(initial, forceUpdate) {
	
	        var _ = this,
	            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
	        var sliderWidth = _.$slider.width();
	        var windowWidth = window.innerWidth || $(window).width();
	
	        if (_.respondTo === 'window') {
	            respondToWidth = windowWidth;
	        } else if (_.respondTo === 'slider') {
	            respondToWidth = sliderWidth;
	        } else if (_.respondTo === 'min') {
	            respondToWidth = Math.min(windowWidth, sliderWidth);
	        }
	
	        if ( _.options.responsive &&
	            _.options.responsive.length &&
	            _.options.responsive !== null) {
	
	            targetBreakpoint = null;
	
	            for (breakpoint in _.breakpoints) {
	                if (_.breakpoints.hasOwnProperty(breakpoint)) {
	                    if (_.originalSettings.mobileFirst === false) {
	                        if (respondToWidth < _.breakpoints[breakpoint]) {
	                            targetBreakpoint = _.breakpoints[breakpoint];
	                        }
	                    } else {
	                        if (respondToWidth > _.breakpoints[breakpoint]) {
	                            targetBreakpoint = _.breakpoints[breakpoint];
	                        }
	                    }
	                }
	            }
	
	            if (targetBreakpoint !== null) {
	                if (_.activeBreakpoint !== null) {
	                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
	                        _.activeBreakpoint =
	                            targetBreakpoint;
	                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
	                            _.unslick(targetBreakpoint);
	                        } else {
	                            _.options = $.extend({}, _.originalSettings,
	                                _.breakpointSettings[
	                                    targetBreakpoint]);
	                            if (initial === true) {
	                                _.currentSlide = _.options.initialSlide;
	                            }
	                            _.refresh(initial);
	                        }
	                        triggerBreakpoint = targetBreakpoint;
	                    }
	                } else {
	                    _.activeBreakpoint = targetBreakpoint;
	                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
	                        _.unslick(targetBreakpoint);
	                    } else {
	                        _.options = $.extend({}, _.originalSettings,
	                            _.breakpointSettings[
	                                targetBreakpoint]);
	                        if (initial === true) {
	                            _.currentSlide = _.options.initialSlide;
	                        }
	                        _.refresh(initial);
	                    }
	                    triggerBreakpoint = targetBreakpoint;
	                }
	            } else {
	                if (_.activeBreakpoint !== null) {
	                    _.activeBreakpoint = null;
	                    _.options = _.originalSettings;
	                    if (initial === true) {
	                        _.currentSlide = _.options.initialSlide;
	                    }
	                    _.refresh(initial);
	                    triggerBreakpoint = targetBreakpoint;
	                }
	            }
	
	            // only trigger breakpoints during an actual break. not on initialize.
	            if( !initial && triggerBreakpoint !== false ) {
	                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
	            }
	        }
	
	    };
	
	    Slick.prototype.changeSlide = function(event, dontAnimate) {
	
	        var _ = this,
	            $target = $(event.currentTarget),
	            indexOffset, slideOffset, unevenOffset;
	
	        // If target is a link, prevent default action.
	        if($target.is('a')) {
	            event.preventDefault();
	        }
	
	        // If target is not the <li> element (ie: a child), find the <li>.
	        if(!$target.is('li')) {
	            $target = $target.closest('li');
	        }
	
	        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
	        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;
	
	        switch (event.data.message) {
	
	            case 'previous':
	                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
	                if (_.slideCount > _.options.slidesToShow) {
	                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
	                }
	                break;
	
	            case 'next':
	                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
	                if (_.slideCount > _.options.slidesToShow) {
	                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
	                }
	                break;
	
	            case 'index':
	                var index = event.data.index === 0 ? 0 :
	                    event.data.index || $target.index() * _.options.slidesToScroll;
	
	                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
	                $target.children().trigger('focus');
	                break;
	
	            default:
	                return;
	        }
	
	    };
	
	    Slick.prototype.checkNavigable = function(index) {
	
	        var _ = this,
	            navigables, prevNavigable;
	
	        navigables = _.getNavigableIndexes();
	        prevNavigable = 0;
	        if (index > navigables[navigables.length - 1]) {
	            index = navigables[navigables.length - 1];
	        } else {
	            for (var n in navigables) {
	                if (index < navigables[n]) {
	                    index = prevNavigable;
	                    break;
	                }
	                prevNavigable = navigables[n];
	            }
	        }
	
	        return index;
	    };
	
	    Slick.prototype.cleanUpEvents = function() {
	
	        var _ = this;
	
	        if (_.options.dots && _.$dots !== null) {
	
	            $('li', _.$dots)
	                .off('click.slick', _.changeSlide)
	                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
	                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));
	
	            if (_.options.accessibility === true) {
	                _.$dots.off('keydown.slick', _.keyHandler);
	            }
	        }
	
	        _.$slider.off('focus.slick blur.slick');
	
	        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
	            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
	            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
	
	            if (_.options.accessibility === true) {
	                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
	                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
	            }
	        }
	
	        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
	        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
	        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
	        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);
	
	        _.$list.off('click.slick', _.clickHandler);
	
	        $(document).off(_.visibilityChange, _.visibility);
	
	        _.cleanUpSlideEvents();
	
	        if (_.options.accessibility === true) {
	            _.$list.off('keydown.slick', _.keyHandler);
	        }
	
	        if (_.options.focusOnSelect === true) {
	            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
	        }
	
	        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);
	
	        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);
	
	        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);
	
	        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
	
	    };
	
	    Slick.prototype.cleanUpSlideEvents = function() {
	
	        var _ = this;
	
	        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
	        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
	
	    };
	
	    Slick.prototype.cleanUpRows = function() {
	
	        var _ = this, originalSlides;
	
	        if(_.options.rows > 0) {
	            originalSlides = _.$slides.children().children();
	            originalSlides.removeAttr('style');
	            _.$slider.empty().append(originalSlides);
	        }
	
	    };
	
	    Slick.prototype.clickHandler = function(event) {
	
	        var _ = this;
	
	        if (_.shouldClick === false) {
	            event.stopImmediatePropagation();
	            event.stopPropagation();
	            event.preventDefault();
	        }
	
	    };
	
	    Slick.prototype.destroy = function(refresh) {
	
	        var _ = this;
	
	        _.autoPlayClear();
	
	        _.touchObject = {};
	
	        _.cleanUpEvents();
	
	        $('.slick-cloned', _.$slider).detach();
	
	        if (_.$dots) {
	            _.$dots.remove();
	        }
	
	        if ( _.$prevArrow && _.$prevArrow.length ) {
	
	            _.$prevArrow
	                .removeClass('slick-disabled slick-arrow slick-hidden')
	                .removeAttr('aria-hidden aria-disabled tabindex')
	                .css('display','');
	
	            if ( _.htmlExpr.test( _.options.prevArrow )) {
	                _.$prevArrow.remove();
	            }
	        }
	
	        if ( _.$nextArrow && _.$nextArrow.length ) {
	
	            _.$nextArrow
	                .removeClass('slick-disabled slick-arrow slick-hidden')
	                .removeAttr('aria-hidden aria-disabled tabindex')
	                .css('display','');
	
	            if ( _.htmlExpr.test( _.options.nextArrow )) {
	                _.$nextArrow.remove();
	            }
	        }
	
	
	        if (_.$slides) {
	
	            _.$slides
	                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
	                .removeAttr('aria-hidden')
	                .removeAttr('data-slick-index')
	                .each(function(){
	                    $(this).attr('style', $(this).data('originalStyling'));
	                });
	
	            _.$slideTrack.children(this.options.slide).detach();
	
	            _.$slideTrack.detach();
	
	            _.$list.detach();
	
	            _.$slider.append(_.$slides);
	        }
	
	        _.cleanUpRows();
	
	        _.$slider.removeClass('slick-slider');
	        _.$slider.removeClass('slick-initialized');
	        _.$slider.removeClass('slick-dotted');
	
	        _.unslicked = true;
	
	        if(!refresh) {
	            _.$slider.trigger('destroy', [_]);
	        }
	
	    };
	
	    Slick.prototype.disableTransition = function(slide) {
	
	        var _ = this,
	            transition = {};
	
	        transition[_.transitionType] = '';
	
	        if (_.options.fade === false) {
	            _.$slideTrack.css(transition);
	        } else {
	            _.$slides.eq(slide).css(transition);
	        }
	
	    };
	
	    Slick.prototype.fadeSlide = function(slideIndex, callback) {
	
	        var _ = this;
	
	        if (_.cssTransitions === false) {
	
	            _.$slides.eq(slideIndex).css({
	                zIndex: _.options.zIndex
	            });
	
	            _.$slides.eq(slideIndex).animate({
	                opacity: 1
	            }, _.options.speed, _.options.easing, callback);
	
	        } else {
	
	            _.applyTransition(slideIndex);
	
	            _.$slides.eq(slideIndex).css({
	                opacity: 1,
	                zIndex: _.options.zIndex
	            });
	
	            if (callback) {
	                setTimeout(function() {
	
	                    _.disableTransition(slideIndex);
	
	                    callback.call();
	                }, _.options.speed);
	            }
	
	        }
	
	    };
	
	    Slick.prototype.fadeSlideOut = function(slideIndex) {
	
	        var _ = this;
	
	        if (_.cssTransitions === false) {
	
	            _.$slides.eq(slideIndex).animate({
	                opacity: 0,
	                zIndex: _.options.zIndex - 2
	            }, _.options.speed, _.options.easing);
	
	        } else {
	
	            _.applyTransition(slideIndex);
	
	            _.$slides.eq(slideIndex).css({
	                opacity: 0,
	                zIndex: _.options.zIndex - 2
	            });
	
	        }
	
	    };
	
	    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
	
	        var _ = this;
	
	        if (filter !== null) {
	
	            _.$slidesCache = _.$slides;
	
	            _.unload();
	
	            _.$slideTrack.children(this.options.slide).detach();
	
	            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);
	
	            _.reinit();
	
	        }
	
	    };
	
	    Slick.prototype.focusHandler = function() {
	
	        var _ = this;
	
	        // If any child element receives focus within the slider we need to pause the autoplay
	        _.$slider
	            .off('focus.slick blur.slick')
	            .on(
	                'focus.slick',
	                '*',
	                function(event) {
	                    var $sf = $(this);
	
	                    setTimeout(function() {
	                        if( _.options.pauseOnFocus ) {
	                            if ($sf.is(':focus')) {
	                                _.focussed = true;
	                                _.autoPlay();
	                            }
	                        }
	                    }, 0);
	                }
	            ).on(
	                'blur.slick',
	                '*',
	                function(event) {
	                    var $sf = $(this);
	
	                    // When a blur occurs on any elements within the slider we become unfocused
	                    if( _.options.pauseOnFocus ) {
	                        _.focussed = false;
	                        _.autoPlay();
	                    }
	                }
	            );
	    };
	
	    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
	
	        var _ = this;
	        return _.currentSlide;
	
	    };
	
	    Slick.prototype.getDotCount = function() {
	
	        var _ = this;
	
	        var breakPoint = 0;
	        var counter = 0;
	        var pagerQty = 0;
	
	        if (_.options.infinite === true) {
	            if (_.slideCount <= _.options.slidesToShow) {
	                 ++pagerQty;
	            } else {
	                while (breakPoint < _.slideCount) {
	                    ++pagerQty;
	                    breakPoint = counter + _.options.slidesToScroll;
	                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
	                }
	            }
	        } else if (_.options.centerMode === true) {
	            pagerQty = _.slideCount;
	        } else if(!_.options.asNavFor) {
	            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
	        }else {
	            while (breakPoint < _.slideCount) {
	                ++pagerQty;
	                breakPoint = counter + _.options.slidesToScroll;
	                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
	            }
	        }
	
	        return pagerQty - 1;
	
	    };
	
	    Slick.prototype.getLeft = function(slideIndex) {
	
	        var _ = this,
	            targetLeft,
	            verticalHeight,
	            verticalOffset = 0,
	            targetSlide,
	            coef;
	
	        _.slideOffset = 0;
	        verticalHeight = _.$slides.first().outerHeight(true);
	
	        if (_.options.infinite === true) {
	            if (_.slideCount > _.options.slidesToShow) {
	                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
	                coef = -1
	
	                if (_.options.vertical === true && _.options.centerMode === true) {
	                    if (_.options.slidesToShow === 2) {
	                        coef = -1.5;
	                    } else if (_.options.slidesToShow === 1) {
	                        coef = -2
	                    }
	                }
	                verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;
	            }
	            if (_.slideCount % _.options.slidesToScroll !== 0) {
	                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
	                    if (slideIndex > _.slideCount) {
	                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
	                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
	                    } else {
	                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
	                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
	                    }
	                }
	            }
	        } else {
	            if (slideIndex + _.options.slidesToShow > _.slideCount) {
	                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
	                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
	            }
	        }
	
	        if (_.slideCount <= _.options.slidesToShow) {
	            _.slideOffset = 0;
	            verticalOffset = 0;
	        }
	
	        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
	            _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);
	        } else if (_.options.centerMode === true && _.options.infinite === true) {
	            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
	        } else if (_.options.centerMode === true) {
	            _.slideOffset = 0;
	            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
	        }
	
	        if (_.options.vertical === false) {
	            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
	        } else {
	            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
	        }
	
	        if (_.options.variableWidth === true) {
	
	            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
	                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
	            } else {
	                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
	            }
	
	            if (_.options.rtl === true) {
	                if (targetSlide[0]) {
	                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
	                } else {
	                    targetLeft =  0;
	                }
	            } else {
	                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
	            }
	
	            if (_.options.centerMode === true) {
	                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
	                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
	                } else {
	                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
	                }
	
	                if (_.options.rtl === true) {
	                    if (targetSlide[0]) {
	                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
	                    } else {
	                        targetLeft =  0;
	                    }
	                } else {
	                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
	                }
	
	                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
	            }
	        }
	
	        return targetLeft;
	
	    };
	
	    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
	
	        var _ = this;
	
	        return _.options[option];
	
	    };
	
	    Slick.prototype.getNavigableIndexes = function() {
	
	        var _ = this,
	            breakPoint = 0,
	            counter = 0,
	            indexes = [],
	            max;
	
	        if (_.options.infinite === false) {
	            max = _.slideCount;
	        } else {
	            breakPoint = _.options.slidesToScroll * -1;
	            counter = _.options.slidesToScroll * -1;
	            max = _.slideCount * 2;
	        }
	
	        while (breakPoint < max) {
	            indexes.push(breakPoint);
	            breakPoint = counter + _.options.slidesToScroll;
	            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
	        }
	
	        return indexes;
	
	    };
	
	    Slick.prototype.getSlick = function() {
	
	        return this;
	
	    };
	
	    Slick.prototype.getSlideCount = function() {
	
	        var _ = this,
	            slidesTraversed, swipedSlide, swipeTarget, centerOffset;
	
	        centerOffset = _.options.centerMode === true ? Math.floor(_.$list.width() / 2) : 0;
	        swipeTarget = (_.swipeLeft * -1) + centerOffset;
	
	        if (_.options.swipeToSlide === true) {
	
	            _.$slideTrack.find('.slick-slide').each(function(index, slide) {
	
	                var slideOuterWidth, slideOffset, slideRightBoundary;
	                slideOuterWidth = $(slide).outerWidth();
	                slideOffset = slide.offsetLeft;
	                if (_.options.centerMode !== true) {
	                    slideOffset += (slideOuterWidth / 2);
	                }
	
	                slideRightBoundary = slideOffset + (slideOuterWidth);
	
	                if (swipeTarget < slideRightBoundary) {
	                    swipedSlide = slide;
	                    return false;
	                }
	            });
	
	            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;
	
	            return slidesTraversed;
	
	        } else {
	            return _.options.slidesToScroll;
	        }
	
	    };
	
	    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
	
	        var _ = this;
	
	        _.changeSlide({
	            data: {
	                message: 'index',
	                index: parseInt(slide)
	            }
	        }, dontAnimate);
	
	    };
	
	    Slick.prototype.init = function(creation) {
	
	        var _ = this;
	
	        if (!$(_.$slider).hasClass('slick-initialized')) {
	
	            $(_.$slider).addClass('slick-initialized');
	
	            _.buildRows();
	            _.buildOut();
	            _.setProps();
	            _.startLoad();
	            _.loadSlider();
	            _.initializeEvents();
	            _.updateArrows();
	            _.updateDots();
	            _.checkResponsive(true);
	            _.focusHandler();
	
	        }
	
	        if (creation) {
	            _.$slider.trigger('init', [_]);
	        }
	
	        if (_.options.accessibility === true) {
	            _.initADA();
	        }
	
	        if ( _.options.autoplay ) {
	
	            _.paused = false;
	            _.autoPlay();
	
	        }
	
	    };
	
	    Slick.prototype.initADA = function() {
	        var _ = this,
	                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
	                tabControlIndexes = _.getNavigableIndexes().filter(function(val) {
	                    return (val >= 0) && (val < _.slideCount);
	                });
	
	        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
	            'aria-hidden': 'true',
	            'tabindex': '-1'
	        }).find('a, input, button, select').attr({
	            'tabindex': '-1'
	        });
	
	        if (_.$dots !== null) {
	            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
	                var slideControlIndex = tabControlIndexes.indexOf(i);
	
	                $(this).attr({
	                    'role': 'tabpanel',
	                    'id': 'slick-slide' + _.instanceUid + i,
	                    'tabindex': -1
	                });
	
	                if (slideControlIndex !== -1) {
	                   var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex
	                   if ($('#' + ariaButtonControl).length) {
	                     $(this).attr({
	                         'aria-describedby': ariaButtonControl
	                     });
	                   }
	                }
	            });
	
	            _.$dots.attr('role', 'tablist').find('li').each(function(i) {
	                var mappedSlideIndex = tabControlIndexes[i];
	
	                $(this).attr({
	                    'role': 'presentation'
	                });
	
	                $(this).find('button').first().attr({
	                    'role': 'tab',
	                    'id': 'slick-slide-control' + _.instanceUid + i,
	                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
	                    'aria-label': (i + 1) + ' of ' + numDotGroups,
	                    'aria-selected': null,
	                    'tabindex': '-1'
	                });
	
	            }).eq(_.currentSlide).find('button').attr({
	                'aria-selected': 'true',
	                'tabindex': '0'
	            }).end();
	        }
	
	        for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {
	          if (_.options.focusOnChange) {
	            _.$slides.eq(i).attr({'tabindex': '0'});
	          } else {
	            _.$slides.eq(i).removeAttr('tabindex');
	          }
	        }
	
	        _.activateADA();
	
	    };
	
	    Slick.prototype.initArrowEvents = function() {
	
	        var _ = this;
	
	        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
	            _.$prevArrow
	               .off('click.slick')
	               .on('click.slick', {
	                    message: 'previous'
	               }, _.changeSlide);
	            _.$nextArrow
	               .off('click.slick')
	               .on('click.slick', {
	                    message: 'next'
	               }, _.changeSlide);
	
	            if (_.options.accessibility === true) {
	                _.$prevArrow.on('keydown.slick', _.keyHandler);
	                _.$nextArrow.on('keydown.slick', _.keyHandler);
	            }
	        }
	
	    };
	
	    Slick.prototype.initDotEvents = function() {
	
	        var _ = this;
	
	        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
	            $('li', _.$dots).on('click.slick', {
	                message: 'index'
	            }, _.changeSlide);
	
	            if (_.options.accessibility === true) {
	                _.$dots.on('keydown.slick', _.keyHandler);
	            }
	        }
	
	        if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {
	
	            $('li', _.$dots)
	                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
	                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));
	
	        }
	
	    };
	
	    Slick.prototype.initSlideEvents = function() {
	
	        var _ = this;
	
	        if ( _.options.pauseOnHover ) {
	
	            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
	            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
	
	        }
	
	    };
	
	    Slick.prototype.initializeEvents = function() {
	
	        var _ = this;
	
	        _.initArrowEvents();
	
	        _.initDotEvents();
	        _.initSlideEvents();
	
	        _.$list.on('touchstart.slick mousedown.slick', {
	            action: 'start'
	        }, _.swipeHandler);
	        _.$list.on('touchmove.slick mousemove.slick', {
	            action: 'move'
	        }, _.swipeHandler);
	        _.$list.on('touchend.slick mouseup.slick', {
	            action: 'end'
	        }, _.swipeHandler);
	        _.$list.on('touchcancel.slick mouseleave.slick', {
	            action: 'end'
	        }, _.swipeHandler);
	
	        _.$list.on('click.slick', _.clickHandler);
	
	        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));
	
	        if (_.options.accessibility === true) {
	            _.$list.on('keydown.slick', _.keyHandler);
	        }
	
	        if (_.options.focusOnSelect === true) {
	            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
	        }
	
	        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));
	
	        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));
	
	        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);
	
	        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
	        $(_.setPosition);
	
	    };
	
	    Slick.prototype.initUI = function() {
	
	        var _ = this;
	
	        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
	
	            _.$prevArrow.show();
	            _.$nextArrow.show();
	
	        }
	
	        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
	
	            _.$dots.show();
	
	        }
	
	    };
	
	    Slick.prototype.keyHandler = function(event) {
	
	        var _ = this;
	         //Dont slide if the cursor is inside the form fields and arrow keys are pressed
	        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
	            if (event.keyCode === 37 && _.options.accessibility === true) {
	                _.changeSlide({
	                    data: {
	                        message: _.options.rtl === true ? 'next' :  'previous'
	                    }
	                });
	            } else if (event.keyCode === 39 && _.options.accessibility === true) {
	                _.changeSlide({
	                    data: {
	                        message: _.options.rtl === true ? 'previous' : 'next'
	                    }
	                });
	            }
	        }
	
	    };
	
	    Slick.prototype.lazyLoad = function() {
	
	        var _ = this,
	            loadRange, cloneRange, rangeStart, rangeEnd;
	
	        function loadImages(imagesScope) {
	
	            $('img[data-lazy]', imagesScope).each(function() {
	
	                var image = $(this),
	                    imageSource = $(this).attr('data-lazy'),
	                    imageSrcSet = $(this).attr('data-srcset'),
	                    imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
	                    imageToLoad = document.createElement('img');
	
	                imageToLoad.onload = function() {
	
	                    image
	                        .animate({ opacity: 0 }, 100, function() {
	
	                            if (imageSrcSet) {
	                                image
	                                    .attr('srcset', imageSrcSet );
	
	                                if (imageSizes) {
	                                    image
	                                        .attr('sizes', imageSizes );
	                                }
	                            }
	
	                            image
	                                .attr('src', imageSource)
	                                .animate({ opacity: 1 }, 200, function() {
	                                    image
	                                        .removeAttr('data-lazy data-srcset data-sizes')
	                                        .removeClass('slick-loading');
	                                });
	                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
	                        });
	
	                };
	
	                imageToLoad.onerror = function() {
	
	                    image
	                        .removeAttr( 'data-lazy' )
	                        .removeClass( 'slick-loading' )
	                        .addClass( 'slick-lazyload-error' );
	
	                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);
	
	                };
	
	                imageToLoad.src = imageSource;
	
	            });
	
	        }
	
	        if (_.options.centerMode === true) {
	            if (_.options.infinite === true) {
	                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
	                rangeEnd = rangeStart + _.options.slidesToShow + 2;
	            } else {
	                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
	                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
	            }
	        } else {
	            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
	            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
	            if (_.options.fade === true) {
	                if (rangeStart > 0) rangeStart--;
	                if (rangeEnd <= _.slideCount) rangeEnd++;
	            }
	        }
	
	        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
	
	        if (_.options.lazyLoad === 'anticipated') {
	            var prevSlide = rangeStart - 1,
	                nextSlide = rangeEnd,
	                $slides = _.$slider.find('.slick-slide');
	
	            for (var i = 0; i < _.options.slidesToScroll; i++) {
	                if (prevSlide < 0) prevSlide = _.slideCount - 1;
	                loadRange = loadRange.add($slides.eq(prevSlide));
	                loadRange = loadRange.add($slides.eq(nextSlide));
	                prevSlide--;
	                nextSlide++;
	            }
	        }
	
	        loadImages(loadRange);
	
	        if (_.slideCount <= _.options.slidesToShow) {
	            cloneRange = _.$slider.find('.slick-slide');
	            loadImages(cloneRange);
	        } else
	        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
	            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
	            loadImages(cloneRange);
	        } else if (_.currentSlide === 0) {
	            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
	            loadImages(cloneRange);
	        }
	
	    };
	
	    Slick.prototype.loadSlider = function() {
	
	        var _ = this;
	
	        _.setPosition();
	
	        _.$slideTrack.css({
	            opacity: 1
	        });
	
	        _.$slider.removeClass('slick-loading');
	
	        _.initUI();
	
	        if (_.options.lazyLoad === 'progressive') {
	            _.progressiveLazyLoad();
	        }
	
	    };
	
	    Slick.prototype.next = Slick.prototype.slickNext = function() {
	
	        var _ = this;
	
	        _.changeSlide({
	            data: {
	                message: 'next'
	            }
	        });
	
	    };
	
	    Slick.prototype.orientationChange = function() {
	
	        var _ = this;
	
	        _.checkResponsive();
	        _.setPosition();
	
	    };
	
	    Slick.prototype.pause = Slick.prototype.slickPause = function() {
	
	        var _ = this;
	
	        _.autoPlayClear();
	        _.paused = true;
	
	    };
	
	    Slick.prototype.play = Slick.prototype.slickPlay = function() {
	
	        var _ = this;
	
	        _.autoPlay();
	        _.options.autoplay = true;
	        _.paused = false;
	        _.focussed = false;
	        _.interrupted = false;
	
	    };
	
	    Slick.prototype.postSlide = function(index) {
	
	        var _ = this;
	
	        if( !_.unslicked ) {
	
	            _.$slider.trigger('afterChange', [_, index]);
	
	            _.animating = false;
	
	            if (_.slideCount > _.options.slidesToShow) {
	                _.setPosition();
	            }
	
	            _.swipeLeft = null;
	
	            if ( _.options.autoplay ) {
	                _.autoPlay();
	            }
	
	            if (_.options.accessibility === true) {
	                _.initADA();
	
	                if (_.options.focusOnChange) {
	                    var $currentSlide = $(_.$slides.get(_.currentSlide));
	                    $currentSlide.attr('tabindex', 0).focus();
	                }
	            }
	
	        }
	
	    };
	
	    Slick.prototype.prev = Slick.prototype.slickPrev = function() {
	
	        var _ = this;
	
	        _.changeSlide({
	            data: {
	                message: 'previous'
	            }
	        });
	
	    };
	
	    Slick.prototype.preventDefault = function(event) {
	
	        event.preventDefault();
	
	    };
	
	    Slick.prototype.progressiveLazyLoad = function( tryCount ) {
	
	        tryCount = tryCount || 1;
	
	        var _ = this,
	            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
	            image,
	            imageSource,
	            imageSrcSet,
	            imageSizes,
	            imageToLoad;
	
	        if ( $imgsToLoad.length ) {
	
	            image = $imgsToLoad.first();
	            imageSource = image.attr('data-lazy');
	            imageSrcSet = image.attr('data-srcset');
	            imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');
	            imageToLoad = document.createElement('img');
	
	            imageToLoad.onload = function() {
	
	                if (imageSrcSet) {
	                    image
	                        .attr('srcset', imageSrcSet );
	
	                    if (imageSizes) {
	                        image
	                            .attr('sizes', imageSizes );
	                    }
	                }
	
	                image
	                    .attr( 'src', imageSource )
	                    .removeAttr('data-lazy data-srcset data-sizes')
	                    .removeClass('slick-loading');
	
	                if ( _.options.adaptiveHeight === true ) {
	                    _.setPosition();
	                }
	
	                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
	                _.progressiveLazyLoad();
	
	            };
	
	            imageToLoad.onerror = function() {
	
	                if ( tryCount < 3 ) {
	
	                    /**
	                     * try to load the image 3 times,
	                     * leave a slight delay so we don't get
	                     * servers blocking the request.
	                     */
	                    setTimeout( function() {
	                        _.progressiveLazyLoad( tryCount + 1 );
	                    }, 500 );
	
	                } else {
	
	                    image
	                        .removeAttr( 'data-lazy' )
	                        .removeClass( 'slick-loading' )
	                        .addClass( 'slick-lazyload-error' );
	
	                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);
	
	                    _.progressiveLazyLoad();
	
	                }
	
	            };
	
	            imageToLoad.src = imageSource;
	
	        } else {
	
	            _.$slider.trigger('allImagesLoaded', [ _ ]);
	
	        }
	
	    };
	
	    Slick.prototype.refresh = function( initializing ) {
	
	        var _ = this, currentSlide, lastVisibleIndex;
	
	        lastVisibleIndex = _.slideCount - _.options.slidesToShow;
	
	        // in non-infinite sliders, we don't want to go past the
	        // last visible index.
	        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
	            _.currentSlide = lastVisibleIndex;
	        }
	
	        // if less slides than to show, go to start.
	        if ( _.slideCount <= _.options.slidesToShow ) {
	            _.currentSlide = 0;
	
	        }
	
	        currentSlide = _.currentSlide;
	
	        _.destroy(true);
	
	        $.extend(_, _.initials, { currentSlide: currentSlide });
	
	        _.init();
	
	        if( !initializing ) {
	
	            _.changeSlide({
	                data: {
	                    message: 'index',
	                    index: currentSlide
	                }
	            }, false);
	
	        }
	
	    };
	
	    Slick.prototype.registerBreakpoints = function() {
	
	        var _ = this, breakpoint, currentBreakpoint, l,
	            responsiveSettings = _.options.responsive || null;
	
	        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {
	
	            _.respondTo = _.options.respondTo || 'window';
	
	            for ( breakpoint in responsiveSettings ) {
	
	                l = _.breakpoints.length-1;
	
	                if (responsiveSettings.hasOwnProperty(breakpoint)) {
	                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;
	
	                    // loop through the breakpoints and cut out any existing
	                    // ones with the same breakpoint number, we don't want dupes.
	                    while( l >= 0 ) {
	                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
	                            _.breakpoints.splice(l,1);
	                        }
	                        l--;
	                    }
	
	                    _.breakpoints.push(currentBreakpoint);
	                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
	
	                }
	
	            }
	
	            _.breakpoints.sort(function(a, b) {
	                return ( _.options.mobileFirst ) ? a-b : b-a;
	            });
	
	        }
	
	    };
	
	    Slick.prototype.reinit = function() {
	
	        var _ = this;
	
	        _.$slides =
	            _.$slideTrack
	                .children(_.options.slide)
	                .addClass('slick-slide');
	
	        _.slideCount = _.$slides.length;
	
	        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
	            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
	        }
	
	        if (_.slideCount <= _.options.slidesToShow) {
	            _.currentSlide = 0;
	        }
	
	        _.registerBreakpoints();
	
	        _.setProps();
	        _.setupInfinite();
	        _.buildArrows();
	        _.updateArrows();
	        _.initArrowEvents();
	        _.buildDots();
	        _.updateDots();
	        _.initDotEvents();
	        _.cleanUpSlideEvents();
	        _.initSlideEvents();
	
	        _.checkResponsive(false, true);
	
	        if (_.options.focusOnSelect === true) {
	            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
	        }
	
	        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);
	
	        _.setPosition();
	        _.focusHandler();
	
	        _.paused = !_.options.autoplay;
	        _.autoPlay();
	
	        _.$slider.trigger('reInit', [_]);
	
	    };
	
	    Slick.prototype.resize = function() {
	
	        var _ = this;
	
	        if ($(window).width() !== _.windowWidth) {
	            clearTimeout(_.windowDelay);
	            _.windowDelay = window.setTimeout(function() {
	                _.windowWidth = $(window).width();
	                _.checkResponsive();
	                if( !_.unslicked ) { _.setPosition(); }
	            }, 50);
	        }
	    };
	
	    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {
	
	        var _ = this;
	
	        if (typeof(index) === 'boolean') {
	            removeBefore = index;
	            index = removeBefore === true ? 0 : _.slideCount - 1;
	        } else {
	            index = removeBefore === true ? --index : index;
	        }
	
	        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
	            return false;
	        }
	
	        _.unload();
	
	        if (removeAll === true) {
	            _.$slideTrack.children().remove();
	        } else {
	            _.$slideTrack.children(this.options.slide).eq(index).remove();
	        }
	
	        _.$slides = _.$slideTrack.children(this.options.slide);
	
	        _.$slideTrack.children(this.options.slide).detach();
	
	        _.$slideTrack.append(_.$slides);
	
	        _.$slidesCache = _.$slides;
	
	        _.reinit();
	
	    };
	
	    Slick.prototype.setCSS = function(position) {
	
	        var _ = this,
	            positionProps = {},
	            x, y;
	
	        if (_.options.rtl === true) {
	            position = -position;
	        }
	        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
	        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';
	
	        positionProps[_.positionProp] = position;
	
	        if (_.transformsEnabled === false) {
	            _.$slideTrack.css(positionProps);
	        } else {
	            positionProps = {};
	            if (_.cssTransitions === false) {
	                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
	                _.$slideTrack.css(positionProps);
	            } else {
	                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
	                _.$slideTrack.css(positionProps);
	            }
	        }
	
	    };
	
	    Slick.prototype.setDimensions = function() {
	
	        var _ = this;
	
	        if (_.options.vertical === false) {
	            if (_.options.centerMode === true) {
	                _.$list.css({
	                    padding: ('0px ' + _.options.centerPadding)
	                });
	            }
	        } else {
	            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
	            if (_.options.centerMode === true) {
	                _.$list.css({
	                    padding: (_.options.centerPadding + ' 0px')
	                });
	            }
	        }
	
	        _.listWidth = _.$list.width();
	        _.listHeight = _.$list.height();
	
	
	        if (_.options.vertical === false && _.options.variableWidth === false) {
	            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
	            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));
	
	        } else if (_.options.variableWidth === true) {
	            _.$slideTrack.width(5000 * _.slideCount);
	        } else {
	            _.slideWidth = Math.ceil(_.listWidth);
	            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
	        }
	
	        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
	        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
	
	    };
	
	    Slick.prototype.setFade = function() {
	
	        var _ = this,
	            targetLeft;
	
	        _.$slides.each(function(index, element) {
	            targetLeft = (_.slideWidth * index) * -1;
	            if (_.options.rtl === true) {
	                $(element).css({
	                    position: 'relative',
	                    right: targetLeft,
	                    top: 0,
	                    zIndex: _.options.zIndex - 2,
	                    opacity: 0
	                });
	            } else {
	                $(element).css({
	                    position: 'relative',
	                    left: targetLeft,
	                    top: 0,
	                    zIndex: _.options.zIndex - 2,
	                    opacity: 0
	                });
	            }
	        });
	
	        _.$slides.eq(_.currentSlide).css({
	            zIndex: _.options.zIndex - 1,
	            opacity: 1
	        });
	
	    };
	
	    Slick.prototype.setHeight = function() {
	
	        var _ = this;
	
	        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
	            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
	            _.$list.css('height', targetHeight);
	        }
	
	    };
	
	    Slick.prototype.setOption =
	    Slick.prototype.slickSetOption = function() {
	
	        /**
	         * accepts arguments in format of:
	         *
	         *  - for changing a single option's value:
	         *     .slick("setOption", option, value, refresh )
	         *
	         *  - for changing a set of responsive options:
	         *     .slick("setOption", 'responsive', [{}, ...], refresh )
	         *
	         *  - for updating multiple values at once (not responsive)
	         *     .slick("setOption", { 'option': value, ... }, refresh )
	         */
	
	        var _ = this, l, item, option, value, refresh = false, type;
	
	        if( $.type( arguments[0] ) === 'object' ) {
	
	            option =  arguments[0];
	            refresh = arguments[1];
	            type = 'multiple';
	
	        } else if ( $.type( arguments[0] ) === 'string' ) {
	
	            option =  arguments[0];
	            value = arguments[1];
	            refresh = arguments[2];
	
	            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {
	
	                type = 'responsive';
	
	            } else if ( typeof arguments[1] !== 'undefined' ) {
	
	                type = 'single';
	
	            }
	
	        }
	
	        if ( type === 'single' ) {
	
	            _.options[option] = value;
	
	
	        } else if ( type === 'multiple' ) {
	
	            $.each( option , function( opt, val ) {
	
	                _.options[opt] = val;
	
	            });
	
	
	        } else if ( type === 'responsive' ) {
	
	            for ( item in value ) {
	
	                if( $.type( _.options.responsive ) !== 'array' ) {
	
	                    _.options.responsive = [ value[item] ];
	
	                } else {
	
	                    l = _.options.responsive.length-1;
	
	                    // loop through the responsive object and splice out duplicates.
	                    while( l >= 0 ) {
	
	                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {
	
	                            _.options.responsive.splice(l,1);
	
	                        }
	
	                        l--;
	
	                    }
	
	                    _.options.responsive.push( value[item] );
	
	                }
	
	            }
	
	        }
	
	        if ( refresh ) {
	
	            _.unload();
	            _.reinit();
	
	        }
	
	    };
	
	    Slick.prototype.setPosition = function() {
	
	        var _ = this;
	
	        _.setDimensions();
	
	        _.setHeight();
	
	        if (_.options.fade === false) {
	            _.setCSS(_.getLeft(_.currentSlide));
	        } else {
	            _.setFade();
	        }
	
	        _.$slider.trigger('setPosition', [_]);
	
	    };
	
	    Slick.prototype.setProps = function() {
	
	        var _ = this,
	            bodyStyle = document.body.style;
	
	        _.positionProp = _.options.vertical === true ? 'top' : 'left';
	
	        if (_.positionProp === 'top') {
	            _.$slider.addClass('slick-vertical');
	        } else {
	            _.$slider.removeClass('slick-vertical');
	        }
	
	        if (bodyStyle.WebkitTransition !== undefined ||
	            bodyStyle.MozTransition !== undefined ||
	            bodyStyle.msTransition !== undefined) {
	            if (_.options.useCSS === true) {
	                _.cssTransitions = true;
	            }
	        }
	
	        if ( _.options.fade ) {
	            if ( typeof _.options.zIndex === 'number' ) {
	                if( _.options.zIndex < 3 ) {
	                    _.options.zIndex = 3;
	                }
	            } else {
	                _.options.zIndex = _.defaults.zIndex;
	            }
	        }
	
	        if (bodyStyle.OTransform !== undefined) {
	            _.animType = 'OTransform';
	            _.transformType = '-o-transform';
	            _.transitionType = 'OTransition';
	            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
	        }
	        if (bodyStyle.MozTransform !== undefined) {
	            _.animType = 'MozTransform';
	            _.transformType = '-moz-transform';
	            _.transitionType = 'MozTransition';
	            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
	        }
	        if (bodyStyle.webkitTransform !== undefined) {
	            _.animType = 'webkitTransform';
	            _.transformType = '-webkit-transform';
	            _.transitionType = 'webkitTransition';
	            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
	        }
	        if (bodyStyle.msTransform !== undefined) {
	            _.animType = 'msTransform';
	            _.transformType = '-ms-transform';
	            _.transitionType = 'msTransition';
	            if (bodyStyle.msTransform === undefined) _.animType = false;
	        }
	        if (bodyStyle.transform !== undefined && _.animType !== false) {
	            _.animType = 'transform';
	            _.transformType = 'transform';
	            _.transitionType = 'transition';
	        }
	        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
	    };
	
	
	    Slick.prototype.setSlideClasses = function(index) {
	
	        var _ = this,
	            centerOffset, allSlides, indexOffset, remainder;
	
	        allSlides = _.$slider
	            .find('.slick-slide')
	            .removeClass('slick-active slick-center slick-current')
	            .attr('aria-hidden', 'true');
	
	        _.$slides
	            .eq(index)
	            .addClass('slick-current');
	
	        if (_.options.centerMode === true) {
	
	            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;
	
	            centerOffset = Math.floor(_.options.slidesToShow / 2);
	
	            if (_.options.infinite === true) {
	
	                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {
	                    _.$slides
	                        .slice(index - centerOffset + evenCoef, index + centerOffset + 1)
	                        .addClass('slick-active')
	                        .attr('aria-hidden', 'false');
	
	                } else {
	
	                    indexOffset = _.options.slidesToShow + index;
	                    allSlides
	                        .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)
	                        .addClass('slick-active')
	                        .attr('aria-hidden', 'false');
	
	                }
	
	                if (index === 0) {
	
	                    allSlides
	                        .eq(allSlides.length - 1 - _.options.slidesToShow)
	                        .addClass('slick-center');
	
	                } else if (index === _.slideCount - 1) {
	
	                    allSlides
	                        .eq(_.options.slidesToShow)
	                        .addClass('slick-center');
	
	                }
	
	            }
	
	            _.$slides
	                .eq(index)
	                .addClass('slick-center');
	
	        } else {
	
	            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {
	
	                _.$slides
	                    .slice(index, index + _.options.slidesToShow)
	                    .addClass('slick-active')
	                    .attr('aria-hidden', 'false');
	
	            } else if (allSlides.length <= _.options.slidesToShow) {
	
	                allSlides
	                    .addClass('slick-active')
	                    .attr('aria-hidden', 'false');
	
	            } else {
	
	                remainder = _.slideCount % _.options.slidesToShow;
	                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;
	
	                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {
	
	                    allSlides
	                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
	                        .addClass('slick-active')
	                        .attr('aria-hidden', 'false');
	
	                } else {
	
	                    allSlides
	                        .slice(indexOffset, indexOffset + _.options.slidesToShow)
	                        .addClass('slick-active')
	                        .attr('aria-hidden', 'false');
	
	                }
	
	            }
	
	        }
	
	        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
	            _.lazyLoad();
	        }
	    };
	
	    Slick.prototype.setupInfinite = function() {
	
	        var _ = this,
	            i, slideIndex, infiniteCount;
	
	        if (_.options.fade === true) {
	            _.options.centerMode = false;
	        }
	
	        if (_.options.infinite === true && _.options.fade === false) {
	
	            slideIndex = null;
	
	            if (_.slideCount > _.options.slidesToShow) {
	
	                if (_.options.centerMode === true) {
	                    infiniteCount = _.options.slidesToShow + 1;
	                } else {
	                    infiniteCount = _.options.slidesToShow;
	                }
	
	                for (i = _.slideCount; i > (_.slideCount -
	                        infiniteCount); i -= 1) {
	                    slideIndex = i - 1;
	                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
	                        .attr('data-slick-index', slideIndex - _.slideCount)
	                        .prependTo(_.$slideTrack).addClass('slick-cloned');
	                }
	                for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {
	                    slideIndex = i;
	                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
	                        .attr('data-slick-index', slideIndex + _.slideCount)
	                        .appendTo(_.$slideTrack).addClass('slick-cloned');
	                }
	                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
	                    $(this).attr('id', '');
	                });
	
	            }
	
	        }
	
	    };
	
	    Slick.prototype.interrupt = function( toggle ) {
	
	        var _ = this;
	
	        if( !toggle ) {
	            _.autoPlay();
	        }
	        _.interrupted = toggle;
	
	    };
	
	    Slick.prototype.selectHandler = function(event) {
	
	        var _ = this;
	
	        var targetElement =
	            $(event.target).is('.slick-slide') ?
	                $(event.target) :
	                $(event.target).parents('.slick-slide');
	
	        var index = parseInt(targetElement.attr('data-slick-index'));
	
	        if (!index) index = 0;
	
	        if (_.slideCount <= _.options.slidesToShow) {
	
	            _.slideHandler(index, false, true);
	            return;
	
	        }
	
	        _.slideHandler(index);
	
	    };
	
	    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
	
	        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
	            _ = this, navTarget;
	
	        sync = sync || false;
	
	        if (_.animating === true && _.options.waitForAnimate === true) {
	            return;
	        }
	
	        if (_.options.fade === true && _.currentSlide === index) {
	            return;
	        }
	
	        if (sync === false) {
	            _.asNavFor(index);
	        }
	
	        targetSlide = index;
	        targetLeft = _.getLeft(targetSlide);
	        slideLeft = _.getLeft(_.currentSlide);
	
	        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;
	
	        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
	            if (_.options.fade === false) {
	                targetSlide = _.currentSlide;
	                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
	                    _.animateSlide(slideLeft, function() {
	                        _.postSlide(targetSlide);
	                    });
	                } else {
	                    _.postSlide(targetSlide);
	                }
	            }
	            return;
	        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
	            if (_.options.fade === false) {
	                targetSlide = _.currentSlide;
	                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
	                    _.animateSlide(slideLeft, function() {
	                        _.postSlide(targetSlide);
	                    });
	                } else {
	                    _.postSlide(targetSlide);
	                }
	            }
	            return;
	        }
	
	        if ( _.options.autoplay ) {
	            clearInterval(_.autoPlayTimer);
	        }
	
	        if (targetSlide < 0) {
	            if (_.slideCount % _.options.slidesToScroll !== 0) {
	                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
	            } else {
	                animSlide = _.slideCount + targetSlide;
	            }
	        } else if (targetSlide >= _.slideCount) {
	            if (_.slideCount % _.options.slidesToScroll !== 0) {
	                animSlide = 0;
	            } else {
	                animSlide = targetSlide - _.slideCount;
	            }
	        } else {
	            animSlide = targetSlide;
	        }
	
	        _.animating = true;
	
	        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);
	
	        oldSlide = _.currentSlide;
	        _.currentSlide = animSlide;
	
	        _.setSlideClasses(_.currentSlide);
	
	        if ( _.options.asNavFor ) {
	
	            navTarget = _.getNavTarget();
	            navTarget = navTarget.slick('getSlick');
	
	            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
	                navTarget.setSlideClasses(_.currentSlide);
	            }
	
	        }
	
	        _.updateDots();
	        _.updateArrows();
	
	        if (_.options.fade === true) {
	            if (dontAnimate !== true) {
	
	                _.fadeSlideOut(oldSlide);
	
	                _.fadeSlide(animSlide, function() {
	                    _.postSlide(animSlide);
	                });
	
	            } else {
	                _.postSlide(animSlide);
	            }
	            _.animateHeight();
	            return;
	        }
	
	        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
	            _.animateSlide(targetLeft, function() {
	                _.postSlide(animSlide);
	            });
	        } else {
	            _.postSlide(animSlide);
	        }
	
	    };
	
	    Slick.prototype.startLoad = function() {
	
	        var _ = this;
	
	        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
	
	            _.$prevArrow.hide();
	            _.$nextArrow.hide();
	
	        }
	
	        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
	
	            _.$dots.hide();
	
	        }
	
	        _.$slider.addClass('slick-loading');
	
	    };
	
	    Slick.prototype.swipeDirection = function() {
	
	        var xDist, yDist, r, swipeAngle, _ = this;
	
	        xDist = _.touchObject.startX - _.touchObject.curX;
	        yDist = _.touchObject.startY - _.touchObject.curY;
	        r = Math.atan2(yDist, xDist);
	
	        swipeAngle = Math.round(r * 180 / Math.PI);
	        if (swipeAngle < 0) {
	            swipeAngle = 360 - Math.abs(swipeAngle);
	        }
	
	        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
	            return (_.options.rtl === false ? 'left' : 'right');
	        }
	        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
	            return (_.options.rtl === false ? 'left' : 'right');
	        }
	        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
	            return (_.options.rtl === false ? 'right' : 'left');
	        }
	        if (_.options.verticalSwiping === true) {
	            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
	                return 'down';
	            } else {
	                return 'up';
	            }
	        }
	
	        return 'vertical';
	
	    };
	
	    Slick.prototype.swipeEnd = function(event) {
	
	        var _ = this,
	            slideCount,
	            direction;
	
	        _.dragging = false;
	        _.swiping = false;
	
	        if (_.scrolling) {
	            _.scrolling = false;
	            return false;
	        }
	
	        _.interrupted = false;
	        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;
	
	        if ( _.touchObject.curX === undefined ) {
	            return false;
	        }
	
	        if ( _.touchObject.edgeHit === true ) {
	            _.$slider.trigger('edge', [_, _.swipeDirection() ]);
	        }
	
	        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {
	
	            direction = _.swipeDirection();
	
	            switch ( direction ) {
	
	                case 'left':
	                case 'down':
	
	                    slideCount =
	                        _.options.swipeToSlide ?
	                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
	                            _.currentSlide + _.getSlideCount();
	
	                    _.currentDirection = 0;
	
	                    break;
	
	                case 'right':
	                case 'up':
	
	                    slideCount =
	                        _.options.swipeToSlide ?
	                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
	                            _.currentSlide - _.getSlideCount();
	
	                    _.currentDirection = 1;
	
	                    break;
	
	                default:
	
	
	            }
	
	            if( direction != 'vertical' ) {
	
	                _.slideHandler( slideCount );
	                _.touchObject = {};
	                _.$slider.trigger('swipe', [_, direction ]);
	
	            }
	
	        } else {
	
	            if ( _.touchObject.startX !== _.touchObject.curX ) {
	
	                _.slideHandler( _.currentSlide );
	                _.touchObject = {};
	
	            }
	
	        }
	
	    };
	
	    Slick.prototype.swipeHandler = function(event) {
	
	        var _ = this;
	
	        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
	            return;
	        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
	            return;
	        }
	
	        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
	            event.originalEvent.touches.length : 1;
	
	        _.touchObject.minSwipe = _.listWidth / _.options
	            .touchThreshold;
	
	        if (_.options.verticalSwiping === true) {
	            _.touchObject.minSwipe = _.listHeight / _.options
	                .touchThreshold;
	        }
	
	        switch (event.data.action) {
	
	            case 'start':
	                _.swipeStart(event);
	                break;
	
	            case 'move':
	                _.swipeMove(event);
	                break;
	
	            case 'end':
	                _.swipeEnd(event);
	                break;
	
	        }
	
	    };
	
	    Slick.prototype.swipeMove = function(event) {
	
	        var _ = this,
	            edgeWasHit = false,
	            curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;
	
	        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;
	
	        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
	            return false;
	        }
	
	        curLeft = _.getLeft(_.currentSlide);
	
	        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
	        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;
	
	        _.touchObject.swipeLength = Math.round(Math.sqrt(
	            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));
	
	        verticalSwipeLength = Math.round(Math.sqrt(
	            Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
	
	        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
	            _.scrolling = true;
	            return false;
	        }
	
	        if (_.options.verticalSwiping === true) {
	            _.touchObject.swipeLength = verticalSwipeLength;
	        }
	
	        swipeDirection = _.swipeDirection();
	
	        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
	            _.swiping = true;
	            event.preventDefault();
	        }
	
	        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
	        if (_.options.verticalSwiping === true) {
	            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
	        }
	
	
	        swipeLength = _.touchObject.swipeLength;
	
	        _.touchObject.edgeHit = false;
	
	        if (_.options.infinite === false) {
	            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
	                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
	                _.touchObject.edgeHit = true;
	            }
	        }
	
	        if (_.options.vertical === false) {
	            _.swipeLeft = curLeft + swipeLength * positionOffset;
	        } else {
	            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
	        }
	        if (_.options.verticalSwiping === true) {
	            _.swipeLeft = curLeft + swipeLength * positionOffset;
	        }
	
	        if (_.options.fade === true || _.options.touchMove === false) {
	            return false;
	        }
	
	        if (_.animating === true) {
	            _.swipeLeft = null;
	            return false;
	        }
	
	        _.setCSS(_.swipeLeft);
	
	    };
	
	    Slick.prototype.swipeStart = function(event) {
	
	        var _ = this,
	            touches;
	
	        _.interrupted = true;
	
	        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
	            _.touchObject = {};
	            return false;
	        }
	
	        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
	            touches = event.originalEvent.touches[0];
	        }
	
	        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
	        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;
	
	        _.dragging = true;
	
	    };
	
	    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
	
	        var _ = this;
	
	        if (_.$slidesCache !== null) {
	
	            _.unload();
	
	            _.$slideTrack.children(this.options.slide).detach();
	
	            _.$slidesCache.appendTo(_.$slideTrack);
	
	            _.reinit();
	
	        }
	
	    };
	
	    Slick.prototype.unload = function() {
	
	        var _ = this;
	
	        $('.slick-cloned', _.$slider).remove();
	
	        if (_.$dots) {
	            _.$dots.remove();
	        }
	
	        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
	            _.$prevArrow.remove();
	        }
	
	        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
	            _.$nextArrow.remove();
	        }
	
	        _.$slides
	            .removeClass('slick-slide slick-active slick-visible slick-current')
	            .attr('aria-hidden', 'true')
	            .css('width', '');
	
	    };
	
	    Slick.prototype.unslick = function(fromBreakpoint) {
	
	        var _ = this;
	        _.$slider.trigger('unslick', [_, fromBreakpoint]);
	        _.destroy();
	
	    };
	
	    Slick.prototype.updateArrows = function() {
	
	        var _ = this,
	            centerOffset;
	
	        centerOffset = Math.floor(_.options.slidesToShow / 2);
	
	        if ( _.options.arrows === true &&
	            _.slideCount > _.options.slidesToShow &&
	            !_.options.infinite ) {
	
	            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
	            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
	
	            if (_.currentSlide === 0) {
	
	                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
	                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
	
	            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {
	
	                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
	                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
	
	            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {
	
	                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
	                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
	
	            }
	
	        }
	
	    };
	
	    Slick.prototype.updateDots = function() {
	
	        var _ = this;
	
	        if (_.$dots !== null) {
	
	            _.$dots
	                .find('li')
	                    .removeClass('slick-active')
	                    .end();
	
	            _.$dots
	                .find('li')
	                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
	                .addClass('slick-active');
	
	        }
	
	    };
	
	    Slick.prototype.visibility = function() {
	
	        var _ = this;
	
	        if ( _.options.autoplay ) {
	
	            if ( document[_.hidden] ) {
	
	                _.interrupted = true;
	
	            } else {
	
	                _.interrupted = false;
	
	            }
	
	        }
	
	    };
	
	    $.fn.slick = function() {
	        var _ = this,
	            opt = arguments[0],
	            args = Array.prototype.slice.call(arguments, 1),
	            l = _.length,
	            i,
	            ret;
	        for (i = 0; i < l; i++) {
	            if (typeof opt == 'object' || typeof opt == 'undefined')
	                _[i].slick = new Slick(_[i], opt);
	            else
	                ret = _[i].slick[opt].apply(_[i].slick, args);
	            if (typeof ret != 'undefined') return ret;
	        }
	        return _;
	    };
	
	}));


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	var require;var require;/* WEBPACK VAR INJECTION */(function(global) {(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Parallax = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};
	
	},{}],2:[function(require,module,exports){
	(function (process){
	// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
	
	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }
	
	}).call(this);
	
	
	
	}).call(this,require('_process'))
	
	},{"_process":3}],3:[function(require,module,exports){
	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };
	
	},{}],4:[function(require,module,exports){
	(function (global){
	var now = require('performance-now')
	  , root = typeof window === 'undefined' ? global : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]
	
	for(var i = 0; !raf && i < vendors.length; i++) {
	  raf = root[vendors[i] + 'Request' + suffix]
	  caf = root[vendors[i] + 'Cancel' + suffix]
	      || root[vendors[i] + 'CancelRequest' + suffix]
	}
	
	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60
	
	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = now()
	        , next = Math.max(0, frameDuration - (_now - last))
	      last = next + _now
	      setTimeout(function() {
	        var cp = queue.slice(0)
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last)
	            } catch(e) {
	              setTimeout(function() { throw e }, 0)
	            }
	          }
	        }
	      }, Math.round(next))
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    })
	    return id
	  }
	
	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true
	      }
	    }
	  }
	}
	
	module.exports = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root, fn)
	}
	module.exports.cancel = function() {
	  caf.apply(root, arguments)
	}
	module.exports.polyfill = function() {
	  root.requestAnimationFrame = raf
	  root.cancelAnimationFrame = caf
	}
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	
	},{"performance-now":2}],5:[function(require,module,exports){
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	* Parallax.js
	* @author Matthew Wagerfield - @wagerfield, René Roth - mail@reneroth.org
	* @description Creates a parallax effect between an array of layers,
	*              driving the motion from the gyroscope output of a smartdevice.
	*              If no gyroscope is available, the cursor position is used.
	*/
	
	var rqAnFr = require('raf');
	var objectAssign = require('object-assign');
	
	var helpers = {
	  propertyCache: {},
	  vendors: [null, ['-webkit-', 'webkit'], ['-moz-', 'Moz'], ['-o-', 'O'], ['-ms-', 'ms']],
	
	  clamp: function clamp(value, min, max) {
	    return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;
	  },
	  data: function data(element, name) {
	    return helpers.deserialize(element.getAttribute('data-' + name));
	  },
	  deserialize: function deserialize(value) {
	    if (value === 'true') {
	      return true;
	    } else if (value === 'false') {
	      return false;
	    } else if (value === 'null') {
	      return null;
	    } else if (!isNaN(parseFloat(value)) && isFinite(value)) {
	      return parseFloat(value);
	    } else {
	      return value;
	    }
	  },
	  camelCase: function camelCase(value) {
	    return value.replace(/-+(.)?/g, function (match, character) {
	      return character ? character.toUpperCase() : '';
	    });
	  },
	  accelerate: function accelerate(element) {
	    helpers.css(element, 'transform', 'translate3d(0,0,0) rotate(0.0001deg)');
	    helpers.css(element, 'transform-style', 'preserve-3d');
	    helpers.css(element, 'backface-visibility', 'hidden');
	  },
	  transformSupport: function transformSupport(value) {
	    var element = document.createElement('div'),
	        propertySupport = false,
	        propertyValue = null,
	        featureSupport = false,
	        cssProperty = null,
	        jsProperty = null;
	    for (var i = 0, l = helpers.vendors.length; i < l; i++) {
	      if (helpers.vendors[i] !== null) {
	        cssProperty = helpers.vendors[i][0] + 'transform';
	        jsProperty = helpers.vendors[i][1] + 'Transform';
	      } else {
	        cssProperty = 'transform';
	        jsProperty = 'transform';
	      }
	      if (element.style[jsProperty] !== undefined) {
	        propertySupport = true;
	        break;
	      }
	    }
	    switch (value) {
	      case '2D':
	        featureSupport = propertySupport;
	        break;
	      case '3D':
	        if (propertySupport) {
	          var body = document.body || document.createElement('body'),
	              documentElement = document.documentElement,
	              documentOverflow = documentElement.style.overflow,
	              isCreatedBody = false;
	
	          if (!document.body) {
	            isCreatedBody = true;
	            documentElement.style.overflow = 'hidden';
	            documentElement.appendChild(body);
	            body.style.overflow = 'hidden';
	            body.style.background = '';
	          }
	
	          body.appendChild(element);
	          element.style[jsProperty] = 'translate3d(1px,1px,1px)';
	          propertyValue = window.getComputedStyle(element).getPropertyValue(cssProperty);
	          featureSupport = propertyValue !== undefined && propertyValue.length > 0 && propertyValue !== 'none';
	          documentElement.style.overflow = documentOverflow;
	          body.removeChild(element);
	
	          if (isCreatedBody) {
	            body.removeAttribute('style');
	            body.parentNode.removeChild(body);
	          }
	        }
	        break;
	    }
	    return featureSupport;
	  },
	  css: function css(element, property, value) {
	    var jsProperty = helpers.propertyCache[property];
	    if (!jsProperty) {
	      for (var i = 0, l = helpers.vendors.length; i < l; i++) {
	        if (helpers.vendors[i] !== null) {
	          jsProperty = helpers.camelCase(helpers.vendors[i][1] + '-' + property);
	        } else {
	          jsProperty = property;
	        }
	        if (element.style[jsProperty] !== undefined) {
	          helpers.propertyCache[property] = jsProperty;
	          break;
	        }
	      }
	    }
	    element.style[jsProperty] = value;
	  }
	};
	
	var MAGIC_NUMBER = 30,
	    DEFAULTS = {
	  relativeInput: false,
	  clipRelativeInput: false,
	  inputElement: null,
	  hoverOnly: false,
	  calibrationThreshold: 100,
	  calibrationDelay: 500,
	  supportDelay: 500,
	  calibrateX: false,
	  calibrateY: true,
	  invertX: true,
	  invertY: true,
	  limitX: false,
	  limitY: false,
	  scalarX: 10.0,
	  scalarY: 10.0,
	  frictionX: 0.1,
	  frictionY: 0.1,
	  originX: 0.5,
	  originY: 0.5,
	  pointerEvents: false,
	  precision: 1,
	  onReady: null,
	  selector: null
	};
	
	var Parallax = function () {
	  function Parallax(element, options) {
	    _classCallCheck(this, Parallax);
	
	    this.element = element;
	
	    var data = {
	      calibrateX: helpers.data(this.element, 'calibrate-x'),
	      calibrateY: helpers.data(this.element, 'calibrate-y'),
	      invertX: helpers.data(this.element, 'invert-x'),
	      invertY: helpers.data(this.element, 'invert-y'),
	      limitX: helpers.data(this.element, 'limit-x'),
	      limitY: helpers.data(this.element, 'limit-y'),
	      scalarX: helpers.data(this.element, 'scalar-x'),
	      scalarY: helpers.data(this.element, 'scalar-y'),
	      frictionX: helpers.data(this.element, 'friction-x'),
	      frictionY: helpers.data(this.element, 'friction-y'),
	      originX: helpers.data(this.element, 'origin-x'),
	      originY: helpers.data(this.element, 'origin-y'),
	      pointerEvents: helpers.data(this.element, 'pointer-events'),
	      precision: helpers.data(this.element, 'precision'),
	      relativeInput: helpers.data(this.element, 'relative-input'),
	      clipRelativeInput: helpers.data(this.element, 'clip-relative-input'),
	      hoverOnly: helpers.data(this.element, 'hover-only'),
	      inputElement: document.querySelector(helpers.data(this.element, 'input-element')),
	      selector: helpers.data(this.element, 'selector')
	    };
	
	    for (var key in data) {
	      if (data[key] === null) {
	        delete data[key];
	      }
	    }
	
	    objectAssign(this, DEFAULTS, data, options);
	
	    if (!this.inputElement) {
	      this.inputElement = this.element;
	    }
	
	    this.calibrationTimer = null;
	    this.calibrationFlag = true;
	    this.enabled = false;
	    this.depthsX = [];
	    this.depthsY = [];
	    this.raf = null;
	
	    this.bounds = null;
	    this.elementPositionX = 0;
	    this.elementPositionY = 0;
	    this.elementWidth = 0;
	    this.elementHeight = 0;
	
	    this.elementCenterX = 0;
	    this.elementCenterY = 0;
	
	    this.elementRangeX = 0;
	    this.elementRangeY = 0;
	
	    this.calibrationX = 0;
	    this.calibrationY = 0;
	
	    this.inputX = 0;
	    this.inputY = 0;
	
	    this.motionX = 0;
	    this.motionY = 0;
	
	    this.velocityX = 0;
	    this.velocityY = 0;
	
	    this.onMouseMove = this.onMouseMove.bind(this);
	    this.onDeviceOrientation = this.onDeviceOrientation.bind(this);
	    this.onDeviceMotion = this.onDeviceMotion.bind(this);
	    this.onOrientationTimer = this.onOrientationTimer.bind(this);
	    this.onMotionTimer = this.onMotionTimer.bind(this);
	    this.onCalibrationTimer = this.onCalibrationTimer.bind(this);
	    this.onAnimationFrame = this.onAnimationFrame.bind(this);
	    this.onWindowResize = this.onWindowResize.bind(this);
	
	    this.windowWidth = null;
	    this.windowHeight = null;
	    this.windowCenterX = null;
	    this.windowCenterY = null;
	    this.windowRadiusX = null;
	    this.windowRadiusY = null;
	    this.portrait = false;
	    this.desktop = !navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|BB10|mobi|tablet|opera mini|nexus 7)/i);
	    this.motionSupport = !!window.DeviceMotionEvent && !this.desktop;
	    this.orientationSupport = !!window.DeviceOrientationEvent && !this.desktop;
	    this.orientationStatus = 0;
	    this.motionStatus = 0;
	
	    this.initialise();
	  }
	
	  _createClass(Parallax, [{
	    key: 'initialise',
	    value: function initialise() {
	      if (this.transform2DSupport === undefined) {
	        this.transform2DSupport = helpers.transformSupport('2D');
	        this.transform3DSupport = helpers.transformSupport('3D');
	      }
	
	      // Configure Context Styles
	      if (this.transform3DSupport) {
	        helpers.accelerate(this.element);
	      }
	
	      var style = window.getComputedStyle(this.element);
	      if (style.getPropertyValue('position') === 'static') {
	        this.element.style.position = 'relative';
	      }
	
	      // Pointer events
	      if (!this.pointerEvents) {
	        this.element.style.pointerEvents = 'none';
	      }
	
	      // Setup
	      this.updateLayers();
	      this.updateDimensions();
	      this.enable();
	      this.queueCalibration(this.calibrationDelay);
	    }
	  }, {
	    key: 'doReadyCallback',
	    value: function doReadyCallback() {
	      if (this.onReady) {
	        this.onReady();
	      }
	    }
	  }, {
	    key: 'updateLayers',
	    value: function updateLayers() {
	      if (this.selector) {
	        this.layers = this.element.querySelectorAll(this.selector);
	      } else {
	        this.layers = this.element.children;
	      }
	
	      if (!this.layers.length) {
	        console.warn('ParallaxJS: Your scene does not have any layers.');
	      }
	
	      this.depthsX = [];
	      this.depthsY = [];
	
	      for (var index = 0; index < this.layers.length; index++) {
	        var layer = this.layers[index];
	
	        if (this.transform3DSupport) {
	          helpers.accelerate(layer);
	        }
	
	        layer.style.position = index ? 'absolute' : 'relative';
	        layer.style.display = 'block';
	        layer.style.left = 0;
	        layer.style.top = 0;
	
	        var depth = helpers.data(layer, 'depth') || 0;
	        this.depthsX.push(helpers.data(layer, 'depth-x') || depth);
	        this.depthsY.push(helpers.data(layer, 'depth-y') || depth);
	      }
	    }
	  }, {
	    key: 'updateDimensions',
	    value: function updateDimensions() {
	      this.windowWidth = window.innerWidth;
	      this.windowHeight = window.innerHeight;
	      this.windowCenterX = this.windowWidth * this.originX;
	      this.windowCenterY = this.windowHeight * this.originY;
	      this.windowRadiusX = Math.max(this.windowCenterX, this.windowWidth - this.windowCenterX);
	      this.windowRadiusY = Math.max(this.windowCenterY, this.windowHeight - this.windowCenterY);
	    }
	  }, {
	    key: 'updateBounds',
	    value: function updateBounds() {
	      this.bounds = this.inputElement.getBoundingClientRect();
	      this.elementPositionX = this.bounds.left;
	      this.elementPositionY = this.bounds.top;
	      this.elementWidth = this.bounds.width;
	      this.elementHeight = this.bounds.height;
	      this.elementCenterX = this.elementWidth * this.originX;
	      this.elementCenterY = this.elementHeight * this.originY;
	      this.elementRangeX = Math.max(this.elementCenterX, this.elementWidth - this.elementCenterX);
	      this.elementRangeY = Math.max(this.elementCenterY, this.elementHeight - this.elementCenterY);
	    }
	  }, {
	    key: 'queueCalibration',
	    value: function queueCalibration(delay) {
	      clearTimeout(this.calibrationTimer);
	      this.calibrationTimer = setTimeout(this.onCalibrationTimer, delay);
	    }
	  }, {
	    key: 'enable',
	    value: function enable() {
	      if (this.enabled) {
	        return;
	      }
	      this.enabled = true;
	
	      if (this.orientationSupport) {
	        this.portrait = false;
	        window.addEventListener('deviceorientation', this.onDeviceOrientation);
	        this.detectionTimer = setTimeout(this.onOrientationTimer, this.supportDelay);
	      } else if (this.motionSupport) {
	        this.portrait = false;
	        window.addEventListener('devicemotion', this.onDeviceMotion);
	        this.detectionTimer = setTimeout(this.onMotionTimer, this.supportDelay);
	      } else {
	        this.calibrationX = 0;
	        this.calibrationY = 0;
	        this.portrait = false;
	        window.addEventListener('mousemove', this.onMouseMove);
	        this.doReadyCallback();
	      }
	
	      window.addEventListener('resize', this.onWindowResize);
	      this.raf = rqAnFr(this.onAnimationFrame);
	    }
	  }, {
	    key: 'disable',
	    value: function disable() {
	      if (!this.enabled) {
	        return;
	      }
	      this.enabled = false;
	
	      if (this.orientationSupport) {
	        window.removeEventListener('deviceorientation', this.onDeviceOrientation);
	      } else if (this.motionSupport) {
	        window.removeEventListener('devicemotion', this.onDeviceMotion);
	      } else {
	        window.removeEventListener('mousemove', this.onMouseMove);
	      }
	
	      window.removeEventListener('resize', this.onWindowResize);
	      rqAnFr.cancel(this.raf);
	    }
	  }, {
	    key: 'calibrate',
	    value: function calibrate(x, y) {
	      this.calibrateX = x === undefined ? this.calibrateX : x;
	      this.calibrateY = y === undefined ? this.calibrateY : y;
	    }
	  }, {
	    key: 'invert',
	    value: function invert(x, y) {
	      this.invertX = x === undefined ? this.invertX : x;
	      this.invertY = y === undefined ? this.invertY : y;
	    }
	  }, {
	    key: 'friction',
	    value: function friction(x, y) {
	      this.frictionX = x === undefined ? this.frictionX : x;
	      this.frictionY = y === undefined ? this.frictionY : y;
	    }
	  }, {
	    key: 'scalar',
	    value: function scalar(x, y) {
	      this.scalarX = x === undefined ? this.scalarX : x;
	      this.scalarY = y === undefined ? this.scalarY : y;
	    }
	  }, {
	    key: 'limit',
	    value: function limit(x, y) {
	      this.limitX = x === undefined ? this.limitX : x;
	      this.limitY = y === undefined ? this.limitY : y;
	    }
	  }, {
	    key: 'origin',
	    value: function origin(x, y) {
	      this.originX = x === undefined ? this.originX : x;
	      this.originY = y === undefined ? this.originY : y;
	    }
	  }, {
	    key: 'setInputElement',
	    value: function setInputElement(element) {
	      this.inputElement = element;
	      this.updateDimensions();
	    }
	  }, {
	    key: 'setPosition',
	    value: function setPosition(element, x, y) {
	      x = x.toFixed(this.precision) + 'px';
	      y = y.toFixed(this.precision) + 'px';
	      if (this.transform3DSupport) {
	        helpers.css(element, 'transform', 'translate3d(' + x + ',' + y + ',0)');
	      } else if (this.transform2DSupport) {
	        helpers.css(element, 'transform', 'translate(' + x + ',' + y + ')');
	      } else {
	        element.style.left = x;
	        element.style.top = y;
	      }
	    }
	  }, {
	    key: 'onOrientationTimer',
	    value: function onOrientationTimer() {
	      if (this.orientationSupport && this.orientationStatus === 0) {
	        this.disable();
	        this.orientationSupport = false;
	        this.enable();
	      } else {
	        this.doReadyCallback();
	      }
	    }
	  }, {
	    key: 'onMotionTimer',
	    value: function onMotionTimer() {
	      if (this.motionSupport && this.motionStatus === 0) {
	        this.disable();
	        this.motionSupport = false;
	        this.enable();
	      } else {
	        this.doReadyCallback();
	      }
	    }
	  }, {
	    key: 'onCalibrationTimer',
	    value: function onCalibrationTimer() {
	      this.calibrationFlag = true;
	    }
	  }, {
	    key: 'onWindowResize',
	    value: function onWindowResize() {
	      this.updateDimensions();
	    }
	  }, {
	    key: 'onAnimationFrame',
	    value: function onAnimationFrame() {
	      this.updateBounds();
	      var calibratedInputX = this.inputX - this.calibrationX,
	          calibratedInputY = this.inputY - this.calibrationY;
	      if (Math.abs(calibratedInputX) > this.calibrationThreshold || Math.abs(calibratedInputY) > this.calibrationThreshold) {
	        this.queueCalibration(0);
	      }
	      if (this.portrait) {
	        this.motionX = this.calibrateX ? calibratedInputY : this.inputY;
	        this.motionY = this.calibrateY ? calibratedInputX : this.inputX;
	      } else {
	        this.motionX = this.calibrateX ? calibratedInputX : this.inputX;
	        this.motionY = this.calibrateY ? calibratedInputY : this.inputY;
	      }
	      this.motionX *= this.elementWidth * (this.scalarX / 100);
	      this.motionY *= this.elementHeight * (this.scalarY / 100);
	      if (!isNaN(parseFloat(this.limitX))) {
	        this.motionX = helpers.clamp(this.motionX, -this.limitX, this.limitX);
	      }
	      if (!isNaN(parseFloat(this.limitY))) {
	        this.motionY = helpers.clamp(this.motionY, -this.limitY, this.limitY);
	      }
	      this.velocityX += (this.motionX - this.velocityX) * this.frictionX;
	      this.velocityY += (this.motionY - this.velocityY) * this.frictionY;
	      for (var index = 0; index < this.layers.length; index++) {
	        var layer = this.layers[index],
	            depthX = this.depthsX[index],
	            depthY = this.depthsY[index],
	            xOffset = this.velocityX * (depthX * (this.invertX ? -1 : 1)),
	            yOffset = this.velocityY * (depthY * (this.invertY ? -1 : 1));
	        this.setPosition(layer, xOffset, yOffset);
	      }
	      this.raf = rqAnFr(this.onAnimationFrame);
	    }
	  }, {
	    key: 'rotate',
	    value: function rotate(beta, gamma) {
	      // Extract Rotation
	      var x = (beta || 0) / MAGIC_NUMBER,
	          //  -90 :: 90
	      y = (gamma || 0) / MAGIC_NUMBER; // -180 :: 180
	
	      // Detect Orientation Change
	      var portrait = this.windowHeight > this.windowWidth;
	      if (this.portrait !== portrait) {
	        this.portrait = portrait;
	        this.calibrationFlag = true;
	      }
	
	      if (this.calibrationFlag) {
	        this.calibrationFlag = false;
	        this.calibrationX = x;
	        this.calibrationY = y;
	      }
	
	      this.inputX = x;
	      this.inputY = y;
	    }
	  }, {
	    key: 'onDeviceOrientation',
	    value: function onDeviceOrientation(event) {
	      var beta = event.beta;
	      var gamma = event.gamma;
	      if (beta !== null && gamma !== null) {
	        this.orientationStatus = 1;
	        this.rotate(beta, gamma);
	      }
	    }
	  }, {
	    key: 'onDeviceMotion',
	    value: function onDeviceMotion(event) {
	      var beta = event.rotationRate.beta;
	      var gamma = event.rotationRate.gamma;
	      if (beta !== null && gamma !== null) {
	        this.motionStatus = 1;
	        this.rotate(beta, gamma);
	      }
	    }
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      var clientX = event.clientX,
	          clientY = event.clientY;
	
	      // reset input to center if hoverOnly is set and we're not hovering the element
	      if (this.hoverOnly && (clientX < this.elementPositionX || clientX > this.elementPositionX + this.elementWidth || clientY < this.elementPositionY || clientY > this.elementPositionY + this.elementHeight)) {
	        this.inputX = 0;
	        this.inputY = 0;
	        return;
	      }
	
	      if (this.relativeInput) {
	        // Clip mouse coordinates inside element bounds.
	        if (this.clipRelativeInput) {
	          clientX = Math.max(clientX, this.elementPositionX);
	          clientX = Math.min(clientX, this.elementPositionX + this.elementWidth);
	          clientY = Math.max(clientY, this.elementPositionY);
	          clientY = Math.min(clientY, this.elementPositionY + this.elementHeight);
	        }
	        // Calculate input relative to the element.
	        if (this.elementRangeX && this.elementRangeY) {
	          this.inputX = (clientX - this.elementPositionX - this.elementCenterX) / this.elementRangeX;
	          this.inputY = (clientY - this.elementPositionY - this.elementCenterY) / this.elementRangeY;
	        }
	      } else {
	        // Calculate input relative to the window.
	        if (this.windowRadiusX && this.windowRadiusY) {
	          this.inputX = (clientX - this.windowCenterX) / this.windowRadiusX;
	          this.inputY = (clientY - this.windowCenterY) / this.windowRadiusY;
	        }
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.disable();
	
	      clearTimeout(this.calibrationTimer);
	      clearTimeout(this.detectionTimer);
	
	      this.element.removeAttribute('style');
	      for (var index = 0; index < this.layers.length; index++) {
	        this.layers[index].removeAttribute('style');
	      }
	
	      delete this.element;
	      delete this.layers;
	    }
	  }, {
	    key: 'version',
	    value: function version() {
	      return '3.1.0';
	    }
	  }]);
	
	  return Parallax;
	}();
	
	module.exports = Parallax;
	
	},{"object-assign":1,"raf":4}]},{},[5])(5)
	});
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 62 */
/***/ (function(module, exports) {

	// ==================================================
	// fancyBox v3.5.7
	//
	// Licensed GPLv3 for open source use
	// or fancyBox Commercial License for commercial use
	//
	// http://fancyapps.com/fancybox/
	// Copyright 2019 fancyApps
	//
	// ==================================================
	(function (window, document, $, undefined) {
	  "use strict";
	
	  window.console = window.console || {
	    info: function (stuff) {}
	  };
	
	  // If there's no jQuery, fancyBox can't work
	  // =========================================
	
	  if (!$) {
	    return;
	  }
	
	  // Check if fancyBox is already initialized
	  // ========================================
	
	  if ($.fn.fancybox) {
	    console.info("fancyBox already initialized");
	
	    return;
	  }
	
	  // Private default settings
	  // ========================
	
	  var defaults = {
	    // Close existing modals
	    // Set this to false if you do not need to stack multiple instances
	    closeExisting: false,
	
	    // Enable infinite gallery navigation
	    loop: false,
	
	    // Horizontal space between slides
	    gutter: 50,
	
	    // Enable keyboard navigation
	    keyboard: true,
	
	    // Should allow caption to overlap the content
	    preventCaptionOverlap: true,
	
	    // Should display navigation arrows at the screen edges
	    arrows: true,
	
	    // Should display counter at the top left corner
	    infobar: true,
	
	    // Should display close button (using `btnTpl.smallBtn` template) over the content
	    // Can be true, false, "auto"
	    // If "auto" - will be automatically enabled for "html", "inline" or "ajax" items
	    smallBtn: "auto",
	
	    // Should display toolbar (buttons at the top)
	    // Can be true, false, "auto"
	    // If "auto" - will be automatically hidden if "smallBtn" is enabled
	    toolbar: "auto",
	
	    // What buttons should appear in the top right corner.
	    // Buttons will be created using templates from `btnTpl` option
	    // and they will be placed into toolbar (class="fancybox-toolbar"` element)
	    buttons: [
	      "zoom",
	      //"share",
	      "slideShow",
	      //"fullScreen",
	      //"download",
	      "thumbs",
	      "close"
	    ],
	
	    // Detect "idle" time in seconds
	    idleTime: 3,
	
	    // Disable right-click and use simple image protection for images
	    protect: false,
	
	    // Shortcut to make content "modal" - disable keyboard navigtion, hide buttons, etc
	    modal: false,
	
	    image: {
	      // Wait for images to load before displaying
	      //   true  - wait for image to load and then display;
	      //   false - display thumbnail and load the full-sized image over top,
	      //           requires predefined image dimensions (`data-width` and `data-height` attributes)
	      preload: false
	    },
	
	    ajax: {
	      // Object containing settings for ajax request
	      settings: {
	        // This helps to indicate that request comes from the modal
	        // Feel free to change naming
	        data: {
	          fancybox: true
	        }
	      }
	    },
	
	    iframe: {
	      // Iframe template
	      tpl: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',
	
	      // Preload iframe before displaying it
	      // This allows to calculate iframe content width and height
	      // (note: Due to "Same Origin Policy", you can't get cross domain data).
	      preload: true,
	
	      // Custom CSS styling for iframe wrapping element
	      // You can use this to set custom iframe dimensions
	      css: {},
	
	      // Iframe tag attributes
	      attr: {
	        scrolling: "auto"
	      }
	    },
	
	    // For HTML5 video only
	    video: {
	      tpl: '<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}">' +
	        '<source src="{{src}}" type="{{format}}" />' +
	        'Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!' +
	        "</video>",
	      format: "", // custom video format
	      autoStart: true
	    },
	
	    // Default content type if cannot be detected automatically
	    defaultType: "image",
	
	    // Open/close animation type
	    // Possible values:
	    //   false            - disable
	    //   "zoom"           - zoom images from/to thumbnail
	    //   "fade"
	    //   "zoom-in-out"
	    //
	    animationEffect: "zoom",
	
	    // Duration in ms for open/close animation
	    animationDuration: 366,
	
	    // Should image change opacity while zooming
	    // If opacity is "auto", then opacity will be changed if image and thumbnail have different aspect ratios
	    zoomOpacity: "auto",
	
	    // Transition effect between slides
	    //
	    // Possible values:
	    //   false            - disable
	    //   "fade'
	    //   "slide'
	    //   "circular'
	    //   "tube'
	    //   "zoom-in-out'
	    //   "rotate'
	    //
	    transitionEffect: "fade",
	
	    // Duration in ms for transition animation
	    transitionDuration: 366,
	
	    // Custom CSS class for slide element
	    slideClass: "",
	
	    // Custom CSS class for layout
	    baseClass: "",
	
	    // Base template for layout
	    baseTpl: '<div class="fancybox-container" role="dialog" tabindex="-1">' +
	      '<div class="fancybox-bg"></div>' +
	      '<div class="fancybox-inner">' +
	      '<div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div>' +
	      '<div class="fancybox-toolbar">{{buttons}}</div>' +
	      '<div class="fancybox-navigation">{{arrows}}</div>' +
	      '<div class="fancybox-stage"></div>' +
	      '<div class="fancybox-caption"><div class="fancybox-caption__body"></div></div>' +
	      "</div>" +
	      "</div>",
	
	    // Loading indicator template
	    spinnerTpl: '<div class="fancybox-loading"></div>',
	
	    // Error message template
	    errorTpl: '<div class="fancybox-error"><p>{{ERROR}}</p></div>',
	
	    btnTpl: {
	      download: '<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;">' +
	        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg>' +
	        "</a>",
	
	      zoom: '<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}">' +
	        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg>' +
	        "</button>",
	
	      close: '<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}">' +
	        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg>' +
	        "</button>",
	
	      // Arrows
	      arrowLeft: '<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}">' +
	        '<div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div>' +
	        "</button>",
	
	      arrowRight: '<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}">' +
	        '<div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div>' +
	        "</button>",
	
	      // This small close button will be appended to your html/inline/ajax content by default,
	      // if "smallBtn" option is not set to false
	      smallBtn: '<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}">' +
	        '<svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg>' +
	        "</button>"
	    },
	
	    // Container is injected into this element
	    parentEl: "body",
	
	    // Hide browser vertical scrollbars; use at your own risk
	    hideScrollbar: true,
	
	    // Focus handling
	    // ==============
	
	    // Try to focus on the first focusable element after opening
	    autoFocus: true,
	
	    // Put focus back to active element after closing
	    backFocus: true,
	
	    // Do not let user to focus on element outside modal content
	    trapFocus: true,
	
	    // Module specific options
	    // =======================
	
	    fullScreen: {
	      autoStart: false
	    },
	
	    // Set `touch: false` to disable panning/swiping
	    touch: {
	      vertical: true, // Allow to drag content vertically
	      momentum: true // Continue movement after releasing mouse/touch when panning
	    },
	
	    // Hash value when initializing manually,
	    // set `false` to disable hash change
	    hash: null,
	
	    // Customize or add new media types
	    // Example:
	    /*
	      media : {
	        youtube : {
	          params : {
	            autoplay : 0
	          }
	        }
	      }
	    */
	    media: {},
	
	    slideShow: {
	      autoStart: false,
	      speed: 3000
	    },
	
	    thumbs: {
	      autoStart: false, // Display thumbnails on opening
	      hideOnClose: true, // Hide thumbnail grid when closing animation starts
	      parentEl: ".fancybox-container", // Container is injected into this element
	      axis: "y" // Vertical (y) or horizontal (x) scrolling
	    },
	
	    // Use mousewheel to navigate gallery
	    // If 'auto' - enabled for images only
	    wheel: "auto",
	
	    // Callbacks
	    //==========
	
	    // See Documentation/API/Events for more information
	    // Example:
	    /*
	      afterShow: function( instance, current ) {
	        console.info( 'Clicked element:' );
	        console.info( current.opts.$orig );
	      }
	    */
	
	    onInit: $.noop, // When instance has been initialized
	
	    beforeLoad: $.noop, // Before the content of a slide is being loaded
	    afterLoad: $.noop, // When the content of a slide is done loading
	
	    beforeShow: $.noop, // Before open animation starts
	    afterShow: $.noop, // When content is done loading and animating
	
	    beforeClose: $.noop, // Before the instance attempts to close. Return false to cancel the close.
	    afterClose: $.noop, // After instance has been closed
	
	    onActivate: $.noop, // When instance is brought to front
	    onDeactivate: $.noop, // When other instance has been activated
	
	    // Interaction
	    // ===========
	
	    // Use options below to customize taken action when user clicks or double clicks on the fancyBox area,
	    // each option can be string or method that returns value.
	    //
	    // Possible values:
	    //   "close"           - close instance
	    //   "next"            - move to next gallery item
	    //   "nextOrClose"     - move to next gallery item or close if gallery has only one item
	    //   "toggleControls"  - show/hide controls
	    //   "zoom"            - zoom image (if loaded)
	    //   false             - do nothing
	
	    // Clicked on the content
	    clickContent: function (current, event) {
	      return current.type === "image" ? "zoom" : false;
	    },
	
	    // Clicked on the slide
	    clickSlide: "close",
	
	    // Clicked on the background (backdrop) element;
	    // if you have not changed the layout, then most likely you need to use `clickSlide` option
	    clickOutside: "close",
	
	    // Same as previous two, but for double click
	    dblclickContent: false,
	    dblclickSlide: false,
	    dblclickOutside: false,
	
	    // Custom options when mobile device is detected
	    // =============================================
	
	    mobile: {
	      preventCaptionOverlap: false,
	      idleTime: false,
	      clickContent: function (current, event) {
	        return current.type === "image" ? "toggleControls" : false;
	      },
	      clickSlide: function (current, event) {
	        return current.type === "image" ? "toggleControls" : "close";
	      },
	      dblclickContent: function (current, event) {
	        return current.type === "image" ? "zoom" : false;
	      },
	      dblclickSlide: function (current, event) {
	        return current.type === "image" ? "zoom" : false;
	      }
	    },
	
	    // Internationalization
	    // ====================
	
	    lang: "en",
	    i18n: {
	      en: {
	        CLOSE: "Close",
	        NEXT: "Next",
	        PREV: "Previous",
	        ERROR: "The requested content cannot be loaded. <br/> Please try again later.",
	        PLAY_START: "Start slideshow",
	        PLAY_STOP: "Pause slideshow",
	        FULL_SCREEN: "Full screen",
	        THUMBS: "Thumbnails",
	        DOWNLOAD: "Download",
	        SHARE: "Share",
	        ZOOM: "Zoom"
	      },
	      de: {
	        CLOSE: "Schlie&szlig;en",
	        NEXT: "Weiter",
	        PREV: "Zur&uuml;ck",
	        ERROR: "Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",
	        PLAY_START: "Diaschau starten",
	        PLAY_STOP: "Diaschau beenden",
	        FULL_SCREEN: "Vollbild",
	        THUMBS: "Vorschaubilder",
	        DOWNLOAD: "Herunterladen",
	        SHARE: "Teilen",
	        ZOOM: "Vergr&ouml;&szlig;ern"
	      }
	    }
	  };
	
	  // Few useful variables and methods
	  // ================================
	
	  var $W = $(window);
	  var $D = $(document);
	
	  var called = 0;
	
	  // Check if an object is a jQuery object and not a native JavaScript object
	  // ========================================================================
	  var isQuery = function (obj) {
	    return obj && obj.hasOwnProperty && obj instanceof $;
	  };
	
	  // Handle multiple browsers for "requestAnimationFrame" and "cancelAnimationFrame"
	  // ===============================================================================
	  var requestAFrame = (function () {
	    return (
	      window.requestAnimationFrame ||
	      window.webkitRequestAnimationFrame ||
	      window.mozRequestAnimationFrame ||
	      window.oRequestAnimationFrame ||
	      // if all else fails, use setTimeout
	      function (callback) {
	        return window.setTimeout(callback, 1000 / 60);
	      }
	    );
	  })();
	
	  var cancelAFrame = (function () {
	    return (
	      window.cancelAnimationFrame ||
	      window.webkitCancelAnimationFrame ||
	      window.mozCancelAnimationFrame ||
	      window.oCancelAnimationFrame ||
	      function (id) {
	        window.clearTimeout(id);
	      }
	    );
	  })();
	
	  // Detect the supported transition-end event property name
	  // =======================================================
	  var transitionEnd = (function () {
	    var el = document.createElement("fakeelement"),
	      t;
	
	    var transitions = {
	      transition: "transitionend",
	      OTransition: "oTransitionEnd",
	      MozTransition: "transitionend",
	      WebkitTransition: "webkitTransitionEnd"
	    };
	
	    for (t in transitions) {
	      if (el.style[t] !== undefined) {
	        return transitions[t];
	      }
	    }
	
	    return "transitionend";
	  })();
	
	  // Force redraw on an element.
	  // This helps in cases where the browser doesn't redraw an updated element properly
	  // ================================================================================
	  var forceRedraw = function ($el) {
	    return $el && $el.length && $el[0].offsetHeight;
	  };
	
	  // Exclude array (`buttons`) options from deep merging
	  // ===================================================
	  var mergeOpts = function (opts1, opts2) {
	    var rez = $.extend(true, {}, opts1, opts2);
	
	    $.each(opts2, function (key, value) {
	      if ($.isArray(value)) {
	        rez[key] = value;
	      }
	    });
	
	    return rez;
	  };
	
	  // How much of an element is visible in viewport
	  // =============================================
	
	  var inViewport = function (elem) {
	    var elemCenter, rez;
	
	    if (!elem || elem.ownerDocument !== document) {
	      return false;
	    }
	
	    $(".fancybox-container").css("pointer-events", "none");
	
	    elemCenter = {
	      x: elem.getBoundingClientRect().left + elem.offsetWidth / 2,
	      y: elem.getBoundingClientRect().top + elem.offsetHeight / 2
	    };
	
	    rez = document.elementFromPoint(elemCenter.x, elemCenter.y) === elem;
	
	    $(".fancybox-container").css("pointer-events", "");
	
	    return rez;
	  };
	
	  // Class definition
	  // ================
	
	  var FancyBox = function (content, opts, index) {
	    var self = this;
	
	    self.opts = mergeOpts({
	      index: index
	    }, $.fancybox.defaults);
	
	    if ($.isPlainObject(opts)) {
	      self.opts = mergeOpts(self.opts, opts);
	    }
	
	    if ($.fancybox.isMobile) {
	      self.opts = mergeOpts(self.opts, self.opts.mobile);
	    }
	
	    self.id = self.opts.id || ++called;
	
	    self.currIndex = parseInt(self.opts.index, 10) || 0;
	    self.prevIndex = null;
	
	    self.prevPos = null;
	    self.currPos = 0;
	
	    self.firstRun = true;
	
	    // All group items
	    self.group = [];
	
	    // Existing slides (for current, next and previous gallery items)
	    self.slides = {};
	
	    // Create group elements
	    self.addContent(content);
	
	    if (!self.group.length) {
	      return;
	    }
	
	    self.init();
	  };
	
	  $.extend(FancyBox.prototype, {
	    // Create DOM structure
	    // ====================
	
	    init: function () {
	      var self = this,
	        firstItem = self.group[self.currIndex],
	        firstItemOpts = firstItem.opts,
	        $container,
	        buttonStr;
	
	      if (firstItemOpts.closeExisting) {
	        $.fancybox.close(true);
	      }
	
	      // Hide scrollbars
	      // ===============
	
	      $("body").addClass("fancybox-active");
	
	      if (
	        !$.fancybox.getInstance() &&
	        firstItemOpts.hideScrollbar !== false &&
	        !$.fancybox.isMobile &&
	        document.body.scrollHeight > window.innerHeight
	      ) {
	        $("head").append(
	          '<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:' +
	          (window.innerWidth - document.documentElement.clientWidth) +
	          "px;}</style>"
	        );
	
	        $("body").addClass("compensate-for-scrollbar");
	      }
	
	      // Build html markup and set references
	      // ====================================
	
	      // Build html code for buttons and insert into main template
	      buttonStr = "";
	
	      $.each(firstItemOpts.buttons, function (index, value) {
	        buttonStr += firstItemOpts.btnTpl[value] || "";
	      });
	
	      // Create markup from base template, it will be initially hidden to
	      // avoid unnecessary work like painting while initializing is not complete
	      $container = $(
	          self.translate(
	            self,
	            firstItemOpts.baseTpl
	            .replace("{{buttons}}", buttonStr)
	            .replace("{{arrows}}", firstItemOpts.btnTpl.arrowLeft + firstItemOpts.btnTpl.arrowRight)
	          )
	        )
	        .attr("id", "fancybox-container-" + self.id)
	        .addClass(firstItemOpts.baseClass)
	        .data("FancyBox", self)
	        .appendTo(firstItemOpts.parentEl);
	
	      // Create object holding references to jQuery wrapped nodes
	      self.$refs = {
	        container: $container
	      };
	
	      ["bg", "inner", "infobar", "toolbar", "stage", "caption", "navigation"].forEach(function (item) {
	        self.$refs[item] = $container.find(".fancybox-" + item);
	      });
	
	      self.trigger("onInit");
	
	      // Enable events, deactive previous instances
	      self.activate();
	
	      // Build slides, load and reveal content
	      self.jumpTo(self.currIndex);
	    },
	
	    // Simple i18n support - replaces object keys found in template
	    // with corresponding values
	    // ============================================================
	
	    translate: function (obj, str) {
	      var arr = obj.opts.i18n[obj.opts.lang] || obj.opts.i18n.en;
	
	      return str.replace(/\{\{(\w+)\}\}/g, function (match, n) {
	        return arr[n] === undefined ? match : arr[n];
	      });
	    },
	
	    // Populate current group with fresh content
	    // Check if each object has valid type and content
	    // ===============================================
	
	    addContent: function (content) {
	      var self = this,
	        items = $.makeArray(content),
	        thumbs;
	
	      $.each(items, function (i, item) {
	        var obj = {},
	          opts = {},
	          $item,
	          type,
	          found,
	          src,
	          srcParts;
	
	        // Step 1 - Make sure we have an object
	        // ====================================
	
	        if ($.isPlainObject(item)) {
	          // We probably have manual usage here, something like
	          // $.fancybox.open( [ { src : "image.jpg", type : "image" } ] )
	
	          obj = item;
	          opts = item.opts || item;
	        } else if ($.type(item) === "object" && $(item).length) {
	          // Here we probably have jQuery collection returned by some selector
	          $item = $(item);
	
	          // Support attributes like `data-options='{"touch" : false}'` and `data-touch='false'`
	          opts = $item.data() || {};
	          opts = $.extend(true, {}, opts, opts.options);
	
	          // Here we store clicked element
	          opts.$orig = $item;
	
	          obj.src = self.opts.src || opts.src || $item.attr("href");
	
	          // Assume that simple syntax is used, for example:
	          //   `$.fancybox.open( $("#test"), {} );`
	          if (!obj.type && !obj.src) {
	            obj.type = "inline";
	            obj.src = item;
	          }
	        } else {
	          // Assume we have a simple html code, for example:
	          //   $.fancybox.open( '<div><h1>Hi!</h1></div>' );
	          obj = {
	            type: "html",
	            src: item + ""
	          };
	        }
	
	        // Each gallery object has full collection of options
	        obj.opts = $.extend(true, {}, self.opts, opts);
	
	        // Do not merge buttons array
	        if ($.isArray(opts.buttons)) {
	          obj.opts.buttons = opts.buttons;
	        }
	
	        if ($.fancybox.isMobile && obj.opts.mobile) {
	          obj.opts = mergeOpts(obj.opts, obj.opts.mobile);
	        }
	
	        // Step 2 - Make sure we have content type, if not - try to guess
	        // ==============================================================
	
	        type = obj.type || obj.opts.type;
	        src = obj.src || "";
	
	        if (!type && src) {
	          if ((found = src.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))) {
	            type = "video";
	
	            if (!obj.opts.video.format) {
	              obj.opts.video.format = "video/" + (found[1] === "ogv" ? "ogg" : found[1]);
	            }
	          } else if (src.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)) {
	            type = "image";
	          } else if (src.match(/\.(pdf)((\?|#).*)?$/i)) {
	            type = "iframe";
	            obj = $.extend(true, obj, {
	              contentType: "pdf",
	              opts: {
	                iframe: {
	                  preload: false
	                }
	              }
	            });
	          } else if (src.charAt(0) === "#") {
	            type = "inline";
	          }
	        }
	
	        if (type) {
	          obj.type = type;
	        } else {
	          self.trigger("objectNeedsType", obj);
	        }
	
	        if (!obj.contentType) {
	          obj.contentType = $.inArray(obj.type, ["html", "inline", "ajax"]) > -1 ? "html" : obj.type;
	        }
	
	        // Step 3 - Some adjustments
	        // =========================
	
	        obj.index = self.group.length;
	
	        if (obj.opts.smallBtn == "auto") {
	          obj.opts.smallBtn = $.inArray(obj.type, ["html", "inline", "ajax"]) > -1;
	        }
	
	        if (obj.opts.toolbar === "auto") {
	          obj.opts.toolbar = !obj.opts.smallBtn;
	        }
	
	        // Find thumbnail image, check if exists and if is in the viewport
	        obj.$thumb = obj.opts.$thumb || null;
	
	        if (obj.opts.$trigger && obj.index === self.opts.index) {
	          obj.$thumb = obj.opts.$trigger.find("img:first");
	
	          if (obj.$thumb.length) {
	            obj.opts.$orig = obj.opts.$trigger;
	          }
	        }
	
	        if (!(obj.$thumb && obj.$thumb.length) && obj.opts.$orig) {
	          obj.$thumb = obj.opts.$orig.find("img:first");
	        }
	
	        if (obj.$thumb && !obj.$thumb.length) {
	          obj.$thumb = null;
	        }
	
	        obj.thumb = obj.opts.thumb || (obj.$thumb ? obj.$thumb[0].src : null);
	
	        // "caption" is a "special" option, it can be used to customize caption per gallery item
	        if ($.type(obj.opts.caption) === "function") {
	          obj.opts.caption = obj.opts.caption.apply(item, [self, obj]);
	        }
	
	        if ($.type(self.opts.caption) === "function") {
	          obj.opts.caption = self.opts.caption.apply(item, [self, obj]);
	        }
	
	        // Make sure we have caption as a string or jQuery object
	        if (!(obj.opts.caption instanceof $)) {
	          obj.opts.caption = obj.opts.caption === undefined ? "" : obj.opts.caption + "";
	        }
	
	        // Check if url contains "filter" used to filter the content
	        // Example: "ajax.html #something"
	        if (obj.type === "ajax") {
	          srcParts = src.split(/\s+/, 2);
	
	          if (srcParts.length > 1) {
	            obj.src = srcParts.shift();
	
	            obj.opts.filter = srcParts.shift();
	          }
	        }
	
	        // Hide all buttons and disable interactivity for modal items
	        if (obj.opts.modal) {
	          obj.opts = $.extend(true, obj.opts, {
	            trapFocus: true,
	            // Remove buttons
	            infobar: 0,
	            toolbar: 0,
	
	            smallBtn: 0,
	
	            // Disable keyboard navigation
	            keyboard: 0,
	
	            // Disable some modules
	            slideShow: 0,
	            fullScreen: 0,
	            thumbs: 0,
	            touch: 0,
	
	            // Disable click event handlers
	            clickContent: false,
	            clickSlide: false,
	            clickOutside: false,
	            dblclickContent: false,
	            dblclickSlide: false,
	            dblclickOutside: false
	          });
	        }
	
	        // Step 4 - Add processed object to group
	        // ======================================
	
	        self.group.push(obj);
	      });
	
	      // Update controls if gallery is already opened
	      if (Object.keys(self.slides).length) {
	        self.updateControls();
	
	        // Update thumbnails, if needed
	        thumbs = self.Thumbs;
	
	        if (thumbs && thumbs.isActive) {
	          thumbs.create();
	
	          thumbs.focus();
	        }
	      }
	    },
	
	    // Attach an event handler functions for:
	    //   - navigation buttons
	    //   - browser scrolling, resizing;
	    //   - focusing
	    //   - keyboard
	    //   - detecting inactivity
	    // ======================================
	
	    addEvents: function () {
	      var self = this;
	
	      self.removeEvents();
	
	      // Make navigation elements clickable
	      // ==================================
	
	      self.$refs.container
	        .on("click.fb-close", "[data-fancybox-close]", function (e) {
	          e.stopPropagation();
	          e.preventDefault();
	
	          self.close(e);
	        })
	        .on("touchstart.fb-prev click.fb-prev", "[data-fancybox-prev]", function (e) {
	          e.stopPropagation();
	          e.preventDefault();
	
	          self.previous();
	        })
	        .on("touchstart.fb-next click.fb-next", "[data-fancybox-next]", function (e) {
	          e.stopPropagation();
	          e.preventDefault();
	
	          self.next();
	        })
	        .on("click.fb", "[data-fancybox-zoom]", function (e) {
	          // Click handler for zoom button
	          self[self.isScaledDown() ? "scaleToActual" : "scaleToFit"]();
	        });
	
	      // Handle page scrolling and browser resizing
	      // ==========================================
	
	      $W.on("orientationchange.fb resize.fb", function (e) {
	        if (e && e.originalEvent && e.originalEvent.type === "resize") {
	          if (self.requestId) {
	            cancelAFrame(self.requestId);
	          }
	
	          self.requestId = requestAFrame(function () {
	            self.update(e);
	          });
	        } else {
	          if (self.current && self.current.type === "iframe") {
	            self.$refs.stage.hide();
	          }
	
	          setTimeout(
	            function () {
	              self.$refs.stage.show();
	
	              self.update(e);
	            },
	            $.fancybox.isMobile ? 600 : 250
	          );
	        }
	      });
	
	      $D.on("keydown.fb", function (e) {
	        var instance = $.fancybox ? $.fancybox.getInstance() : null,
	          current = instance.current,
	          keycode = e.keyCode || e.which;
	
	        // Trap keyboard focus inside of the modal
	        // =======================================
	
	        if (keycode == 9) {
	          if (current.opts.trapFocus) {
	            self.focus(e);
	          }
	
	          return;
	        }
	
	        // Enable keyboard navigation
	        // ==========================
	
	        if (!current.opts.keyboard || e.ctrlKey || e.altKey || e.shiftKey || $(e.target).is("input,textarea,video,audio,select")) {
	          return;
	        }
	
	        // Backspace and Esc keys
	        if (keycode === 8 || keycode === 27) {
	          e.preventDefault();
	
	          self.close(e);
	
	          return;
	        }
	
	        // Left arrow and Up arrow
	        if (keycode === 37 || keycode === 38) {
	          e.preventDefault();
	
	          self.previous();
	
	          return;
	        }
	
	        // Righ arrow and Down arrow
	        if (keycode === 39 || keycode === 40) {
	          e.preventDefault();
	
	          self.next();
	
	          return;
	        }
	
	        self.trigger("afterKeydown", e, keycode);
	      });
	
	      // Hide controls after some inactivity period
	      if (self.group[self.currIndex].opts.idleTime) {
	        self.idleSecondsCounter = 0;
	
	        $D.on(
	          "mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",
	          function (e) {
	            self.idleSecondsCounter = 0;
	
	            if (self.isIdle) {
	              self.showControls();
	            }
	
	            self.isIdle = false;
	          }
	        );
	
	        self.idleInterval = window.setInterval(function () {
	          self.idleSecondsCounter++;
	
	          if (self.idleSecondsCounter >= self.group[self.currIndex].opts.idleTime && !self.isDragging) {
	            self.isIdle = true;
	            self.idleSecondsCounter = 0;
	
	            self.hideControls();
	          }
	        }, 1000);
	      }
	    },
	
	    // Remove events added by the core
	    // ===============================
	
	    removeEvents: function () {
	      var self = this;
	
	      $W.off("orientationchange.fb resize.fb");
	      $D.off("keydown.fb .fb-idle");
	
	      this.$refs.container.off(".fb-close .fb-prev .fb-next");
	
	      if (self.idleInterval) {
	        window.clearInterval(self.idleInterval);
	
	        self.idleInterval = null;
	      }
	    },
	
	    // Change to previous gallery item
	    // ===============================
	
	    previous: function (duration) {
	      return this.jumpTo(this.currPos - 1, duration);
	    },
	
	    // Change to next gallery item
	    // ===========================
	
	    next: function (duration) {
	      return this.jumpTo(this.currPos + 1, duration);
	    },
	
	    // Switch to selected gallery item
	    // ===============================
	
	    jumpTo: function (pos, duration) {
	      var self = this,
	        groupLen = self.group.length,
	        firstRun,
	        isMoved,
	        loop,
	        current,
	        previous,
	        slidePos,
	        stagePos,
	        prop,
	        diff;
	
	      if (self.isDragging || self.isClosing || (self.isAnimating && self.firstRun)) {
	        return;
	      }
	
	      // Should loop?
	      pos = parseInt(pos, 10);
	      loop = self.current ? self.current.opts.loop : self.opts.loop;
	
	      if (!loop && (pos < 0 || pos >= groupLen)) {
	        return false;
	      }
	
	      // Check if opening for the first time; this helps to speed things up
	      firstRun = self.firstRun = !Object.keys(self.slides).length;
	
	      // Create slides
	      previous = self.current;
	
	      self.prevIndex = self.currIndex;
	      self.prevPos = self.currPos;
	
	      current = self.createSlide(pos);
	
	      if (groupLen > 1) {
	        if (loop || current.index < groupLen - 1) {
	          self.createSlide(pos + 1);
	        }
	
	        if (loop || current.index > 0) {
	          self.createSlide(pos - 1);
	        }
	      }
	
	      self.current = current;
	      self.currIndex = current.index;
	      self.currPos = current.pos;
	
	      self.trigger("beforeShow", firstRun);
	
	      self.updateControls();
	
	      // Validate duration length
	      current.forcedDuration = undefined;
	
	      if ($.isNumeric(duration)) {
	        current.forcedDuration = duration;
	      } else {
	        duration = current.opts[firstRun ? "animationDuration" : "transitionDuration"];
	      }
	
	      duration = parseInt(duration, 10);
	
	      // Check if user has swiped the slides or if still animating
	      isMoved = self.isMoved(current);
	
	      // Make sure current slide is visible
	      current.$slide.addClass("fancybox-slide--current");
	
	      // Fresh start - reveal container, current slide and start loading content
	      if (firstRun) {
	        if (current.opts.animationEffect && duration) {
	          self.$refs.container.css("transition-duration", duration + "ms");
	        }
	
	        self.$refs.container.addClass("fancybox-is-open").trigger("focus");
	
	        // Attempt to load content into slide
	        // This will later call `afterLoad` -> `revealContent`
	        self.loadSlide(current);
	
	        self.preload("image");
	
	        return;
	      }
	
	      // Get actual slide/stage positions (before cleaning up)
	      slidePos = $.fancybox.getTranslate(previous.$slide);
	      stagePos = $.fancybox.getTranslate(self.$refs.stage);
	
	      // Clean up all slides
	      $.each(self.slides, function (index, slide) {
	        $.fancybox.stop(slide.$slide, true);
	      });
	
	      if (previous.pos !== current.pos) {
	        previous.isComplete = false;
	      }
	
	      previous.$slide.removeClass("fancybox-slide--complete fancybox-slide--current");
	
	      // If slides are out of place, then animate them to correct position
	      if (isMoved) {
	        // Calculate horizontal swipe distance
	        diff = slidePos.left - (previous.pos * slidePos.width + previous.pos * previous.opts.gutter);
	
	        $.each(self.slides, function (index, slide) {
	          slide.$slide.removeClass("fancybox-animated").removeClass(function (index, className) {
	            return (className.match(/(^|\s)fancybox-fx-\S+/g) || []).join(" ");
	          });
	
	          // Make sure that each slide is in equal distance
	          // This is mostly needed for freshly added slides, because they are not yet positioned
	          var leftPos = slide.pos * slidePos.width + slide.pos * slide.opts.gutter;
	
	          $.fancybox.setTranslate(slide.$slide, {
	            top: 0,
	            left: leftPos - stagePos.left + diff
	          });
	
	          if (slide.pos !== current.pos) {
	            slide.$slide.addClass("fancybox-slide--" + (slide.pos > current.pos ? "next" : "previous"));
	          }
	
	          // Redraw to make sure that transition will start
	          forceRedraw(slide.$slide);
	
	          // Animate the slide
	          $.fancybox.animate(
	            slide.$slide, {
	              top: 0,
	              left: (slide.pos - current.pos) * slidePos.width + (slide.pos - current.pos) * slide.opts.gutter
	            },
	            duration,
	            function () {
	              slide.$slide
	                .css({
	                  transform: "",
	                  opacity: ""
	                })
	                .removeClass("fancybox-slide--next fancybox-slide--previous");
	
	              if (slide.pos === self.currPos) {
	                self.complete();
	              }
	            }
	          );
	        });
	      } else if (duration && current.opts.transitionEffect) {
	        // Set transition effect for previously active slide
	        prop = "fancybox-animated fancybox-fx-" + current.opts.transitionEffect;
	
	        previous.$slide.addClass("fancybox-slide--" + (previous.pos > current.pos ? "next" : "previous"));
	
	        $.fancybox.animate(
	          previous.$slide,
	          prop,
	          duration,
	          function () {
	            previous.$slide.removeClass(prop).removeClass("fancybox-slide--next fancybox-slide--previous");
	          },
	          false
	        );
	      }
	
	      if (current.isLoaded) {
	        self.revealContent(current);
	      } else {
	        self.loadSlide(current);
	      }
	
	      self.preload("image");
	    },
	
	    // Create new "slide" element
	    // These are gallery items  that are actually added to DOM
	    // =======================================================
	
	    createSlide: function (pos) {
	      var self = this,
	        $slide,
	        index;
	
	      index = pos % self.group.length;
	      index = index < 0 ? self.group.length + index : index;
	
	      if (!self.slides[pos] && self.group[index]) {
	        $slide = $('<div class="fancybox-slide"></div>').appendTo(self.$refs.stage);
	
	        self.slides[pos] = $.extend(true, {}, self.group[index], {
	          pos: pos,
	          $slide: $slide,
	          isLoaded: false
	        });
	
	        self.updateSlide(self.slides[pos]);
	      }
	
	      return self.slides[pos];
	    },
	
	    // Scale image to the actual size of the image;
	    // x and y values should be relative to the slide
	    // ==============================================
	
	    scaleToActual: function (x, y, duration) {
	      var self = this,
	        current = self.current,
	        $content = current.$content,
	        canvasWidth = $.fancybox.getTranslate(current.$slide).width,
	        canvasHeight = $.fancybox.getTranslate(current.$slide).height,
	        newImgWidth = current.width,
	        newImgHeight = current.height,
	        imgPos,
	        posX,
	        posY,
	        scaleX,
	        scaleY;
	
	      if (self.isAnimating || self.isMoved() || !$content || !(current.type == "image" && current.isLoaded && !current.hasError)) {
	        return;
	      }
	
	      self.isAnimating = true;
	
	      $.fancybox.stop($content);
	
	      x = x === undefined ? canvasWidth * 0.5 : x;
	      y = y === undefined ? canvasHeight * 0.5 : y;
	
	      imgPos = $.fancybox.getTranslate($content);
	
	      imgPos.top -= $.fancybox.getTranslate(current.$slide).top;
	      imgPos.left -= $.fancybox.getTranslate(current.$slide).left;
	
	      scaleX = newImgWidth / imgPos.width;
	      scaleY = newImgHeight / imgPos.height;
	
	      // Get center position for original image
	      posX = canvasWidth * 0.5 - newImgWidth * 0.5;
	      posY = canvasHeight * 0.5 - newImgHeight * 0.5;
	
	      // Make sure image does not move away from edges
	      if (newImgWidth > canvasWidth) {
	        posX = imgPos.left * scaleX - (x * scaleX - x);
	
	        if (posX > 0) {
	          posX = 0;
	        }
	
	        if (posX < canvasWidth - newImgWidth) {
	          posX = canvasWidth - newImgWidth;
	        }
	      }
	
	      if (newImgHeight > canvasHeight) {
	        posY = imgPos.top * scaleY - (y * scaleY - y);
	
	        if (posY > 0) {
	          posY = 0;
	        }
	
	        if (posY < canvasHeight - newImgHeight) {
	          posY = canvasHeight - newImgHeight;
	        }
	      }
	
	      self.updateCursor(newImgWidth, newImgHeight);
	
	      $.fancybox.animate(
	        $content, {
	          top: posY,
	          left: posX,
	          scaleX: scaleX,
	          scaleY: scaleY
	        },
	        duration || 366,
	        function () {
	          self.isAnimating = false;
	        }
	      );
	
	      // Stop slideshow
	      if (self.SlideShow && self.SlideShow.isActive) {
	        self.SlideShow.stop();
	      }
	    },
	
	    // Scale image to fit inside parent element
	    // ========================================
	
	    scaleToFit: function (duration) {
	      var self = this,
	        current = self.current,
	        $content = current.$content,
	        end;
	
	      if (self.isAnimating || self.isMoved() || !$content || !(current.type == "image" && current.isLoaded && !current.hasError)) {
	        return;
	      }
	
	      self.isAnimating = true;
	
	      $.fancybox.stop($content);
	
	      end = self.getFitPos(current);
	
	      self.updateCursor(end.width, end.height);
	
	      $.fancybox.animate(
	        $content, {
	          top: end.top,
	          left: end.left,
	          scaleX: end.width / $content.width(),
	          scaleY: end.height / $content.height()
	        },
	        duration || 366,
	        function () {
	          self.isAnimating = false;
	        }
	      );
	    },
	
	    // Calculate image size to fit inside viewport
	    // ===========================================
	
	    getFitPos: function (slide) {
	      var self = this,
	        $content = slide.$content,
	        $slide = slide.$slide,
	        width = slide.width || slide.opts.width,
	        height = slide.height || slide.opts.height,
	        maxWidth,
	        maxHeight,
	        minRatio,
	        aspectRatio,
	        rez = {};
	
	      if (!slide.isLoaded || !$content || !$content.length) {
	        return false;
	      }
	
	      maxWidth = $.fancybox.getTranslate(self.$refs.stage).width;
	      maxHeight = $.fancybox.getTranslate(self.$refs.stage).height;
	
	      maxWidth -=
	        parseFloat($slide.css("paddingLeft")) +
	        parseFloat($slide.css("paddingRight")) +
	        parseFloat($content.css("marginLeft")) +
	        parseFloat($content.css("marginRight"));
	
	      maxHeight -=
	        parseFloat($slide.css("paddingTop")) +
	        parseFloat($slide.css("paddingBottom")) +
	        parseFloat($content.css("marginTop")) +
	        parseFloat($content.css("marginBottom"));
	
	      if (!width || !height) {
	        width = maxWidth;
	        height = maxHeight;
	      }
	
	      minRatio = Math.min(1, maxWidth / width, maxHeight / height);
	
	      width = minRatio * width;
	      height = minRatio * height;
	
	      // Adjust width/height to precisely fit into container
	      if (width > maxWidth - 0.5) {
	        width = maxWidth;
	      }
	
	      if (height > maxHeight - 0.5) {
	        height = maxHeight;
	      }
	
	      if (slide.type === "image") {
	        rez.top = Math.floor((maxHeight - height) * 0.5) + parseFloat($slide.css("paddingTop"));
	        rez.left = Math.floor((maxWidth - width) * 0.5) + parseFloat($slide.css("paddingLeft"));
	      } else if (slide.contentType === "video") {
	        // Force aspect ratio for the video
	        // "I say the whole world must learn of our peaceful ways… by force!"
	        aspectRatio = slide.opts.width && slide.opts.height ? width / height : slide.opts.ratio || 16 / 9;
	
	        if (height > width / aspectRatio) {
	          height = width / aspectRatio;
	        } else if (width > height * aspectRatio) {
	          width = height * aspectRatio;
	        }
	      }
	
	      rez.width = width;
	      rez.height = height;
	
	      return rez;
	    },
	
	    // Update content size and position for all slides
	    // ==============================================
	
	    update: function (e) {
	      var self = this;
	
	      $.each(self.slides, function (key, slide) {
	        self.updateSlide(slide, e);
	      });
	    },
	
	    // Update slide content position and size
	    // ======================================
	
	    updateSlide: function (slide, e) {
	      var self = this,
	        $content = slide && slide.$content,
	        width = slide.width || slide.opts.width,
	        height = slide.height || slide.opts.height,
	        $slide = slide.$slide;
	
	      // First, prevent caption overlap, if needed
	      self.adjustCaption(slide);
	
	      // Then resize content to fit inside the slide
	      if ($content && (width || height || slide.contentType === "video") && !slide.hasError) {
	        $.fancybox.stop($content);
	
	        $.fancybox.setTranslate($content, self.getFitPos(slide));
	
	        if (slide.pos === self.currPos) {
	          self.isAnimating = false;
	
	          self.updateCursor();
	        }
	      }
	
	      // Then some adjustments
	      self.adjustLayout(slide);
	
	      if ($slide.length) {
	        $slide.trigger("refresh");
	
	        if (slide.pos === self.currPos) {
	          self.$refs.toolbar
	            .add(self.$refs.navigation.find(".fancybox-button--arrow_right"))
	            .toggleClass("compensate-for-scrollbar", $slide.get(0).scrollHeight > $slide.get(0).clientHeight);
	        }
	      }
	
	      self.trigger("onUpdate", slide, e);
	    },
	
	    // Horizontally center slide
	    // =========================
	
	    centerSlide: function (duration) {
	      var self = this,
	        current = self.current,
	        $slide = current.$slide;
	
	      if (self.isClosing || !current) {
	        return;
	      }
	
	      $slide.siblings().css({
	        transform: "",
	        opacity: ""
	      });
	
	      $slide
	        .parent()
	        .children()
	        .removeClass("fancybox-slide--previous fancybox-slide--next");
	
	      $.fancybox.animate(
	        $slide, {
	          top: 0,
	          left: 0,
	          opacity: 1
	        },
	        duration === undefined ? 0 : duration,
	        function () {
	          // Clean up
	          $slide.css({
	            transform: "",
	            opacity: ""
	          });
	
	          if (!current.isComplete) {
	            self.complete();
	          }
	        },
	        false
	      );
	    },
	
	    // Check if current slide is moved (swiped)
	    // ========================================
	
	    isMoved: function (slide) {
	      var current = slide || this.current,
	        slidePos,
	        stagePos;
	
	      if (!current) {
	        return false;
	      }
	
	      stagePos = $.fancybox.getTranslate(this.$refs.stage);
	      slidePos = $.fancybox.getTranslate(current.$slide);
	
	      return (
	        !current.$slide.hasClass("fancybox-animated") &&
	        (Math.abs(slidePos.top - stagePos.top) > 0.5 || Math.abs(slidePos.left - stagePos.left) > 0.5)
	      );
	    },
	
	    // Update cursor style depending if content can be zoomed
	    // ======================================================
	
	    updateCursor: function (nextWidth, nextHeight) {
	      var self = this,
	        current = self.current,
	        $container = self.$refs.container,
	        canPan,
	        isZoomable;
	
	      if (!current || self.isClosing || !self.Guestures) {
	        return;
	      }
	
	      $container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan");
	
	      canPan = self.canPan(nextWidth, nextHeight);
	
	      isZoomable = canPan ? true : self.isZoomable();
	
	      $container.toggleClass("fancybox-is-zoomable", isZoomable);
	
	      $("[data-fancybox-zoom]").prop("disabled", !isZoomable);
	
	      if (canPan) {
	        $container.addClass("fancybox-can-pan");
	      } else if (
	        isZoomable &&
	        (current.opts.clickContent === "zoom" || ($.isFunction(current.opts.clickContent) && current.opts.clickContent(current) == "zoom"))
	      ) {
	        $container.addClass("fancybox-can-zoomIn");
	      } else if (current.opts.touch && (current.opts.touch.vertical || self.group.length > 1) && current.contentType !== "video") {
	        $container.addClass("fancybox-can-swipe");
	      }
	    },
	
	    // Check if current slide is zoomable
	    // ==================================
	
	    isZoomable: function () {
	      var self = this,
	        current = self.current,
	        fitPos;
	
	      // Assume that slide is zoomable if:
	      //   - image is still loading
	      //   - actual size of the image is smaller than available area
	      if (current && !self.isClosing && current.type === "image" && !current.hasError) {
	        if (!current.isLoaded) {
	          return true;
	        }
	
	        fitPos = self.getFitPos(current);
	
	        if (fitPos && (current.width > fitPos.width || current.height > fitPos.height)) {
	          return true;
	        }
	      }
	
	      return false;
	    },
	
	    // Check if current image dimensions are smaller than actual
	    // =========================================================
	
	    isScaledDown: function (nextWidth, nextHeight) {
	      var self = this,
	        rez = false,
	        current = self.current,
	        $content = current.$content;
	
	      if (nextWidth !== undefined && nextHeight !== undefined) {
	        rez = nextWidth < current.width && nextHeight < current.height;
	      } else if ($content) {
	        rez = $.fancybox.getTranslate($content);
	        rez = rez.width < current.width && rez.height < current.height;
	      }
	
	      return rez;
	    },
	
	    // Check if image dimensions exceed parent element
	    // ===============================================
	
	    canPan: function (nextWidth, nextHeight) {
	      var self = this,
	        current = self.current,
	        pos = null,
	        rez = false;
	
	      if (current.type === "image" && (current.isComplete || (nextWidth && nextHeight)) && !current.hasError) {
	        rez = self.getFitPos(current);
	
	        if (nextWidth !== undefined && nextHeight !== undefined) {
	          pos = {
	            width: nextWidth,
	            height: nextHeight
	          };
	        } else if (current.isComplete) {
	          pos = $.fancybox.getTranslate(current.$content);
	        }
	
	        if (pos && rez) {
	          rez = Math.abs(pos.width - rez.width) > 1.5 || Math.abs(pos.height - rez.height) > 1.5;
	        }
	      }
	
	      return rez;
	    },
	
	    // Load content into the slide
	    // ===========================
	
	    loadSlide: function (slide) {
	      var self = this,
	        type,
	        $slide,
	        ajaxLoad;
	
	      if (slide.isLoading || slide.isLoaded) {
	        return;
	      }
	
	      slide.isLoading = true;
	
	      if (self.trigger("beforeLoad", slide) === false) {
	        slide.isLoading = false;
	
	        return false;
	      }
	
	      type = slide.type;
	      $slide = slide.$slide;
	
	      $slide
	        .off("refresh")
	        .trigger("onReset")
	        .addClass(slide.opts.slideClass);
	
	      // Create content depending on the type
	      switch (type) {
	        case "image":
	          self.setImage(slide);
	
	          break;
	
	        case "iframe":
	          self.setIframe(slide);
	
	          break;
	
	        case "html":
	          self.setContent(slide, slide.src || slide.content);
	
	          break;
	
	        case "video":
	          self.setContent(
	            slide,
	            slide.opts.video.tpl
	            .replace(/\{\{src\}\}/gi, slide.src)
	            .replace("{{format}}", slide.opts.videoFormat || slide.opts.video.format || "")
	            .replace("{{poster}}", slide.thumb || "")
	          );
	
	          break;
	
	        case "inline":
	          if ($(slide.src).length) {
	            self.setContent(slide, $(slide.src));
	          } else {
	            self.setError(slide);
	          }
	
	          break;
	
	        case "ajax":
	          self.showLoading(slide);
	
	          ajaxLoad = $.ajax(
	            $.extend({}, slide.opts.ajax.settings, {
	              url: slide.src,
	              success: function (data, textStatus) {
	                if (textStatus === "success") {
	                  self.setContent(slide, data);
	                }
	              },
	              error: function (jqXHR, textStatus) {
	                if (jqXHR && textStatus !== "abort") {
	                  self.setError(slide);
	                }
	              }
	            })
	          );
	
	          $slide.one("onReset", function () {
	            ajaxLoad.abort();
	          });
	
	          break;
	
	        default:
	          self.setError(slide);
	
	          break;
	      }
	
	      return true;
	    },
	
	    // Use thumbnail image, if possible
	    // ================================
	
	    setImage: function (slide) {
	      var self = this,
	        ghost;
	
	      // Check if need to show loading icon
	      setTimeout(function () {
	        var $img = slide.$image;
	
	        if (!self.isClosing && slide.isLoading && (!$img || !$img.length || !$img[0].complete) && !slide.hasError) {
	          self.showLoading(slide);
	        }
	      }, 50);
	
	      //Check if image has srcset
	      self.checkSrcset(slide);
	
	      // This will be wrapper containing both ghost and actual image
	      slide.$content = $('<div class="fancybox-content"></div>')
	        .addClass("fancybox-is-hidden")
	        .appendTo(slide.$slide.addClass("fancybox-slide--image"));
	
	      // If we have a thumbnail, we can display it while actual image is loading
	      // Users will not stare at black screen and actual image will appear gradually
	      if (slide.opts.preload !== false && slide.opts.width && slide.opts.height && slide.thumb) {
	        slide.width = slide.opts.width;
	        slide.height = slide.opts.height;
	
	        ghost = document.createElement("img");
	
	        ghost.onerror = function () {
	          $(this).remove();
	
	          slide.$ghost = null;
	        };
	
	        ghost.onload = function () {
	          self.afterLoad(slide);
	        };
	
	        slide.$ghost = $(ghost)
	          .addClass("fancybox-image")
	          .appendTo(slide.$content)
	          .attr("src", slide.thumb);
	      }
	
	      // Start loading actual image
	      self.setBigImage(slide);
	    },
	
	    // Check if image has srcset and get the source
	    // ============================================
	    checkSrcset: function (slide) {
	      var srcset = slide.opts.srcset || slide.opts.image.srcset,
	        found,
	        temp,
	        pxRatio,
	        windowWidth;
	
	      // If we have "srcset", then we need to find first matching "src" value.
	      // This is necessary, because when you set an src attribute, the browser will preload the image
	      // before any javascript or even CSS is applied.
	      if (srcset) {
	        pxRatio = window.devicePixelRatio || 1;
	        windowWidth = window.innerWidth * pxRatio;
	
	        temp = srcset.split(",").map(function (el) {
	          var ret = {};
	
	          el.trim()
	            .split(/\s+/)
	            .forEach(function (el, i) {
	              var value = parseInt(el.substring(0, el.length - 1), 10);
	
	              if (i === 0) {
	                return (ret.url = el);
	              }
	
	              if (value) {
	                ret.value = value;
	                ret.postfix = el[el.length - 1];
	              }
	            });
	
	          return ret;
	        });
	
	        // Sort by value
	        temp.sort(function (a, b) {
	          return a.value - b.value;
	        });
	
	        // Ok, now we have an array of all srcset values
	        for (var j = 0; j < temp.length; j++) {
	          var el = temp[j];
	
	          if ((el.postfix === "w" && el.value >= windowWidth) || (el.postfix === "x" && el.value >= pxRatio)) {
	            found = el;
	            break;
	          }
	        }
	
	        // If not found, take the last one
	        if (!found && temp.length) {
	          found = temp[temp.length - 1];
	        }
	
	        if (found) {
	          slide.src = found.url;
	
	          // If we have default width/height values, we can calculate height for matching source
	          if (slide.width && slide.height && found.postfix == "w") {
	            slide.height = (slide.width / slide.height) * found.value;
	            slide.width = found.value;
	          }
	
	          slide.opts.srcset = srcset;
	        }
	      }
	    },
	
	    // Create full-size image
	    // ======================
	
	    setBigImage: function (slide) {
	      var self = this,
	        img = document.createElement("img"),
	        $img = $(img);
	
	      slide.$image = $img
	        .one("error", function () {
	          self.setError(slide);
	        })
	        .one("load", function () {
	          var sizes;
	
	          if (!slide.$ghost) {
	            self.resolveImageSlideSize(slide, this.naturalWidth, this.naturalHeight);
	
	            self.afterLoad(slide);
	          }
	
	          if (self.isClosing) {
	            return;
	          }
	
	          if (slide.opts.srcset) {
	            sizes = slide.opts.sizes;
	
	            if (!sizes || sizes === "auto") {
	              sizes =
	                (slide.width / slide.height > 1 && $W.width() / $W.height() > 1 ? "100" : Math.round((slide.width / slide.height) * 100)) +
	                "vw";
	            }
	
	            $img.attr("sizes", sizes).attr("srcset", slide.opts.srcset);
	          }
	
	          // Hide temporary image after some delay
	          if (slide.$ghost) {
	            setTimeout(function () {
	              if (slide.$ghost && !self.isClosing) {
	                slide.$ghost.hide();
	              }
	            }, Math.min(300, Math.max(1000, slide.height / 1600)));
	          }
	
	          self.hideLoading(slide);
	        })
	        .addClass("fancybox-image")
	        .attr("src", slide.src)
	        .appendTo(slide.$content);
	
	      if ((img.complete || img.readyState == "complete") && $img.naturalWidth && $img.naturalHeight) {
	        $img.trigger("load");
	      } else if (img.error) {
	        $img.trigger("error");
	      }
	    },
	
	    // Computes the slide size from image size and maxWidth/maxHeight
	    // ==============================================================
	
	    resolveImageSlideSize: function (slide, imgWidth, imgHeight) {
	      var maxWidth = parseInt(slide.opts.width, 10),
	        maxHeight = parseInt(slide.opts.height, 10);
	
	      // Sets the default values from the image
	      slide.width = imgWidth;
	      slide.height = imgHeight;
	
	      if (maxWidth > 0) {
	        slide.width = maxWidth;
	        slide.height = Math.floor((maxWidth * imgHeight) / imgWidth);
	      }
	
	      if (maxHeight > 0) {
	        slide.width = Math.floor((maxHeight * imgWidth) / imgHeight);
	        slide.height = maxHeight;
	      }
	    },
	
	    // Create iframe wrapper, iframe and bindings
	    // ==========================================
	
	    setIframe: function (slide) {
	      var self = this,
	        opts = slide.opts.iframe,
	        $slide = slide.$slide,
	        $iframe;
	
	      slide.$content = $('<div class="fancybox-content' + (opts.preload ? " fancybox-is-hidden" : "") + '"></div>')
	        .css(opts.css)
	        .appendTo($slide);
	
	      $slide.addClass("fancybox-slide--" + slide.contentType);
	
	      slide.$iframe = $iframe = $(opts.tpl.replace(/\{rnd\}/g, new Date().getTime()))
	        .attr(opts.attr)
	        .appendTo(slide.$content);
	
	      if (opts.preload) {
	        self.showLoading(slide);
	
	        // Unfortunately, it is not always possible to determine if iframe is successfully loaded
	        // (due to browser security policy)
	
	        $iframe.on("load.fb error.fb", function (e) {
	          this.isReady = 1;
	
	          slide.$slide.trigger("refresh");
	
	          self.afterLoad(slide);
	        });
	
	        // Recalculate iframe content size
	        // ===============================
	
	        $slide.on("refresh.fb", function () {
	          var $content = slide.$content,
	            frameWidth = opts.css.width,
	            frameHeight = opts.css.height,
	            $contents,
	            $body;
	
	          if ($iframe[0].isReady !== 1) {
	            return;
	          }
	
	          try {
	            $contents = $iframe.contents();
	            $body = $contents.find("body");
	          } catch (ignore) {}
	
	          // Calculate content dimensions, if it is accessible
	          if ($body && $body.length && $body.children().length) {
	            // Avoid scrolling to top (if multiple instances)
	            $slide.css("overflow", "visible");
	
	            $content.css({
	              width: "100%",
	              "max-width": "100%",
	              height: "9999px"
	            });
	
	            if (frameWidth === undefined) {
	              frameWidth = Math.ceil(Math.max($body[0].clientWidth, $body.outerWidth(true)));
	            }
	
	            $content.css("width", frameWidth ? frameWidth : "").css("max-width", "");
	
	            if (frameHeight === undefined) {
	              frameHeight = Math.ceil(Math.max($body[0].clientHeight, $body.outerHeight(true)));
	            }
	
	            $content.css("height", frameHeight ? frameHeight : "");
	
	            $slide.css("overflow", "auto");
	          }
	
	          $content.removeClass("fancybox-is-hidden");
	        });
	      } else {
	        self.afterLoad(slide);
	      }
	
	      $iframe.attr("src", slide.src);
	
	      // Remove iframe if closing or changing gallery item
	      $slide.one("onReset", function () {
	        // This helps IE not to throw errors when closing
	        try {
	          $(this)
	            .find("iframe")
	            .hide()
	            .unbind()
	            .attr("src", "//about:blank");
	        } catch (ignore) {}
	
	        $(this)
	          .off("refresh.fb")
	          .empty();
	
	        slide.isLoaded = false;
	        slide.isRevealed = false;
	      });
	    },
	
	    // Wrap and append content to the slide
	    // ======================================
	
	    setContent: function (slide, content) {
	      var self = this;
	
	      if (self.isClosing) {
	        return;
	      }
	
	      self.hideLoading(slide);
	
	      if (slide.$content) {
	        $.fancybox.stop(slide.$content);
	      }
	
	      slide.$slide.empty();
	
	      // If content is a jQuery object, then it will be moved to the slide.
	      // The placeholder is created so we will know where to put it back.
	      if (isQuery(content) && content.parent().length) {
	        // Make sure content is not already moved to fancyBox
	        if (content.hasClass("fancybox-content") || content.parent().hasClass("fancybox-content")) {
	          content.parents(".fancybox-slide").trigger("onReset");
	        }
	
	        // Create temporary element marking original place of the content
	        slide.$placeholder = $("<div>")
	          .hide()
	          .insertAfter(content);
	
	        // Make sure content is visible
	        content.css("display", "inline-block");
	      } else if (!slide.hasError) {
	        // If content is just a plain text, try to convert it to html
	        if ($.type(content) === "string") {
	          content = $("<div>")
	            .append($.trim(content))
	            .contents();
	        }
	
	        // If "filter" option is provided, then filter content
	        if (slide.opts.filter) {
	          content = $("<div>")
	            .html(content)
	            .find(slide.opts.filter);
	        }
	      }
	
	      slide.$slide.one("onReset", function () {
	        // Pause all html5 video/audio
	        $(this)
	          .find("video,audio")
	          .trigger("pause");
	
	        // Put content back
	        if (slide.$placeholder) {
	          slide.$placeholder.after(content.removeClass("fancybox-content").hide()).remove();
	
	          slide.$placeholder = null;
	        }
	
	        // Remove custom close button
	        if (slide.$smallBtn) {
	          slide.$smallBtn.remove();
	
	          slide.$smallBtn = null;
	        }
	
	        // Remove content and mark slide as not loaded
	        if (!slide.hasError) {
	          $(this).empty();
	
	          slide.isLoaded = false;
	          slide.isRevealed = false;
	        }
	      });
	
	      $(content).appendTo(slide.$slide);
	
	      if ($(content).is("video,audio")) {
	        $(content).addClass("fancybox-video");
	
	        $(content).wrap("<div></div>");
	
	        slide.contentType = "video";
	
	        slide.opts.width = slide.opts.width || $(content).attr("width");
	        slide.opts.height = slide.opts.height || $(content).attr("height");
	      }
	
	      slide.$content = slide.$slide
	        .children()
	        .filter("div,form,main,video,audio,article,.fancybox-content")
	        .first();
	
	      slide.$content.siblings().hide();
	
	      // Re-check if there is a valid content
	      // (in some cases, ajax response can contain various elements or plain text)
	      if (!slide.$content.length) {
	        slide.$content = slide.$slide
	          .wrapInner("<div></div>")
	          .children()
	          .first();
	      }
	
	      slide.$content.addClass("fancybox-content");
	
	      slide.$slide.addClass("fancybox-slide--" + slide.contentType);
	
	      self.afterLoad(slide);
	    },
	
	    // Display error message
	    // =====================
	
	    setError: function (slide) {
	      slide.hasError = true;
	
	      slide.$slide
	        .trigger("onReset")
	        .removeClass("fancybox-slide--" + slide.contentType)
	        .addClass("fancybox-slide--error");
	
	      slide.contentType = "html";
	
	      this.setContent(slide, this.translate(slide, slide.opts.errorTpl));
	
	      if (slide.pos === this.currPos) {
	        this.isAnimating = false;
	      }
	    },
	
	    // Show loading icon inside the slide
	    // ==================================
	
	    showLoading: function (slide) {
	      var self = this;
	
	      slide = slide || self.current;
	
	      if (slide && !slide.$spinner) {
	        slide.$spinner = $(self.translate(self, self.opts.spinnerTpl))
	          .appendTo(slide.$slide)
	          .hide()
	          .fadeIn("fast");
	      }
	    },
	
	    // Remove loading icon from the slide
	    // ==================================
	
	    hideLoading: function (slide) {
	      var self = this;
	
	      slide = slide || self.current;
	
	      if (slide && slide.$spinner) {
	        slide.$spinner.stop().remove();
	
	        delete slide.$spinner;
	      }
	    },
	
	    // Adjustments after slide content has been loaded
	    // ===============================================
	
	    afterLoad: function (slide) {
	      var self = this;
	
	      if (self.isClosing) {
	        return;
	      }
	
	      slide.isLoading = false;
	      slide.isLoaded = true;
	
	      self.trigger("afterLoad", slide);
	
	      self.hideLoading(slide);
	
	      // Add small close button
	      if (slide.opts.smallBtn && (!slide.$smallBtn || !slide.$smallBtn.length)) {
	        slide.$smallBtn = $(self.translate(slide, slide.opts.btnTpl.smallBtn)).appendTo(slide.$content);
	      }
	
	      // Disable right click
	      if (slide.opts.protect && slide.$content && !slide.hasError) {
	        slide.$content.on("contextmenu.fb", function (e) {
	          if (e.button == 2) {
	            e.preventDefault();
	          }
	
	          return true;
	        });
	
	        // Add fake element on top of the image
	        // This makes a bit harder for user to select image
	        if (slide.type === "image") {
	          $('<div class="fancybox-spaceball"></div>').appendTo(slide.$content);
	        }
	      }
	
	      self.adjustCaption(slide);
	
	      self.adjustLayout(slide);
	
	      if (slide.pos === self.currPos) {
	        self.updateCursor();
	      }
	
	      self.revealContent(slide);
	    },
	
	    // Prevent caption overlap,
	    // fix css inconsistency across browsers
	    // =====================================
	
	    adjustCaption: function (slide) {
	      var self = this,
	        current = slide || self.current,
	        caption = current.opts.caption,
	        preventOverlap = current.opts.preventCaptionOverlap,
	        $caption = self.$refs.caption,
	        $clone,
	        captionH = false;
	
	      $caption.toggleClass("fancybox-caption--separate", preventOverlap);
	
	      if (preventOverlap && caption && caption.length) {
	        if (current.pos !== self.currPos) {
	          $clone = $caption.clone().appendTo($caption.parent());
	
	          $clone
	            .children()
	            .eq(0)
	            .empty()
	            .html(caption);
	
	          captionH = $clone.outerHeight(true);
	
	          $clone.empty().remove();
	        } else if (self.$caption) {
	          captionH = self.$caption.outerHeight(true);
	        }
	
	        current.$slide.css("padding-bottom", captionH || "");
	      }
	    },
	
	    // Simple hack to fix inconsistency across browsers, described here (affects Edge, too):
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=748518
	    // ====================================================================================
	
	    adjustLayout: function (slide) {
	      var self = this,
	        current = slide || self.current,
	        scrollHeight,
	        marginBottom,
	        inlinePadding,
	        actualPadding;
	
	      if (current.isLoaded && current.opts.disableLayoutFix !== true) {
	        current.$content.css("margin-bottom", "");
	
	        // If we would always set margin-bottom for the content,
	        // then it would potentially break vertical align
	        if (current.$content.outerHeight() > current.$slide.height() + 0.5) {
	          inlinePadding = current.$slide[0].style["padding-bottom"];
	          actualPadding = current.$slide.css("padding-bottom");
	
	          if (parseFloat(actualPadding) > 0) {
	            scrollHeight = current.$slide[0].scrollHeight;
	
	            current.$slide.css("padding-bottom", 0);
	
	            if (Math.abs(scrollHeight - current.$slide[0].scrollHeight) < 1) {
	              marginBottom = actualPadding;
	            }
	
	            current.$slide.css("padding-bottom", inlinePadding);
	          }
	        }
	
	        current.$content.css("margin-bottom", marginBottom);
	      }
	    },
	
	    // Make content visible
	    // This method is called right after content has been loaded or
	    // user navigates gallery and transition should start
	    // ============================================================
	
	    revealContent: function (slide) {
	      var self = this,
	        $slide = slide.$slide,
	        end = false,
	        start = false,
	        isMoved = self.isMoved(slide),
	        isRevealed = slide.isRevealed,
	        effect,
	        effectClassName,
	        duration,
	        opacity;
	
	      slide.isRevealed = true;
	
	      effect = slide.opts[self.firstRun ? "animationEffect" : "transitionEffect"];
	      duration = slide.opts[self.firstRun ? "animationDuration" : "transitionDuration"];
	
	      duration = parseInt(slide.forcedDuration === undefined ? duration : slide.forcedDuration, 10);
	
	      if (isMoved || slide.pos !== self.currPos || !duration) {
	        effect = false;
	      }
	
	      // Check if can zoom
	      if (effect === "zoom") {
	        if (slide.pos === self.currPos && duration && slide.type === "image" && !slide.hasError && (start = self.getThumbPos(slide))) {
	          end = self.getFitPos(slide);
	        } else {
	          effect = "fade";
	        }
	      }
	
	      // Zoom animation
	      // ==============
	      if (effect === "zoom") {
	        self.isAnimating = true;
	
	        end.scaleX = end.width / start.width;
	        end.scaleY = end.height / start.height;
	
	        // Check if we need to animate opacity
	        opacity = slide.opts.zoomOpacity;
	
	        if (opacity == "auto") {
	          opacity = Math.abs(slide.width / slide.height - start.width / start.height) > 0.1;
	        }
	
	        if (opacity) {
	          start.opacity = 0.1;
	          end.opacity = 1;
	        }
	
	        // Draw image at start position
	        $.fancybox.setTranslate(slide.$content.removeClass("fancybox-is-hidden"), start);
	
	        forceRedraw(slide.$content);
	
	        // Start animation
	        $.fancybox.animate(slide.$content, end, duration, function () {
	          self.isAnimating = false;
	
	          self.complete();
	        });
	
	        return;
	      }
	
	      self.updateSlide(slide);
	
	      // Simply show content if no effect
	      // ================================
	      if (!effect) {
	        slide.$content.removeClass("fancybox-is-hidden");
	
	        if (!isRevealed && isMoved && slide.type === "image" && !slide.hasError) {
	          slide.$content.hide().fadeIn("fast");
	        }
	
	        if (slide.pos === self.currPos) {
	          self.complete();
	        }
	
	        return;
	      }
	
	      // Prepare for CSS transiton
	      // =========================
	      $.fancybox.stop($slide);
	
	      //effectClassName = "fancybox-animated fancybox-slide--" + (slide.pos >= self.prevPos ? "next" : "previous") + " fancybox-fx-" + effect;
	      effectClassName = "fancybox-slide--" + (slide.pos >= self.prevPos ? "next" : "previous") + " fancybox-animated fancybox-fx-" + effect;
	
	      $slide.addClass(effectClassName).removeClass("fancybox-slide--current"); //.addClass(effectClassName);
	
	      slide.$content.removeClass("fancybox-is-hidden");
	
	      // Force reflow
	      forceRedraw($slide);
	
	      if (slide.type !== "image") {
	        slide.$content.hide().show(0);
	      }
	
	      $.fancybox.animate(
	        $slide,
	        "fancybox-slide--current",
	        duration,
	        function () {
	          $slide.removeClass(effectClassName).css({
	            transform: "",
	            opacity: ""
	          });
	
	          if (slide.pos === self.currPos) {
	            self.complete();
	          }
	        },
	        true
	      );
	    },
	
	    // Check if we can and have to zoom from thumbnail
	    //================================================
	
	    getThumbPos: function (slide) {
	      var rez = false,
	        $thumb = slide.$thumb,
	        thumbPos,
	        btw,
	        brw,
	        bbw,
	        blw;
	
	      if (!$thumb || !inViewport($thumb[0])) {
	        return false;
	      }
	
	      thumbPos = $.fancybox.getTranslate($thumb);
	
	      btw = parseFloat($thumb.css("border-top-width") || 0);
	      brw = parseFloat($thumb.css("border-right-width") || 0);
	      bbw = parseFloat($thumb.css("border-bottom-width") || 0);
	      blw = parseFloat($thumb.css("border-left-width") || 0);
	
	      rez = {
	        top: thumbPos.top + btw,
	        left: thumbPos.left + blw,
	        width: thumbPos.width - brw - blw,
	        height: thumbPos.height - btw - bbw,
	        scaleX: 1,
	        scaleY: 1
	      };
	
	      return thumbPos.width > 0 && thumbPos.height > 0 ? rez : false;
	    },
	
	    // Final adjustments after current gallery item is moved to position
	    // and it`s content is loaded
	    // ==================================================================
	
	    complete: function () {
	      var self = this,
	        current = self.current,
	        slides = {},
	        $el;
	
	      if (self.isMoved() || !current.isLoaded) {
	        return;
	      }
	
	      if (!current.isComplete) {
	        current.isComplete = true;
	
	        current.$slide.siblings().trigger("onReset");
	
	        self.preload("inline");
	
	        // Trigger any CSS transiton inside the slide
	        forceRedraw(current.$slide);
	
	        current.$slide.addClass("fancybox-slide--complete");
	
	        // Remove unnecessary slides
	        $.each(self.slides, function (key, slide) {
	          if (slide.pos >= self.currPos - 1 && slide.pos <= self.currPos + 1) {
	            slides[slide.pos] = slide;
	          } else if (slide) {
	            $.fancybox.stop(slide.$slide);
	
	            slide.$slide.off().remove();
	          }
	        });
	
	        self.slides = slides;
	      }
	
	      self.isAnimating = false;
	
	      self.updateCursor();
	
	      self.trigger("afterShow");
	
	      // Autoplay first html5 video/audio
	      if (!!current.opts.video.autoStart) {
	        current.$slide
	          .find("video,audio")
	          .filter(":visible:first")
	          .trigger("play")
	          .one("ended", function () {
	            if (Document.exitFullscreen) {
	              Document.exitFullscreen();
	            } else if (this.webkitExitFullscreen) {
	              this.webkitExitFullscreen();
	            }
	
	            self.next();
	          });
	      }
	
	      // Try to focus on the first focusable element
	      if (current.opts.autoFocus && current.contentType === "html") {
	        // Look for the first input with autofocus attribute
	        $el = current.$content.find("input[autofocus]:enabled:visible:first");
	
	        if ($el.length) {
	          $el.trigger("focus");
	        } else {
	          self.focus(null, true);
	        }
	      }
	
	      // Avoid jumping
	      current.$slide.scrollTop(0).scrollLeft(0);
	    },
	
	    // Preload next and previous slides
	    // ================================
	
	    preload: function (type) {
	      var self = this,
	        prev,
	        next;
	
	      if (self.group.length < 2) {
	        return;
	      }
	
	      next = self.slides[self.currPos + 1];
	      prev = self.slides[self.currPos - 1];
	
	      if (prev && prev.type === type) {
	        self.loadSlide(prev);
	      }
	
	      if (next && next.type === type) {
	        self.loadSlide(next);
	      }
	    },
	
	    // Try to find and focus on the first focusable element
	    // ====================================================
	
	    focus: function (e, firstRun) {
	      var self = this,
	        focusableStr = [
	          "a[href]",
	          "area[href]",
	          'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',
	          "select:not([disabled]):not([aria-hidden])",
	          "textarea:not([disabled]):not([aria-hidden])",
	          "button:not([disabled]):not([aria-hidden])",
	          "iframe",
	          "object",
	          "embed",
	          "video",
	          "audio",
	          "[contenteditable]",
	          '[tabindex]:not([tabindex^="-"])'
	        ].join(","),
	        focusableItems,
	        focusedItemIndex;
	
	      if (self.isClosing) {
	        return;
	      }
	
	      if (e || !self.current || !self.current.isComplete) {
	        // Focus on any element inside fancybox
	        focusableItems = self.$refs.container.find("*:visible");
	      } else {
	        // Focus inside current slide
	        focusableItems = self.current.$slide.find("*:visible" + (firstRun ? ":not(.fancybox-close-small)" : ""));
	      }
	
	      focusableItems = focusableItems.filter(focusableStr).filter(function () {
	        return $(this).css("visibility") !== "hidden" && !$(this).hasClass("disabled");
	      });
	
	      if (focusableItems.length) {
	        focusedItemIndex = focusableItems.index(document.activeElement);
	
	        if (e && e.shiftKey) {
	          // Back tab
	          if (focusedItemIndex < 0 || focusedItemIndex == 0) {
	            e.preventDefault();
	
	            focusableItems.eq(focusableItems.length - 1).trigger("focus");
	          }
	        } else {
	          // Outside or Forward tab
	          if (focusedItemIndex < 0 || focusedItemIndex == focusableItems.length - 1) {
	            if (e) {
	              e.preventDefault();
	            }
	
	            focusableItems.eq(0).trigger("focus");
	          }
	        }
	      } else {
	        self.$refs.container.trigger("focus");
	      }
	    },
	
	    // Activates current instance - brings container to the front and enables keyboard,
	    // notifies other instances about deactivating
	    // =================================================================================
	
	    activate: function () {
	      var self = this;
	
	      // Deactivate all instances
	      $(".fancybox-container").each(function () {
	        var instance = $(this).data("FancyBox");
	
	        // Skip self and closing instances
	        if (instance && instance.id !== self.id && !instance.isClosing) {
	          instance.trigger("onDeactivate");
	
	          instance.removeEvents();
	
	          instance.isVisible = false;
	        }
	      });
	
	      self.isVisible = true;
	
	      if (self.current || self.isIdle) {
	        self.update();
	
	        self.updateControls();
	      }
	
	      self.trigger("onActivate");
	
	      self.addEvents();
	    },
	
	    // Start closing procedure
	    // This will start "zoom-out" animation if needed and clean everything up afterwards
	    // =================================================================================
	
	    close: function (e, d) {
	      var self = this,
	        current = self.current,
	        effect,
	        duration,
	        $content,
	        domRect,
	        opacity,
	        start,
	        end;
	
	      var done = function () {
	        self.cleanUp(e);
	      };
	
	      if (self.isClosing) {
	        return false;
	      }
	
	      self.isClosing = true;
	
	      // If beforeClose callback prevents closing, make sure content is centered
	      if (self.trigger("beforeClose", e) === false) {
	        self.isClosing = false;
	
	        requestAFrame(function () {
	          self.update();
	        });
	
	        return false;
	      }
	
	      // Remove all events
	      // If there are multiple instances, they will be set again by "activate" method
	      self.removeEvents();
	
	      $content = current.$content;
	      effect = current.opts.animationEffect;
	      duration = $.isNumeric(d) ? d : effect ? current.opts.animationDuration : 0;
	
	      current.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated");
	
	      if (e !== true) {
	        $.fancybox.stop(current.$slide);
	      } else {
	        effect = false;
	      }
	
	      // Remove other slides
	      current.$slide
	        .siblings()
	        .trigger("onReset")
	        .remove();
	
	      // Trigger animations
	      if (duration) {
	        self.$refs.container
	          .removeClass("fancybox-is-open")
	          .addClass("fancybox-is-closing")
	          .css("transition-duration", duration + "ms");
	      }
	
	      // Clean up
	      self.hideLoading(current);
	
	      self.hideControls(true);
	
	      self.updateCursor();
	
	      // Check if possible to zoom-out
	      if (
	        effect === "zoom" &&
	        !($content && duration && current.type === "image" && !self.isMoved() && !current.hasError && (end = self.getThumbPos(current)))
	      ) {
	        effect = "fade";
	      }
	
	      if (effect === "zoom") {
	        $.fancybox.stop($content);
	
	        domRect = $.fancybox.getTranslate($content);
	
	        start = {
	          top: domRect.top,
	          left: domRect.left,
	          scaleX: domRect.width / end.width,
	          scaleY: domRect.height / end.height,
	          width: end.width,
	          height: end.height
	        };
	
	        // Check if we need to animate opacity
	        opacity = current.opts.zoomOpacity;
	
	        if (opacity == "auto") {
	          opacity = Math.abs(current.width / current.height - end.width / end.height) > 0.1;
	        }
	
	        if (opacity) {
	          end.opacity = 0;
	        }
	
	        $.fancybox.setTranslate($content, start);
	
	        forceRedraw($content);
	
	        $.fancybox.animate($content, end, duration, done);
	
	        return true;
	      }
	
	      if (effect && duration) {
	        $.fancybox.animate(
	          current.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),
	          "fancybox-animated fancybox-fx-" + effect,
	          duration,
	          done
	        );
	      } else {
	        // If skip animation
	        if (e === true) {
	          setTimeout(done, duration);
	        } else {
	          done();
	        }
	      }
	
	      return true;
	    },
	
	    // Final adjustments after removing the instance
	    // =============================================
	
	    cleanUp: function (e) {
	      var self = this,
	        instance,
	        $focus = self.current.opts.$orig,
	        x,
	        y;
	
	      self.current.$slide.trigger("onReset");
	
	      self.$refs.container.empty().remove();
	
	      self.trigger("afterClose", e);
	
	      // Place back focus
	      if (!!self.current.opts.backFocus) {
	        if (!$focus || !$focus.length || !$focus.is(":visible")) {
	          $focus = self.$trigger;
	        }
	
	        if ($focus && $focus.length) {
	          x = window.scrollX;
	          y = window.scrollY;
	
	          $focus.trigger("focus");
	
	          $("html, body")
	            .scrollTop(y)
	            .scrollLeft(x);
	        }
	      }
	
	      self.current = null;
	
	      // Check if there are other instances
	      instance = $.fancybox.getInstance();
	
	      if (instance) {
	        instance.activate();
	      } else {
	        $("body").removeClass("fancybox-active compensate-for-scrollbar");
	
	        $("#fancybox-style-noscroll").remove();
	      }
	    },
	
	    // Call callback and trigger an event
	    // ==================================
	
	    trigger: function (name, slide) {
	      var args = Array.prototype.slice.call(arguments, 1),
	        self = this,
	        obj = slide && slide.opts ? slide : self.current,
	        rez;
	
	      if (obj) {
	        args.unshift(obj);
	      } else {
	        obj = self;
	      }
	
	      args.unshift(self);
	
	      if ($.isFunction(obj.opts[name])) {
	        rez = obj.opts[name].apply(obj, args);
	      }
	
	      if (rez === false) {
	        return rez;
	      }
	
	      if (name === "afterClose" || !self.$refs) {
	        $D.trigger(name + ".fb", args);
	      } else {
	        self.$refs.container.trigger(name + ".fb", args);
	      }
	    },
	
	    // Update infobar values, navigation button states and reveal caption
	    // ==================================================================
	
	    updateControls: function () {
	      var self = this,
	        current = self.current,
	        index = current.index,
	        $container = self.$refs.container,
	        $caption = self.$refs.caption,
	        caption = current.opts.caption;
	
	      // Recalculate content dimensions
	      current.$slide.trigger("refresh");
	
	      // Set caption
	      if (caption && caption.length) {
	        self.$caption = $caption;
	
	        $caption
	          .children()
	          .eq(0)
	          .html(caption);
	      } else {
	        self.$caption = null;
	      }
	
	      if (!self.hasHiddenControls && !self.isIdle) {
	        self.showControls();
	      }
	
	      // Update info and navigation elements
	      $container.find("[data-fancybox-count]").html(self.group.length);
	      $container.find("[data-fancybox-index]").html(index + 1);
	
	      $container.find("[data-fancybox-prev]").prop("disabled", !current.opts.loop && index <= 0);
	      $container.find("[data-fancybox-next]").prop("disabled", !current.opts.loop && index >= self.group.length - 1);
	
	      if (current.type === "image") {
	        // Re-enable buttons; update download button source
	        $container
	          .find("[data-fancybox-zoom]")
	          .show()
	          .end()
	          .find("[data-fancybox-download]")
	          .attr("href", current.opts.image.src || current.src)
	          .show();
	      } else if (current.opts.toolbar) {
	        $container.find("[data-fancybox-download],[data-fancybox-zoom]").hide();
	      }
	
	      // Make sure focus is not on disabled button/element
	      if ($(document.activeElement).is(":hidden,[disabled]")) {
	        self.$refs.container.trigger("focus");
	      }
	    },
	
	    // Hide toolbar and caption
	    // ========================
	
	    hideControls: function (andCaption) {
	      var self = this,
	        arr = ["infobar", "toolbar", "nav"];
	
	      if (andCaption || !self.current.opts.preventCaptionOverlap) {
	        arr.push("caption");
	      }
	
	      this.$refs.container.removeClass(
	        arr
	        .map(function (i) {
	          return "fancybox-show-" + i;
	        })
	        .join(" ")
	      );
	
	      this.hasHiddenControls = true;
	    },
	
	    showControls: function () {
	      var self = this,
	        opts = self.current ? self.current.opts : self.opts,
	        $container = self.$refs.container;
	
	      self.hasHiddenControls = false;
	      self.idleSecondsCounter = 0;
	
	      $container
	        .toggleClass("fancybox-show-toolbar", !!(opts.toolbar && opts.buttons))
	        .toggleClass("fancybox-show-infobar", !!(opts.infobar && self.group.length > 1))
	        .toggleClass("fancybox-show-caption", !!self.$caption)
	        .toggleClass("fancybox-show-nav", !!(opts.arrows && self.group.length > 1))
	        .toggleClass("fancybox-is-modal", !!opts.modal);
	    },
	
	    // Toggle toolbar and caption
	    // ==========================
	
	    toggleControls: function () {
	      if (this.hasHiddenControls) {
	        this.showControls();
	      } else {
	        this.hideControls();
	      }
	    }
	  });
	
	  $.fancybox = {
	    version: "3.5.7",
	    defaults: defaults,
	
	    // Get current instance and execute a command.
	    //
	    // Examples of usage:
	    //
	    //   $instance = $.fancybox.getInstance();
	    //   $.fancybox.getInstance().jumpTo( 1 );
	    //   $.fancybox.getInstance( 'jumpTo', 1 );
	    //   $.fancybox.getInstance( function() {
	    //       console.info( this.currIndex );
	    //   });
	    // ======================================================
	
	    getInstance: function (command) {
	      var instance = $('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),
	        args = Array.prototype.slice.call(arguments, 1);
	
	      if (instance instanceof FancyBox) {
	        if ($.type(command) === "string") {
	          instance[command].apply(instance, args);
	        } else if ($.type(command) === "function") {
	          command.apply(instance, args);
	        }
	
	        return instance;
	      }
	
	      return false;
	    },
	
	    // Create new instance
	    // ===================
	
	    open: function (items, opts, index) {
	      return new FancyBox(items, opts, index);
	    },
	
	    // Close current or all instances
	    // ==============================
	
	    close: function (all) {
	      var instance = this.getInstance();
	
	      if (instance) {
	        instance.close();
	
	        // Try to find and close next instance
	        if (all === true) {
	          this.close(all);
	        }
	      }
	    },
	
	    // Close all instances and unbind all events
	    // =========================================
	
	    destroy: function () {
	      this.close(true);
	
	      $D.add("body").off("click.fb-start", "**");
	    },
	
	    // Try to detect mobile devices
	    // ============================
	
	    isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
	
	    // Detect if 'translate3d' support is available
	    // ============================================
	
	    use3d: (function () {
	      var div = document.createElement("div");
	
	      return (
	        window.getComputedStyle &&
	        window.getComputedStyle(div) &&
	        window.getComputedStyle(div).getPropertyValue("transform") &&
	        !(document.documentMode && document.documentMode < 11)
	      );
	    })(),
	
	    // Helper function to get current visual state of an element
	    // returns array[ top, left, horizontal-scale, vertical-scale, opacity ]
	    // =====================================================================
	
	    getTranslate: function ($el) {
	      var domRect;
	
	      if (!$el || !$el.length) {
	        return false;
	      }
	
	      domRect = $el[0].getBoundingClientRect();
	
	      return {
	        top: domRect.top || 0,
	        left: domRect.left || 0,
	        width: domRect.width,
	        height: domRect.height,
	        opacity: parseFloat($el.css("opacity"))
	      };
	    },
	
	    // Shortcut for setting "translate3d" properties for element
	    // Can set be used to set opacity, too
	    // ========================================================
	
	    setTranslate: function ($el, props) {
	      var str = "",
	        css = {};
	
	      if (!$el || !props) {
	        return;
	      }
	
	      if (props.left !== undefined || props.top !== undefined) {
	        str =
	          (props.left === undefined ? $el.position().left : props.left) +
	          "px, " +
	          (props.top === undefined ? $el.position().top : props.top) +
	          "px";
	
	        if (this.use3d) {
	          str = "translate3d(" + str + ", 0px)";
	        } else {
	          str = "translate(" + str + ")";
	        }
	      }
	
	      if (props.scaleX !== undefined && props.scaleY !== undefined) {
	        str += " scale(" + props.scaleX + ", " + props.scaleY + ")";
	      } else if (props.scaleX !== undefined) {
	        str += " scaleX(" + props.scaleX + ")";
	      }
	
	      if (str.length) {
	        css.transform = str;
	      }
	
	      if (props.opacity !== undefined) {
	        css.opacity = props.opacity;
	      }
	
	      if (props.width !== undefined) {
	        css.width = props.width;
	      }
	
	      if (props.height !== undefined) {
	        css.height = props.height;
	      }
	
	      return $el.css(css);
	    },
	
	    // Simple CSS transition handler
	    // =============================
	
	    animate: function ($el, to, duration, callback, leaveAnimationName) {
	      var self = this,
	        from;
	
	      if ($.isFunction(duration)) {
	        callback = duration;
	        duration = null;
	      }
	
	      self.stop($el);
	
	      from = self.getTranslate($el);
	
	      $el.on(transitionEnd, function (e) {
	        // Skip events from child elements and z-index change
	        if (e && e.originalEvent && (!$el.is(e.originalEvent.target) || e.originalEvent.propertyName == "z-index")) {
	          return;
	        }
	
	        self.stop($el);
	
	        if ($.isNumeric(duration)) {
	          $el.css("transition-duration", "");
	        }
	
	        if ($.isPlainObject(to)) {
	          if (to.scaleX !== undefined && to.scaleY !== undefined) {
	            self.setTranslate($el, {
	              top: to.top,
	              left: to.left,
	              width: from.width * to.scaleX,
	              height: from.height * to.scaleY,
	              scaleX: 1,
	              scaleY: 1
	            });
	          }
	        } else if (leaveAnimationName !== true) {
	          $el.removeClass(to);
	        }
	
	        if ($.isFunction(callback)) {
	          callback(e);
	        }
	      });
	
	      if ($.isNumeric(duration)) {
	        $el.css("transition-duration", duration + "ms");
	      }
	
	      // Start animation by changing CSS properties or class name
	      if ($.isPlainObject(to)) {
	        if (to.scaleX !== undefined && to.scaleY !== undefined) {
	          delete to.width;
	          delete to.height;
	
	          if ($el.parent().hasClass("fancybox-slide--image")) {
	            $el.parent().addClass("fancybox-is-scaling");
	          }
	        }
	
	        $.fancybox.setTranslate($el, to);
	      } else {
	        $el.addClass(to);
	      }
	
	      // Make sure that `transitionend` callback gets fired
	      $el.data(
	        "timer",
	        setTimeout(function () {
	          $el.trigger(transitionEnd);
	        }, duration + 33)
	      );
	    },
	
	    stop: function ($el, callCallback) {
	      if ($el && $el.length) {
	        clearTimeout($el.data("timer"));
	
	        if (callCallback) {
	          $el.trigger(transitionEnd);
	        }
	
	        $el.off(transitionEnd).css("transition-duration", "");
	
	        $el.parent().removeClass("fancybox-is-scaling");
	      }
	    }
	  };
	
	  // Default click handler for "fancyboxed" links
	  // ============================================
	
	  function _run(e, opts) {
	    var items = [],
	      index = 0,
	      $target,
	      value,
	      instance;
	
	    // Avoid opening multiple times
	    if (e && e.isDefaultPrevented()) {
	      return;
	    }
	
	    e.preventDefault();
	
	    opts = opts || {};
	
	    if (e && e.data) {
	      opts = mergeOpts(e.data.options, opts);
	    }
	
	    $target = opts.$target || $(e.currentTarget).trigger("blur");
	    instance = $.fancybox.getInstance();
	
	    if (instance && instance.$trigger && instance.$trigger.is($target)) {
	      return;
	    }
	
	    if (opts.selector) {
	      items = $(opts.selector);
	    } else {
	      // Get all related items and find index for clicked one
	      value = $target.attr("data-fancybox") || "";
	
	      if (value) {
	        items = e.data ? e.data.items : [];
	        items = items.length ? items.filter('[data-fancybox="' + value + '"]') : $('[data-fancybox="' + value + '"]');
	      } else {
	        items = [$target];
	      }
	    }
	
	    index = $(items).index($target);
	
	    // Sometimes current item can not be found
	    if (index < 0) {
	      index = 0;
	    }
	
	    instance = $.fancybox.open(items, opts, index);
	
	    // Save last active element
	    instance.$trigger = $target;
	  }
	
	  // Create a jQuery plugin
	  // ======================
	
	  $.fn.fancybox = function (options) {
	    var selector;
	
	    options = options || {};
	    selector = options.selector || false;
	
	    if (selector) {
	      // Use body element instead of document so it executes first
	      $("body")
	        .off("click.fb-start", selector)
	        .on("click.fb-start", selector, {
	          options: options
	        }, _run);
	    } else {
	      this.off("click.fb-start").on(
	        "click.fb-start", {
	          items: this,
	          options: options
	        },
	        _run
	      );
	    }
	
	    return this;
	  };
	
	  // Self initializing plugin for all elements having `data-fancybox` attribute
	  // ==========================================================================
	
	  $D.on("click.fb-start", "[data-fancybox]", _run);
	
	  // Enable "trigger elements"
	  // =========================
	
	  $D.on("click.fb-start", "[data-fancybox-trigger]", function (e) {
	    $('[data-fancybox="' + $(this).attr("data-fancybox-trigger") + '"]')
	      .eq($(this).attr("data-fancybox-index") || 0)
	      .trigger("click.fb-start", {
	        $trigger: $(this)
	      });
	  });
	
	  // Track focus event for better accessibility styling
	  // ==================================================
	  (function () {
	    var buttonStr = ".fancybox-button",
	      focusStr = "fancybox-focus",
	      $pressed = null;
	
	    $D.on("mousedown mouseup focus blur", buttonStr, function (e) {
	      switch (e.type) {
	        case "mousedown":
	          $pressed = $(this);
	          break;
	        case "mouseup":
	          $pressed = null;
	          break;
	        case "focusin":
	          $(buttonStr).removeClass(focusStr);
	
	          if (!$(this).is($pressed) && !$(this).is("[disabled]")) {
	            $(this).addClass(focusStr);
	          }
	          break;
	        case "focusout":
	          $(buttonStr).removeClass(focusStr);
	          break;
	      }
	    });
	  })();
	})(window, document, jQuery);
	// ==========================================================================
	//
	// Media
	// Adds additional media type support
	//
	// ==========================================================================
	(function ($) {
	  "use strict";
	
	  // Object containing properties for each media type
	  var defaults = {
	    youtube: {
	      matcher: /(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,
	      params: {
	        autoplay: 1,
	        autohide: 1,
	        fs: 1,
	        rel: 0,
	        hd: 1,
	        wmode: "transparent",
	        enablejsapi: 1,
	        html5: 1
	      },
	      paramPlace: 8,
	      type: "iframe",
	      url: "https://www.youtube-nocookie.com/embed/$4",
	      thumb: "https://img.youtube.com/vi/$4/hqdefault.jpg"
	    },
	
	    vimeo: {
	      matcher: /^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,
	      params: {
	        autoplay: 1,
	        hd: 1,
	        show_title: 1,
	        show_byline: 1,
	        show_portrait: 0,
	        fullscreen: 1
	      },
	      paramPlace: 3,
	      type: "iframe",
	      url: "//player.vimeo.com/video/$2"
	    },
	
	    instagram: {
	      matcher: /(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,
	      type: "image",
	      url: "//$1/p/$2/media/?size=l"
	    },
	
	    // Examples:
	    // http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16
	    // https://www.google.com/maps/@37.7852006,-122.4146355,14.65z
	    // https://www.google.com/maps/@52.2111123,2.9237542,6.61z?hl=en
	    // https://www.google.com/maps/place/Googleplex/@37.4220041,-122.0833494,17z/data=!4m5!3m4!1s0x0:0x6c296c66619367e0!8m2!3d37.4219998!4d-122.0840572
	    gmap_place: {
	      matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,
	      type: "iframe",
	      url: function (rez) {
	        return (
	          "//maps.google." +
	          rez[2] +
	          "/?ll=" +
	          (rez[9] ? rez[9] + "&z=" + Math.floor(rez[10]) + (rez[12] ? rez[12].replace(/^\//, "&") : "") : rez[12] + "").replace(/\?/, "&") +
	          "&output=" +
	          (rez[12] && rez[12].indexOf("layer=c") > 0 ? "svembed" : "embed")
	        );
	      }
	    },
	
	    // Examples:
	    // https://www.google.com/maps/search/Empire+State+Building/
	    // https://www.google.com/maps/search/?api=1&query=centurylink+field
	    // https://www.google.com/maps/search/?api=1&query=47.5951518,-122.3316393
	    gmap_search: {
	      matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,
	      type: "iframe",
	      url: function (rez) {
	        return "//maps.google." + rez[2] + "/maps?q=" + rez[5].replace("query=", "q=").replace("api=1", "") + "&output=embed";
	      }
	    }
	  };
	
	  // Formats matching url to final form
	  var format = function (url, rez, params) {
	    if (!url) {
	      return;
	    }
	
	    params = params || "";
	
	    if ($.type(params) === "object") {
	      params = $.param(params, true);
	    }
	
	    $.each(rez, function (key, value) {
	      url = url.replace("$" + key, value || "");
	    });
	
	    if (params.length) {
	      url += (url.indexOf("?") > 0 ? "&" : "?") + params;
	    }
	
	    return url;
	  };
	
	  $(document).on("objectNeedsType.fb", function (e, instance, item) {
	    var url = item.src || "",
	      type = false,
	      media,
	      thumb,
	      rez,
	      params,
	      urlParams,
	      paramObj,
	      provider;
	
	    media = $.extend(true, {}, defaults, item.opts.media);
	
	    // Look for any matching media type
	    $.each(media, function (providerName, providerOpts) {
	      rez = url.match(providerOpts.matcher);
	
	      if (!rez) {
	        return;
	      }
	
	      type = providerOpts.type;
	      provider = providerName;
	      paramObj = {};
	
	      if (providerOpts.paramPlace && rez[providerOpts.paramPlace]) {
	        urlParams = rez[providerOpts.paramPlace];
	
	        if (urlParams[0] == "?") {
	          urlParams = urlParams.substring(1);
	        }
	
	        urlParams = urlParams.split("&");
	
	        for (var m = 0; m < urlParams.length; ++m) {
	          var p = urlParams[m].split("=", 2);
	
	          if (p.length == 2) {
	            paramObj[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " "));
	          }
	        }
	      }
	
	      params = $.extend(true, {}, providerOpts.params, item.opts[providerName], paramObj);
	
	      url =
	        $.type(providerOpts.url) === "function" ? providerOpts.url.call(this, rez, params, item) : format(providerOpts.url, rez, params);
	
	      thumb =
	        $.type(providerOpts.thumb) === "function" ? providerOpts.thumb.call(this, rez, params, item) : format(providerOpts.thumb, rez);
	
	      if (providerName === "youtube") {
	        url = url.replace(/&t=((\d+)m)?(\d+)s/, function (match, p1, m, s) {
	          return "&start=" + ((m ? parseInt(m, 10) * 60 : 0) + parseInt(s, 10));
	        });
	      } else if (providerName === "vimeo") {
	        url = url.replace("&%23", "#");
	      }
	
	      return false;
	    });
	
	    // If it is found, then change content type and update the url
	
	    if (type) {
	      if (!item.opts.thumb && !(item.opts.$thumb && item.opts.$thumb.length)) {
	        item.opts.thumb = thumb;
	      }
	
	      if (type === "iframe") {
	        item.opts = $.extend(true, item.opts, {
	          iframe: {
	            preload: false,
	            attr: {
	              scrolling: "no"
	            }
	          }
	        });
	      }
	
	      $.extend(item, {
	        type: type,
	        src: url,
	        origSrc: item.src,
	        contentSource: provider,
	        contentType: type === "image" ? "image" : provider == "gmap_place" || provider == "gmap_search" ? "map" : "video"
	      });
	    } else if (url) {
	      item.type = item.opts.defaultType;
	    }
	  });
	
	  // Load YouTube/Video API on request to detect when video finished playing
	  var VideoAPILoader = {
	    youtube: {
	      src: "https://www.youtube.com/iframe_api",
	      class: "YT",
	      loading: false,
	      loaded: false
	    },
	
	    vimeo: {
	      src: "https://player.vimeo.com/api/player.js",
	      class: "Vimeo",
	      loading: false,
	      loaded: false
	    },
	
	    load: function (vendor) {
	      var _this = this,
	        script;
	
	      if (this[vendor].loaded) {
	        setTimeout(function () {
	          _this.done(vendor);
	        });
	        return;
	      }
	
	      if (this[vendor].loading) {
	        return;
	      }
	
	      this[vendor].loading = true;
	
	      script = document.createElement("script");
	      script.type = "text/javascript";
	      script.src = this[vendor].src;
	
	      if (vendor === "youtube") {
	        window.onYouTubeIframeAPIReady = function () {
	          _this[vendor].loaded = true;
	          _this.done(vendor);
	        };
	      } else {
	        script.onload = function () {
	          _this[vendor].loaded = true;
	          _this.done(vendor);
	        };
	      }
	
	      document.body.appendChild(script);
	    },
	    done: function (vendor) {
	      var instance, $el, player;
	
	      if (vendor === "youtube") {
	        delete window.onYouTubeIframeAPIReady;
	      }
	
	      instance = $.fancybox.getInstance();
	
	      if (instance) {
	        $el = instance.current.$content.find("iframe");
	
	        if (vendor === "youtube" && YT !== undefined && YT) {
	          player = new YT.Player($el.attr("id"), {
	            events: {
	              onStateChange: function (e) {
	                if (e.data == 0) {
	                  instance.next();
	                }
	              }
	            }
	          });
	        } else if (vendor === "vimeo" && Vimeo !== undefined && Vimeo) {
	          player = new Vimeo.Player($el);
	
	          player.on("ended", function () {
	            instance.next();
	          });
	        }
	      }
	    }
	  };
	
	  $(document).on({
	    "afterShow.fb": function (e, instance, current) {
	      if (instance.group.length > 1 && (current.contentSource === "youtube" || current.contentSource === "vimeo")) {
	        VideoAPILoader.load(current.contentSource);
	      }
	    }
	  });
	})(jQuery);
	// ==========================================================================
	//
	// Guestures
	// Adds touch guestures, handles click and tap events
	//
	// ==========================================================================
	(function (window, document, $) {
	  "use strict";
	
	  var requestAFrame = (function () {
	    return (
	      window.requestAnimationFrame ||
	      window.webkitRequestAnimationFrame ||
	      window.mozRequestAnimationFrame ||
	      window.oRequestAnimationFrame ||
	      // if all else fails, use setTimeout
	      function (callback) {
	        return window.setTimeout(callback, 1000 / 60);
	      }
	    );
	  })();
	
	  var cancelAFrame = (function () {
	    return (
	      window.cancelAnimationFrame ||
	      window.webkitCancelAnimationFrame ||
	      window.mozCancelAnimationFrame ||
	      window.oCancelAnimationFrame ||
	      function (id) {
	        window.clearTimeout(id);
	      }
	    );
	  })();
	
	  var getPointerXY = function (e) {
	    var result = [];
	
	    e = e.originalEvent || e || window.e;
	    e = e.touches && e.touches.length ? e.touches : e.changedTouches && e.changedTouches.length ? e.changedTouches : [e];
	
	    for (var key in e) {
	      if (e[key].pageX) {
	        result.push({
	          x: e[key].pageX,
	          y: e[key].pageY
	        });
	      } else if (e[key].clientX) {
	        result.push({
	          x: e[key].clientX,
	          y: e[key].clientY
	        });
	      }
	    }
	
	    return result;
	  };
	
	  var distance = function (point2, point1, what) {
	    if (!point1 || !point2) {
	      return 0;
	    }
	
	    if (what === "x") {
	      return point2.x - point1.x;
	    } else if (what === "y") {
	      return point2.y - point1.y;
	    }
	
	    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
	  };
	
	  var isClickable = function ($el) {
	    if (
	      $el.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe') ||
	      $.isFunction($el.get(0).onclick) ||
	      $el.data("selectable")
	    ) {
	      return true;
	    }
	
	    // Check for attributes like data-fancybox-next or data-fancybox-close
	    for (var i = 0, atts = $el[0].attributes, n = atts.length; i < n; i++) {
	      if (atts[i].nodeName.substr(0, 14) === "data-fancybox-") {
	        return true;
	      }
	    }
	
	    return false;
	  };
	
	  var hasScrollbars = function (el) {
	    var overflowY = window.getComputedStyle(el)["overflow-y"],
	      overflowX = window.getComputedStyle(el)["overflow-x"],
	      vertical = (overflowY === "scroll" || overflowY === "auto") && el.scrollHeight > el.clientHeight,
	      horizontal = (overflowX === "scroll" || overflowX === "auto") && el.scrollWidth > el.clientWidth;
	
	    return vertical || horizontal;
	  };
	
	  var isScrollable = function ($el) {
	    var rez = false;
	
	    while (true) {
	      rez = hasScrollbars($el.get(0));
	
	      if (rez) {
	        break;
	      }
	
	      $el = $el.parent();
	
	      if (!$el.length || $el.hasClass("fancybox-stage") || $el.is("body")) {
	        break;
	      }
	    }
	
	    return rez;
	  };
	
	  var Guestures = function (instance) {
	    var self = this;
	
	    self.instance = instance;
	
	    self.$bg = instance.$refs.bg;
	    self.$stage = instance.$refs.stage;
	    self.$container = instance.$refs.container;
	
	    self.destroy();
	
	    self.$container.on("touchstart.fb.touch mousedown.fb.touch", $.proxy(self, "ontouchstart"));
	  };
	
	  Guestures.prototype.destroy = function () {
	    var self = this;
	
	    self.$container.off(".fb.touch");
	
	    $(document).off(".fb.touch");
	
	    if (self.requestId) {
	      cancelAFrame(self.requestId);
	      self.requestId = null;
	    }
	
	    if (self.tapped) {
	      clearTimeout(self.tapped);
	      self.tapped = null;
	    }
	  };
	
	  Guestures.prototype.ontouchstart = function (e) {
	    var self = this,
	      $target = $(e.target),
	      instance = self.instance,
	      current = instance.current,
	      $slide = current.$slide,
	      $content = current.$content,
	      isTouchDevice = e.type == "touchstart";
	
	    // Do not respond to both (touch and mouse) events
	    if (isTouchDevice) {
	      self.$container.off("mousedown.fb.touch");
	    }
	
	    // Ignore right click
	    if (e.originalEvent && e.originalEvent.button == 2) {
	      return;
	    }
	
	    // Ignore taping on links, buttons, input elements
	    if (!$slide.length || !$target.length || isClickable($target) || isClickable($target.parent())) {
	      return;
	    }
	    // Ignore clicks on the scrollbar
	    if (!$target.is("img") && e.originalEvent.clientX > $target[0].clientWidth + $target.offset().left) {
	      return;
	    }
	
	    // Ignore clicks while zooming or closing
	    if (!current || instance.isAnimating || current.$slide.hasClass("fancybox-animated")) {
	      e.stopPropagation();
	      e.preventDefault();
	
	      return;
	    }
	
	    self.realPoints = self.startPoints = getPointerXY(e);
	
	    if (!self.startPoints.length) {
	      return;
	    }
	
	    // Allow other scripts to catch touch event if "touch" is set to false
	    if (current.touch) {
	      e.stopPropagation();
	    }
	
	    self.startEvent = e;
	
	    self.canTap = true;
	    self.$target = $target;
	    self.$content = $content;
	    self.opts = current.opts.touch;
	
	    self.isPanning = false;
	    self.isSwiping = false;
	    self.isZooming = false;
	    self.isScrolling = false;
	    self.canPan = instance.canPan();
	
	    self.startTime = new Date().getTime();
	    self.distanceX = self.distanceY = self.distance = 0;
	
	    self.canvasWidth = Math.round($slide[0].clientWidth);
	    self.canvasHeight = Math.round($slide[0].clientHeight);
	
	    self.contentLastPos = null;
	    self.contentStartPos = $.fancybox.getTranslate(self.$content) || {
	      top: 0,
	      left: 0
	    };
	    self.sliderStartPos = $.fancybox.getTranslate($slide);
	
	    // Since position will be absolute, but we need to make it relative to the stage
	    self.stagePos = $.fancybox.getTranslate(instance.$refs.stage);
	
	    self.sliderStartPos.top -= self.stagePos.top;
	    self.sliderStartPos.left -= self.stagePos.left;
	
	    self.contentStartPos.top -= self.stagePos.top;
	    self.contentStartPos.left -= self.stagePos.left;
	
	    $(document)
	      .off(".fb.touch")
	      .on(isTouchDevice ? "touchend.fb.touch touchcancel.fb.touch" : "mouseup.fb.touch mouseleave.fb.touch", $.proxy(self, "ontouchend"))
	      .on(isTouchDevice ? "touchmove.fb.touch" : "mousemove.fb.touch", $.proxy(self, "ontouchmove"));
	
	    if ($.fancybox.isMobile) {
	      document.addEventListener("scroll", self.onscroll, true);
	    }
	
	    // Skip if clicked outside the sliding area
	    if (!(self.opts || self.canPan) || !($target.is(self.$stage) || self.$stage.find($target).length)) {
	      if ($target.is(".fancybox-image")) {
	        e.preventDefault();
	      }
	
	      if (!($.fancybox.isMobile && $target.parents(".fancybox-caption").length)) {
	        return;
	      }
	    }
	
	    self.isScrollable = isScrollable($target) || isScrollable($target.parent());
	
	    // Check if element is scrollable and try to prevent default behavior (scrolling)
	    if (!($.fancybox.isMobile && self.isScrollable)) {
	      e.preventDefault();
	    }
	
	    // One finger or mouse click - swipe or pan an image
	    if (self.startPoints.length === 1 || current.hasError) {
	      if (self.canPan) {
	        $.fancybox.stop(self.$content);
	
	        self.isPanning = true;
	      } else {
	        self.isSwiping = true;
	      }
	
	      self.$container.addClass("fancybox-is-grabbing");
	    }
	
	    // Two fingers - zoom image
	    if (self.startPoints.length === 2 && current.type === "image" && (current.isLoaded || current.$ghost)) {
	      self.canTap = false;
	      self.isSwiping = false;
	      self.isPanning = false;
	
	      self.isZooming = true;
	
	      $.fancybox.stop(self.$content);
	
	      self.centerPointStartX = (self.startPoints[0].x + self.startPoints[1].x) * 0.5 - $(window).scrollLeft();
	      self.centerPointStartY = (self.startPoints[0].y + self.startPoints[1].y) * 0.5 - $(window).scrollTop();
	
	      self.percentageOfImageAtPinchPointX = (self.centerPointStartX - self.contentStartPos.left) / self.contentStartPos.width;
	      self.percentageOfImageAtPinchPointY = (self.centerPointStartY - self.contentStartPos.top) / self.contentStartPos.height;
	
	      self.startDistanceBetweenFingers = distance(self.startPoints[0], self.startPoints[1]);
	    }
	  };
	
	  Guestures.prototype.onscroll = function (e) {
	    var self = this;
	
	    self.isScrolling = true;
	
	    document.removeEventListener("scroll", self.onscroll, true);
	  };
	
	  Guestures.prototype.ontouchmove = function (e) {
	    var self = this;
	
	    // Make sure user has not released over iframe or disabled element
	    if (e.originalEvent.buttons !== undefined && e.originalEvent.buttons === 0) {
	      self.ontouchend(e);
	      return;
	    }
	
	    if (self.isScrolling) {
	      self.canTap = false;
	      return;
	    }
	
	    self.newPoints = getPointerXY(e);
	
	    if (!(self.opts || self.canPan) || !self.newPoints.length || !self.newPoints.length) {
	      return;
	    }
	
	    if (!(self.isSwiping && self.isSwiping === true)) {
	      e.preventDefault();
	    }
	
	    self.distanceX = distance(self.newPoints[0], self.startPoints[0], "x");
	    self.distanceY = distance(self.newPoints[0], self.startPoints[0], "y");
	
	    self.distance = distance(self.newPoints[0], self.startPoints[0]);
	
	    // Skip false ontouchmove events (Chrome)
	    if (self.distance > 0) {
	      if (self.isSwiping) {
	        self.onSwipe(e);
	      } else if (self.isPanning) {
	        self.onPan();
	      } else if (self.isZooming) {
	        self.onZoom();
	      }
	    }
	  };
	
	  Guestures.prototype.onSwipe = function (e) {
	    var self = this,
	      instance = self.instance,
	      swiping = self.isSwiping,
	      left = self.sliderStartPos.left || 0,
	      angle;
	
	    // If direction is not yet determined
	    if (swiping === true) {
	      // We need at least 10px distance to correctly calculate an angle
	      if (Math.abs(self.distance) > 10) {
	        self.canTap = false;
	
	        if (instance.group.length < 2 && self.opts.vertical) {
	          self.isSwiping = "y";
	        } else if (instance.isDragging || self.opts.vertical === false || (self.opts.vertical === "auto" && $(window).width() > 800)) {
	          self.isSwiping = "x";
	        } else {
	          angle = Math.abs((Math.atan2(self.distanceY, self.distanceX) * 180) / Math.PI);
	
	          self.isSwiping = angle > 45 && angle < 135 ? "y" : "x";
	        }
	
	        if (self.isSwiping === "y" && $.fancybox.isMobile && self.isScrollable) {
	          self.isScrolling = true;
	
	          return;
	        }
	
	        instance.isDragging = self.isSwiping;
	
	        // Reset points to avoid jumping, because we dropped first swipes to calculate the angle
	        self.startPoints = self.newPoints;
	
	        $.each(instance.slides, function (index, slide) {
	          var slidePos, stagePos;
	
	          $.fancybox.stop(slide.$slide);
	
	          slidePos = $.fancybox.getTranslate(slide.$slide);
	          stagePos = $.fancybox.getTranslate(instance.$refs.stage);
	
	          slide.$slide
	            .css({
	              transform: "",
	              opacity: "",
	              "transition-duration": ""
	            })
	            .removeClass("fancybox-animated")
	            .removeClass(function (index, className) {
	              return (className.match(/(^|\s)fancybox-fx-\S+/g) || []).join(" ");
	            });
	
	          if (slide.pos === instance.current.pos) {
	            self.sliderStartPos.top = slidePos.top - stagePos.top;
	            self.sliderStartPos.left = slidePos.left - stagePos.left;
	          }
	
	          $.fancybox.setTranslate(slide.$slide, {
	            top: slidePos.top - stagePos.top,
	            left: slidePos.left - stagePos.left
	          });
	        });
	
	        // Stop slideshow
	        if (instance.SlideShow && instance.SlideShow.isActive) {
	          instance.SlideShow.stop();
	        }
	      }
	
	      return;
	    }
	
	    // Sticky edges
	    if (swiping == "x") {
	      if (
	        self.distanceX > 0 &&
	        (self.instance.group.length < 2 || (self.instance.current.index === 0 && !self.instance.current.opts.loop))
	      ) {
	        left = left + Math.pow(self.distanceX, 0.8);
	      } else if (
	        self.distanceX < 0 &&
	        (self.instance.group.length < 2 ||
	          (self.instance.current.index === self.instance.group.length - 1 && !self.instance.current.opts.loop))
	      ) {
	        left = left - Math.pow(-self.distanceX, 0.8);
	      } else {
	        left = left + self.distanceX;
	      }
	    }
	
	    self.sliderLastPos = {
	      top: swiping == "x" ? 0 : self.sliderStartPos.top + self.distanceY,
	      left: left
	    };
	
	    if (self.requestId) {
	      cancelAFrame(self.requestId);
	
	      self.requestId = null;
	    }
	
	    self.requestId = requestAFrame(function () {
	      if (self.sliderLastPos) {
	        $.each(self.instance.slides, function (index, slide) {
	          var pos = slide.pos - self.instance.currPos;
	
	          $.fancybox.setTranslate(slide.$slide, {
	            top: self.sliderLastPos.top,
	            left: self.sliderLastPos.left + pos * self.canvasWidth + pos * slide.opts.gutter
	          });
	        });
	
	        self.$container.addClass("fancybox-is-sliding");
	      }
	    });
	  };
	
	  Guestures.prototype.onPan = function () {
	    var self = this;
	
	    // Prevent accidental movement (sometimes, when tapping casually, finger can move a bit)
	    if (distance(self.newPoints[0], self.realPoints[0]) < ($.fancybox.isMobile ? 10 : 5)) {
	      self.startPoints = self.newPoints;
	      return;
	    }
	
	    self.canTap = false;
	
	    self.contentLastPos = self.limitMovement();
	
	    if (self.requestId) {
	      cancelAFrame(self.requestId);
	    }
	
	    self.requestId = requestAFrame(function () {
	      $.fancybox.setTranslate(self.$content, self.contentLastPos);
	    });
	  };
	
	  // Make panning sticky to the edges
	  Guestures.prototype.limitMovement = function () {
	    var self = this;
	
	    var canvasWidth = self.canvasWidth;
	    var canvasHeight = self.canvasHeight;
	
	    var distanceX = self.distanceX;
	    var distanceY = self.distanceY;
	
	    var contentStartPos = self.contentStartPos;
	
	    var currentOffsetX = contentStartPos.left;
	    var currentOffsetY = contentStartPos.top;
	
	    var currentWidth = contentStartPos.width;
	    var currentHeight = contentStartPos.height;
	
	    var minTranslateX, minTranslateY, maxTranslateX, maxTranslateY, newOffsetX, newOffsetY;
	
	    if (currentWidth > canvasWidth) {
	      newOffsetX = currentOffsetX + distanceX;
	    } else {
	      newOffsetX = currentOffsetX;
	    }
	
	    newOffsetY = currentOffsetY + distanceY;
	
	    // Slow down proportionally to traveled distance
	    minTranslateX = Math.max(0, canvasWidth * 0.5 - currentWidth * 0.5);
	    minTranslateY = Math.max(0, canvasHeight * 0.5 - currentHeight * 0.5);
	
	    maxTranslateX = Math.min(canvasWidth - currentWidth, canvasWidth * 0.5 - currentWidth * 0.5);
	    maxTranslateY = Math.min(canvasHeight - currentHeight, canvasHeight * 0.5 - currentHeight * 0.5);
	
	    //   ->
	    if (distanceX > 0 && newOffsetX > minTranslateX) {
	      newOffsetX = minTranslateX - 1 + Math.pow(-minTranslateX + currentOffsetX + distanceX, 0.8) || 0;
	    }
	
	    //    <-
	    if (distanceX < 0 && newOffsetX < maxTranslateX) {
	      newOffsetX = maxTranslateX + 1 - Math.pow(maxTranslateX - currentOffsetX - distanceX, 0.8) || 0;
	    }
	
	    //   \/
	    if (distanceY > 0 && newOffsetY > minTranslateY) {
	      newOffsetY = minTranslateY - 1 + Math.pow(-minTranslateY + currentOffsetY + distanceY, 0.8) || 0;
	    }
	
	    //   /\
	    if (distanceY < 0 && newOffsetY < maxTranslateY) {
	      newOffsetY = maxTranslateY + 1 - Math.pow(maxTranslateY - currentOffsetY - distanceY, 0.8) || 0;
	    }
	
	    return {
	      top: newOffsetY,
	      left: newOffsetX
	    };
	  };
	
	  Guestures.prototype.limitPosition = function (newOffsetX, newOffsetY, newWidth, newHeight) {
	    var self = this;
	
	    var canvasWidth = self.canvasWidth;
	    var canvasHeight = self.canvasHeight;
	
	    if (newWidth > canvasWidth) {
	      newOffsetX = newOffsetX > 0 ? 0 : newOffsetX;
	      newOffsetX = newOffsetX < canvasWidth - newWidth ? canvasWidth - newWidth : newOffsetX;
	    } else {
	      // Center horizontally
	      newOffsetX = Math.max(0, canvasWidth / 2 - newWidth / 2);
	    }
	
	    if (newHeight > canvasHeight) {
	      newOffsetY = newOffsetY > 0 ? 0 : newOffsetY;
	      newOffsetY = newOffsetY < canvasHeight - newHeight ? canvasHeight - newHeight : newOffsetY;
	    } else {
	      // Center vertically
	      newOffsetY = Math.max(0, canvasHeight / 2 - newHeight / 2);
	    }
	
	    return {
	      top: newOffsetY,
	      left: newOffsetX
	    };
	  };
	
	  Guestures.prototype.onZoom = function () {
	    var self = this;
	
	    // Calculate current distance between points to get pinch ratio and new width and height
	    var contentStartPos = self.contentStartPos;
	
	    var currentWidth = contentStartPos.width;
	    var currentHeight = contentStartPos.height;
	
	    var currentOffsetX = contentStartPos.left;
	    var currentOffsetY = contentStartPos.top;
	
	    var endDistanceBetweenFingers = distance(self.newPoints[0], self.newPoints[1]);
	
	    var pinchRatio = endDistanceBetweenFingers / self.startDistanceBetweenFingers;
	
	    var newWidth = Math.floor(currentWidth * pinchRatio);
	    var newHeight = Math.floor(currentHeight * pinchRatio);
	
	    // This is the translation due to pinch-zooming
	    var translateFromZoomingX = (currentWidth - newWidth) * self.percentageOfImageAtPinchPointX;
	    var translateFromZoomingY = (currentHeight - newHeight) * self.percentageOfImageAtPinchPointY;
	
	    // Point between the two touches
	    var centerPointEndX = (self.newPoints[0].x + self.newPoints[1].x) / 2 - $(window).scrollLeft();
	    var centerPointEndY = (self.newPoints[0].y + self.newPoints[1].y) / 2 - $(window).scrollTop();
	
	    // And this is the translation due to translation of the centerpoint
	    // between the two fingers
	    var translateFromTranslatingX = centerPointEndX - self.centerPointStartX;
	    var translateFromTranslatingY = centerPointEndY - self.centerPointStartY;
	
	    // The new offset is the old/current one plus the total translation
	    var newOffsetX = currentOffsetX + (translateFromZoomingX + translateFromTranslatingX);
	    var newOffsetY = currentOffsetY + (translateFromZoomingY + translateFromTranslatingY);
	
	    var newPos = {
	      top: newOffsetY,
	      left: newOffsetX,
	      scaleX: pinchRatio,
	      scaleY: pinchRatio
	    };
	
	    self.canTap = false;
	
	    self.newWidth = newWidth;
	    self.newHeight = newHeight;
	
	    self.contentLastPos = newPos;
	
	    if (self.requestId) {
	      cancelAFrame(self.requestId);
	    }
	
	    self.requestId = requestAFrame(function () {
	      $.fancybox.setTranslate(self.$content, self.contentLastPos);
	    });
	  };
	
	  Guestures.prototype.ontouchend = function (e) {
	    var self = this;
	
	    var swiping = self.isSwiping;
	    var panning = self.isPanning;
	    var zooming = self.isZooming;
	    var scrolling = self.isScrolling;
	
	    self.endPoints = getPointerXY(e);
	    self.dMs = Math.max(new Date().getTime() - self.startTime, 1);
	
	    self.$container.removeClass("fancybox-is-grabbing");
	
	    $(document).off(".fb.touch");
	
	    document.removeEventListener("scroll", self.onscroll, true);
	
	    if (self.requestId) {
	      cancelAFrame(self.requestId);
	
	      self.requestId = null;
	    }
	
	    self.isSwiping = false;
	    self.isPanning = false;
	    self.isZooming = false;
	    self.isScrolling = false;
	
	    self.instance.isDragging = false;
	
	    if (self.canTap) {
	      return self.onTap(e);
	    }
	
	    self.speed = 100;
	
	    // Speed in px/ms
	    self.velocityX = (self.distanceX / self.dMs) * 0.5;
	    self.velocityY = (self.distanceY / self.dMs) * 0.5;
	
	    if (panning) {
	      self.endPanning();
	    } else if (zooming) {
	      self.endZooming();
	    } else {
	      self.endSwiping(swiping, scrolling);
	    }
	
	    return;
	  };
	
	  Guestures.prototype.endSwiping = function (swiping, scrolling) {
	    var self = this,
	      ret = false,
	      len = self.instance.group.length,
	      distanceX = Math.abs(self.distanceX),
	      canAdvance = swiping == "x" && len > 1 && ((self.dMs > 130 && distanceX > 10) || distanceX > 50),
	      speedX = 300;
	
	    self.sliderLastPos = null;
	
	    // Close if swiped vertically / navigate if horizontally
	    if (swiping == "y" && !scrolling && Math.abs(self.distanceY) > 50) {
	      // Continue vertical movement
	      $.fancybox.animate(
	        self.instance.current.$slide, {
	          top: self.sliderStartPos.top + self.distanceY + self.velocityY * 150,
	          opacity: 0
	        },
	        200
	      );
	      ret = self.instance.close(true, 250);
	    } else if (canAdvance && self.distanceX > 0) {
	      ret = self.instance.previous(speedX);
	    } else if (canAdvance && self.distanceX < 0) {
	      ret = self.instance.next(speedX);
	    }
	
	    if (ret === false && (swiping == "x" || swiping == "y")) {
	      self.instance.centerSlide(200);
	    }
	
	    self.$container.removeClass("fancybox-is-sliding");
	  };
	
	  // Limit panning from edges
	  // ========================
	  Guestures.prototype.endPanning = function () {
	    var self = this,
	      newOffsetX,
	      newOffsetY,
	      newPos;
	
	    if (!self.contentLastPos) {
	      return;
	    }
	
	    if (self.opts.momentum === false || self.dMs > 350) {
	      newOffsetX = self.contentLastPos.left;
	      newOffsetY = self.contentLastPos.top;
	    } else {
	      // Continue movement
	      newOffsetX = self.contentLastPos.left + self.velocityX * 500;
	      newOffsetY = self.contentLastPos.top + self.velocityY * 500;
	    }
	
	    newPos = self.limitPosition(newOffsetX, newOffsetY, self.contentStartPos.width, self.contentStartPos.height);
	
	    newPos.width = self.contentStartPos.width;
	    newPos.height = self.contentStartPos.height;
	
	    $.fancybox.animate(self.$content, newPos, 366);
	  };
	
	  Guestures.prototype.endZooming = function () {
	    var self = this;
	
	    var current = self.instance.current;
	
	    var newOffsetX, newOffsetY, newPos, reset;
	
	    var newWidth = self.newWidth;
	    var newHeight = self.newHeight;
	
	    if (!self.contentLastPos) {
	      return;
	    }
	
	    newOffsetX = self.contentLastPos.left;
	    newOffsetY = self.contentLastPos.top;
	
	    reset = {
	      top: newOffsetY,
	      left: newOffsetX,
	      width: newWidth,
	      height: newHeight,
	      scaleX: 1,
	      scaleY: 1
	    };
	
	    // Reset scalex/scaleY values; this helps for perfomance and does not break animation
	    $.fancybox.setTranslate(self.$content, reset);
	
	    if (newWidth < self.canvasWidth && newHeight < self.canvasHeight) {
	      self.instance.scaleToFit(150);
	    } else if (newWidth > current.width || newHeight > current.height) {
	      self.instance.scaleToActual(self.centerPointStartX, self.centerPointStartY, 150);
	    } else {
	      newPos = self.limitPosition(newOffsetX, newOffsetY, newWidth, newHeight);
	
	      $.fancybox.animate(self.$content, newPos, 150);
	    }
	  };
	
	  Guestures.prototype.onTap = function (e) {
	    var self = this;
	    var $target = $(e.target);
	
	    var instance = self.instance;
	    var current = instance.current;
	
	    var endPoints = (e && getPointerXY(e)) || self.startPoints;
	
	    var tapX = endPoints[0] ? endPoints[0].x - $(window).scrollLeft() - self.stagePos.left : 0;
	    var tapY = endPoints[0] ? endPoints[0].y - $(window).scrollTop() - self.stagePos.top : 0;
	
	    var where;
	
	    var process = function (prefix) {
	      var action = current.opts[prefix];
	
	      if ($.isFunction(action)) {
	        action = action.apply(instance, [current, e]);
	      }
	
	      if (!action) {
	        return;
	      }
	
	      switch (action) {
	        case "close":
	          instance.close(self.startEvent);
	
	          break;
	
	        case "toggleControls":
	          instance.toggleControls();
	
	          break;
	
	        case "next":
	          instance.next();
	
	          break;
	
	        case "nextOrClose":
	          if (instance.group.length > 1) {
	            instance.next();
	          } else {
	            instance.close(self.startEvent);
	          }
	
	          break;
	
	        case "zoom":
	          if (current.type == "image" && (current.isLoaded || current.$ghost)) {
	            if (instance.canPan()) {
	              instance.scaleToFit();
	            } else if (instance.isScaledDown()) {
	              instance.scaleToActual(tapX, tapY);
	            } else if (instance.group.length < 2) {
	              instance.close(self.startEvent);
	            }
	          }
	
	          break;
	      }
	    };
	
	    // Ignore right click
	    if (e.originalEvent && e.originalEvent.button == 2) {
	      return;
	    }
	
	    // Skip if clicked on the scrollbar
	    if (!$target.is("img") && tapX > $target[0].clientWidth + $target.offset().left) {
	      return;
	    }
	
	    // Check where is clicked
	    if ($target.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container")) {
	      where = "Outside";
	    } else if ($target.is(".fancybox-slide")) {
	      where = "Slide";
	    } else if (
	      instance.current.$content &&
	      instance.current.$content
	      .find($target)
	      .addBack()
	      .filter($target).length
	    ) {
	      where = "Content";
	    } else {
	      return;
	    }
	
	    // Check if this is a double tap
	    if (self.tapped) {
	      // Stop previously created single tap
	      clearTimeout(self.tapped);
	      self.tapped = null;
	
	      // Skip if distance between taps is too big
	      if (Math.abs(tapX - self.tapX) > 50 || Math.abs(tapY - self.tapY) > 50) {
	        return this;
	      }
	
	      // OK, now we assume that this is a double-tap
	      process("dblclick" + where);
	    } else {
	      // Single tap will be processed if user has not clicked second time within 300ms
	      // or there is no need to wait for double-tap
	      self.tapX = tapX;
	      self.tapY = tapY;
	
	      if (current.opts["dblclick" + where] && current.opts["dblclick" + where] !== current.opts["click" + where]) {
	        self.tapped = setTimeout(function () {
	          self.tapped = null;
	
	          if (!instance.isAnimating) {
	            process("click" + where);
	          }
	        }, 500);
	      } else {
	        process("click" + where);
	      }
	    }
	
	    return this;
	  };
	
	  $(document)
	    .on("onActivate.fb", function (e, instance) {
	      if (instance && !instance.Guestures) {
	        instance.Guestures = new Guestures(instance);
	      }
	    })
	    .on("beforeClose.fb", function (e, instance) {
	      if (instance && instance.Guestures) {
	        instance.Guestures.destroy();
	      }
	    });
	})(window, document, jQuery);
	// ==========================================================================
	//
	// SlideShow
	// Enables slideshow functionality
	//
	// Example of usage:
	// $.fancybox.getInstance().SlideShow.start()
	//
	// ==========================================================================
	(function (document, $) {
	  "use strict";
	
	  $.extend(true, $.fancybox.defaults, {
	    btnTpl: {
	      slideShow: '<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}">' +
	        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg>' +
	        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg>' +
	        "</button>"
	    },
	    slideShow: {
	      autoStart: false,
	      speed: 3000,
	      progress: true
	    }
	  });
	
	  var SlideShow = function (instance) {
	    this.instance = instance;
	    this.init();
	  };
	
	  $.extend(SlideShow.prototype, {
	    timer: null,
	    isActive: false,
	    $button: null,
	
	    init: function () {
	      var self = this,
	        instance = self.instance,
	        opts = instance.group[instance.currIndex].opts.slideShow;
	
	      self.$button = instance.$refs.toolbar.find("[data-fancybox-play]").on("click", function () {
	        self.toggle();
	      });
	
	      if (instance.group.length < 2 || !opts) {
	        self.$button.hide();
	      } else if (opts.progress) {
	        self.$progress = $('<div class="fancybox-progress"></div>').appendTo(instance.$refs.inner);
	      }
	    },
	
	    set: function (force) {
	      var self = this,
	        instance = self.instance,
	        current = instance.current;
	
	      // Check if reached last element
	      if (current && (force === true || current.opts.loop || instance.currIndex < instance.group.length - 1)) {
	        if (self.isActive && current.contentType !== "video") {
	          if (self.$progress) {
	            $.fancybox.animate(self.$progress.show(), {
	              scaleX: 1
	            }, current.opts.slideShow.speed);
	          }
	
	          self.timer = setTimeout(function () {
	            if (!instance.current.opts.loop && instance.current.index == instance.group.length - 1) {
	              instance.jumpTo(0);
	            } else {
	              instance.next();
	            }
	          }, current.opts.slideShow.speed);
	        }
	      } else {
	        self.stop();
	        instance.idleSecondsCounter = 0;
	        instance.showControls();
	      }
	    },
	
	    clear: function () {
	      var self = this;
	
	      clearTimeout(self.timer);
	
	      self.timer = null;
	
	      if (self.$progress) {
	        self.$progress.removeAttr("style").hide();
	      }
	    },
	
	    start: function () {
	      var self = this,
	        current = self.instance.current;
	
	      if (current) {
	        self.$button
	          .attr("title", (current.opts.i18n[current.opts.lang] || current.opts.i18n.en).PLAY_STOP)
	          .removeClass("fancybox-button--play")
	          .addClass("fancybox-button--pause");
	
	        self.isActive = true;
	
	        if (current.isComplete) {
	          self.set(true);
	        }
	
	        self.instance.trigger("onSlideShowChange", true);
	      }
	    },
	
	    stop: function () {
	      var self = this,
	        current = self.instance.current;
	
	      self.clear();
	
	      self.$button
	        .attr("title", (current.opts.i18n[current.opts.lang] || current.opts.i18n.en).PLAY_START)
	        .removeClass("fancybox-button--pause")
	        .addClass("fancybox-button--play");
	
	      self.isActive = false;
	
	      self.instance.trigger("onSlideShowChange", false);
	
	      if (self.$progress) {
	        self.$progress.removeAttr("style").hide();
	      }
	    },
	
	    toggle: function () {
	      var self = this;
	
	      if (self.isActive) {
	        self.stop();
	      } else {
	        self.start();
	      }
	    }
	  });
	
	  $(document).on({
	    "onInit.fb": function (e, instance) {
	      if (instance && !instance.SlideShow) {
	        instance.SlideShow = new SlideShow(instance);
	      }
	    },
	
	    "beforeShow.fb": function (e, instance, current, firstRun) {
	      var SlideShow = instance && instance.SlideShow;
	
	      if (firstRun) {
	        if (SlideShow && current.opts.slideShow.autoStart) {
	          SlideShow.start();
	        }
	      } else if (SlideShow && SlideShow.isActive) {
	        SlideShow.clear();
	      }
	    },
	
	    "afterShow.fb": function (e, instance, current) {
	      var SlideShow = instance && instance.SlideShow;
	
	      if (SlideShow && SlideShow.isActive) {
	        SlideShow.set();
	      }
	    },
	
	    "afterKeydown.fb": function (e, instance, current, keypress, keycode) {
	      var SlideShow = instance && instance.SlideShow;
	
	      // "P" or Spacebar
	      if (SlideShow && current.opts.slideShow && (keycode === 80 || keycode === 32) && !$(document.activeElement).is("button,a,input")) {
	        keypress.preventDefault();
	
	        SlideShow.toggle();
	      }
	    },
	
	    "beforeClose.fb onDeactivate.fb": function (e, instance) {
	      var SlideShow = instance && instance.SlideShow;
	
	      if (SlideShow) {
	        SlideShow.stop();
	      }
	    }
	  });
	
	  // Page Visibility API to pause slideshow when window is not active
	  $(document).on("visibilitychange", function () {
	    var instance = $.fancybox.getInstance(),
	      SlideShow = instance && instance.SlideShow;
	
	    if (SlideShow && SlideShow.isActive) {
	      if (document.hidden) {
	        SlideShow.clear();
	      } else {
	        SlideShow.set();
	      }
	    }
	  });
	})(document, jQuery);
	// ==========================================================================
	//
	// FullScreen
	// Adds fullscreen functionality
	//
	// ==========================================================================
	(function (document, $) {
	  "use strict";
	
	  // Collection of methods supported by user browser
	  var fn = (function () {
	    var fnMap = [
	      ["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"],
	      // new WebKit
	      [
	        "webkitRequestFullscreen",
	        "webkitExitFullscreen",
	        "webkitFullscreenElement",
	        "webkitFullscreenEnabled",
	        "webkitfullscreenchange",
	        "webkitfullscreenerror"
	      ],
	      // old WebKit (Safari 5.1)
	      [
	        "webkitRequestFullScreen",
	        "webkitCancelFullScreen",
	        "webkitCurrentFullScreenElement",
	        "webkitCancelFullScreen",
	        "webkitfullscreenchange",
	        "webkitfullscreenerror"
	      ],
	      [
	        "mozRequestFullScreen",
	        "mozCancelFullScreen",
	        "mozFullScreenElement",
	        "mozFullScreenEnabled",
	        "mozfullscreenchange",
	        "mozfullscreenerror"
	      ],
	      ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]
	    ];
	
	    var ret = {};
	
	    for (var i = 0; i < fnMap.length; i++) {
	      var val = fnMap[i];
	
	      if (val && val[1] in document) {
	        for (var j = 0; j < val.length; j++) {
	          ret[fnMap[0][j]] = val[j];
	        }
	
	        return ret;
	      }
	    }
	
	    return false;
	  })();
	
	  if (fn) {
	    var FullScreen = {
	      request: function (elem) {
	        elem = elem || document.documentElement;
	
	        elem[fn.requestFullscreen](elem.ALLOW_KEYBOARD_INPUT);
	      },
	      exit: function () {
	        document[fn.exitFullscreen]();
	      },
	      toggle: function (elem) {
	        elem = elem || document.documentElement;
	
	        if (this.isFullscreen()) {
	          this.exit();
	        } else {
	          this.request(elem);
	        }
	      },
	      isFullscreen: function () {
	        return Boolean(document[fn.fullscreenElement]);
	      },
	      enabled: function () {
	        return Boolean(document[fn.fullscreenEnabled]);
	      }
	    };
	
	    $.extend(true, $.fancybox.defaults, {
	      btnTpl: {
	        fullScreen: '<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}">' +
	          '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg>' +
	          '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg>' +
	          "</button>"
	      },
	      fullScreen: {
	        autoStart: false
	      }
	    });
	
	    $(document).on(fn.fullscreenchange, function () {
	      var isFullscreen = FullScreen.isFullscreen(),
	        instance = $.fancybox.getInstance();
	
	      if (instance) {
	        // If image is zooming, then force to stop and reposition properly
	        if (instance.current && instance.current.type === "image" && instance.isAnimating) {
	          instance.isAnimating = false;
	
	          instance.update(true, true, 0);
	
	          if (!instance.isComplete) {
	            instance.complete();
	          }
	        }
	
	        instance.trigger("onFullscreenChange", isFullscreen);
	
	        instance.$refs.container.toggleClass("fancybox-is-fullscreen", isFullscreen);
	
	        instance.$refs.toolbar
	          .find("[data-fancybox-fullscreen]")
	          .toggleClass("fancybox-button--fsenter", !isFullscreen)
	          .toggleClass("fancybox-button--fsexit", isFullscreen);
	      }
	    });
	  }
	
	  $(document).on({
	    "onInit.fb": function (e, instance) {
	      var $container;
	
	      if (!fn) {
	        instance.$refs.toolbar.find("[data-fancybox-fullscreen]").remove();
	
	        return;
	      }
	
	      if (instance && instance.group[instance.currIndex].opts.fullScreen) {
	        $container = instance.$refs.container;
	
	        $container.on("click.fb-fullscreen", "[data-fancybox-fullscreen]", function (e) {
	          e.stopPropagation();
	          e.preventDefault();
	
	          FullScreen.toggle();
	        });
	
	        if (instance.opts.fullScreen && instance.opts.fullScreen.autoStart === true) {
	          FullScreen.request();
	        }
	
	        // Expose API
	        instance.FullScreen = FullScreen;
	      } else if (instance) {
	        instance.$refs.toolbar.find("[data-fancybox-fullscreen]").hide();
	      }
	    },
	
	    "afterKeydown.fb": function (e, instance, current, keypress, keycode) {
	      // "F"
	      if (instance && instance.FullScreen && keycode === 70) {
	        keypress.preventDefault();
	
	        instance.FullScreen.toggle();
	      }
	    },
	
	    "beforeClose.fb": function (e, instance) {
	      if (instance && instance.FullScreen && instance.$refs.container.hasClass("fancybox-is-fullscreen")) {
	        FullScreen.exit();
	      }
	    }
	  });
	})(document, jQuery);
	// ==========================================================================
	//
	// Thumbs
	// Displays thumbnails in a grid
	//
	// ==========================================================================
	(function (document, $) {
	  "use strict";
	
	  var CLASS = "fancybox-thumbs",
	    CLASS_ACTIVE = CLASS + "-active";
	
	  // Make sure there are default values
	  $.fancybox.defaults = $.extend(
	    true, {
	      btnTpl: {
	        thumbs: '<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}">' +
	          '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg>' +
	          "</button>"
	      },
	      thumbs: {
	        autoStart: false, // Display thumbnails on opening
	        hideOnClose: true, // Hide thumbnail grid when closing animation starts
	        parentEl: ".fancybox-container", // Container is injected into this element
	        axis: "y" // Vertical (y) or horizontal (x) scrolling
	      }
	    },
	    $.fancybox.defaults
	  );
	
	  var FancyThumbs = function (instance) {
	    this.init(instance);
	  };
	
	  $.extend(FancyThumbs.prototype, {
	    $button: null,
	    $grid: null,
	    $list: null,
	    isVisible: false,
	    isActive: false,
	
	    init: function (instance) {
	      var self = this,
	        group = instance.group,
	        enabled = 0;
	
	      self.instance = instance;
	      self.opts = group[instance.currIndex].opts.thumbs;
	
	      instance.Thumbs = self;
	
	      self.$button = instance.$refs.toolbar.find("[data-fancybox-thumbs]");
	
	      // Enable thumbs if at least two group items have thumbnails
	      for (var i = 0, len = group.length; i < len; i++) {
	        if (group[i].thumb) {
	          enabled++;
	        }
	
	        if (enabled > 1) {
	          break;
	        }
	      }
	
	      if (enabled > 1 && !!self.opts) {
	        self.$button.removeAttr("style").on("click", function () {
	          self.toggle();
	        });
	
	        self.isActive = true;
	      } else {
	        self.$button.hide();
	      }
	    },
	
	    create: function () {
	      var self = this,
	        instance = self.instance,
	        parentEl = self.opts.parentEl,
	        list = [],
	        src;
	
	      if (!self.$grid) {
	        // Create main element
	        self.$grid = $('<div class="' + CLASS + " " + CLASS + "-" + self.opts.axis + '"></div>').appendTo(
	          instance.$refs.container
	          .find(parentEl)
	          .addBack()
	          .filter(parentEl)
	        );
	
	        // Add "click" event that performs gallery navigation
	        self.$grid.on("click", "a", function () {
	          instance.jumpTo($(this).attr("data-index"));
	        });
	      }
	
	      // Build the list
	      if (!self.$list) {
	        self.$list = $('<div class="' + CLASS + '__list">').appendTo(self.$grid);
	      }
	
	      $.each(instance.group, function (i, item) {
	        src = item.thumb;
	
	        if (!src && item.type === "image") {
	          src = item.src;
	        }
	
	        list.push(
	          '<a href="javascript:;" tabindex="0" data-index="' +
	          i +
	          '"' +
	          (src && src.length ? ' style="background-image:url(' + src + ')"' : 'class="fancybox-thumbs-missing"') +
	          "></a>"
	        );
	      });
	
	      self.$list[0].innerHTML = list.join("");
	
	      if (self.opts.axis === "x") {
	        // Set fixed width for list element to enable horizontal scrolling
	        self.$list.width(
	          parseInt(self.$grid.css("padding-right"), 10) +
	          instance.group.length *
	          self.$list
	          .children()
	          .eq(0)
	          .outerWidth(true)
	        );
	      }
	    },
	
	    focus: function (duration) {
	      var self = this,
	        $list = self.$list,
	        $grid = self.$grid,
	        thumb,
	        thumbPos;
	
	      if (!self.instance.current) {
	        return;
	      }
	
	      thumb = $list
	        .children()
	        .removeClass(CLASS_ACTIVE)
	        .filter('[data-index="' + self.instance.current.index + '"]')
	        .addClass(CLASS_ACTIVE);
	
	      thumbPos = thumb.position();
	
	      // Check if need to scroll to make current thumb visible
	      if (self.opts.axis === "y" && (thumbPos.top < 0 || thumbPos.top > $list.height() - thumb.outerHeight())) {
	        $list.stop().animate({
	            scrollTop: $list.scrollTop() + thumbPos.top
	          },
	          duration
	        );
	      } else if (
	        self.opts.axis === "x" &&
	        (thumbPos.left < $grid.scrollLeft() || thumbPos.left > $grid.scrollLeft() + ($grid.width() - thumb.outerWidth()))
	      ) {
	        $list
	          .parent()
	          .stop()
	          .animate({
	              scrollLeft: thumbPos.left
	            },
	            duration
	          );
	      }
	    },
	
	    update: function () {
	      var that = this;
	      that.instance.$refs.container.toggleClass("fancybox-show-thumbs", this.isVisible);
	
	      if (that.isVisible) {
	        if (!that.$grid) {
	          that.create();
	        }
	
	        that.instance.trigger("onThumbsShow");
	
	        that.focus(0);
	      } else if (that.$grid) {
	        that.instance.trigger("onThumbsHide");
	      }
	
	      // Update content position
	      that.instance.update();
	    },
	
	    hide: function () {
	      this.isVisible = false;
	      this.update();
	    },
	
	    show: function () {
	      this.isVisible = true;
	      this.update();
	    },
	
	    toggle: function () {
	      this.isVisible = !this.isVisible;
	      this.update();
	    }
	  });
	
	  $(document).on({
	    "onInit.fb": function (e, instance) {
	      var Thumbs;
	
	      if (instance && !instance.Thumbs) {
	        Thumbs = new FancyThumbs(instance);
	
	        if (Thumbs.isActive && Thumbs.opts.autoStart === true) {
	          Thumbs.show();
	        }
	      }
	    },
	
	    "beforeShow.fb": function (e, instance, item, firstRun) {
	      var Thumbs = instance && instance.Thumbs;
	
	      if (Thumbs && Thumbs.isVisible) {
	        Thumbs.focus(firstRun ? 0 : 250);
	      }
	    },
	
	    "afterKeydown.fb": function (e, instance, current, keypress, keycode) {
	      var Thumbs = instance && instance.Thumbs;
	
	      // "G"
	      if (Thumbs && Thumbs.isActive && keycode === 71) {
	        keypress.preventDefault();
	
	        Thumbs.toggle();
	      }
	    },
	
	    "beforeClose.fb": function (e, instance) {
	      var Thumbs = instance && instance.Thumbs;
	
	      if (Thumbs && Thumbs.isVisible && Thumbs.opts.hideOnClose !== false) {
	        Thumbs.$grid.hide();
	      }
	    }
	  });
	})(document, jQuery);
	//// ==========================================================================
	//
	// Share
	// Displays simple form for sharing current url
	//
	// ==========================================================================
	(function (document, $) {
	  "use strict";
	
	  $.extend(true, $.fancybox.defaults, {
	    btnTpl: {
	      share: '<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}">' +
	        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg>' +
	        "</button>"
	    },
	    share: {
	      url: function (instance, item) {
	        return (
	          (!instance.currentHash && !(item.type === "inline" || item.type === "html") ? item.origSrc || item.src : false) || window.location
	        );
	      },
	      tpl: '<div class="fancybox-share">' +
	        "<h1>{{SHARE}}</h1>" +
	        "<p>" +
	        '<a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}">' +
	        '<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg>' +
	        "<span>Facebook</span>" +
	        "</a>" +
	        '<a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}">' +
	        '<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg>' +
	        "<span>Twitter</span>" +
	        "</a>" +
	        '<a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}">' +
	        '<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg>' +
	        "<span>Pinterest</span>" +
	        "</a>" +
	        "</p>" +
	        '<p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p>' +
	        "</div>"
	    }
	  });
	
	  function escapeHtml(string) {
	    var entityMap = {
	      "&": "&amp;",
	      "<": "&lt;",
	      ">": "&gt;",
	      '"': "&quot;",
	      "'": "&#39;",
	      "/": "&#x2F;",
	      "`": "&#x60;",
	      "=": "&#x3D;"
	    };
	
	    return String(string).replace(/[&<>"'`=\/]/g, function (s) {
	      return entityMap[s];
	    });
	  }
	
	  $(document).on("click", "[data-fancybox-share]", function () {
	    var instance = $.fancybox.getInstance(),
	      current = instance.current || null,
	      url,
	      tpl;
	
	    if (!current) {
	      return;
	    }
	
	    if ($.type(current.opts.share.url) === "function") {
	      url = current.opts.share.url.apply(current, [instance, current]);
	    }
	
	    tpl = current.opts.share.tpl
	      .replace(/\{\{media\}\}/g, current.type === "image" ? encodeURIComponent(current.src) : "")
	      .replace(/\{\{url\}\}/g, encodeURIComponent(url))
	      .replace(/\{\{url_raw\}\}/g, escapeHtml(url))
	      .replace(/\{\{descr\}\}/g, instance.$caption ? encodeURIComponent(instance.$caption.text()) : "");
	
	    $.fancybox.open({
	      src: instance.translate(instance, tpl),
	      type: "html",
	      opts: {
	        touch: false,
	        animationEffect: false,
	        afterLoad: function (shareInstance, shareCurrent) {
	          // Close self if parent instance is closing
	          instance.$refs.container.one("beforeClose.fb", function () {
	            shareInstance.close(null, 0);
	          });
	
	          // Opening links in a popup window
	          shareCurrent.$content.find(".fancybox-share__button").click(function () {
	            window.open(this.href, "Share", "width=550, height=450");
	            return false;
	          });
	        },
	        mobile: {
	          autoFocus: false
	        }
	      }
	    });
	  });
	})(document, jQuery);
	// ==========================================================================
	//
	// Hash
	// Enables linking to each modal
	//
	// ==========================================================================
	(function (window, document, $) {
	  "use strict";
	
	  // Simple $.escapeSelector polyfill (for jQuery prior v3)
	  if (!$.escapeSelector) {
	    $.escapeSelector = function (sel) {
	      var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
	      var fcssescape = function (ch, asCodePoint) {
	        if (asCodePoint) {
	          // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
	          if (ch === "\0") {
	            return "\uFFFD";
	          }
	
	          // Control characters and (dependent upon position) numbers get escaped as code points
	          return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
	        }
	
	        // Other potentially-special ASCII characters get backslash-escaped
	        return "\\" + ch;
	      };
	
	      return (sel + "").replace(rcssescape, fcssescape);
	    };
	  }
	
	  // Get info about gallery name and current index from url
	  function parseUrl() {
	    var hash = window.location.hash.substr(1),
	      rez = hash.split("-"),
	      index = rez.length > 1 && /^\+?\d+$/.test(rez[rez.length - 1]) ? parseInt(rez.pop(-1), 10) || 1 : 1,
	      gallery = rez.join("-");
	
	    return {
	      hash: hash,
	      /* Index is starting from 1 */
	      index: index < 1 ? 1 : index,
	      gallery: gallery
	    };
	  }
	
	  // Trigger click evnt on links to open new fancyBox instance
	  function triggerFromUrl(url) {
	    if (url.gallery !== "") {
	      // If we can find element matching 'data-fancybox' atribute,
	      // then triggering click event should start fancyBox
	      $("[data-fancybox='" + $.escapeSelector(url.gallery) + "']")
	        .eq(url.index - 1)
	        .focus()
	        .trigger("click.fb-start");
	    }
	  }
	
	  // Get gallery name from current instance
	  function getGalleryID(instance) {
	    var opts, ret;
	
	    if (!instance) {
	      return false;
	    }
	
	    opts = instance.current ? instance.current.opts : instance.opts;
	    ret = opts.hash || (opts.$orig ? opts.$orig.data("fancybox") || opts.$orig.data("fancybox-trigger") : "");
	
	    return ret === "" ? false : ret;
	  }
	
	  // Start when DOM becomes ready
	  $(function () {
	    // Check if user has disabled this module
	    if ($.fancybox.defaults.hash === false) {
	      return;
	    }
	
	    // Update hash when opening/closing fancyBox
	    $(document).on({
	      "onInit.fb": function (e, instance) {
	        var url, gallery;
	
	        if (instance.group[instance.currIndex].opts.hash === false) {
	          return;
	        }
	
	        url = parseUrl();
	        gallery = getGalleryID(instance);
	
	        // Make sure gallery start index matches index from hash
	        if (gallery && url.gallery && gallery == url.gallery) {
	          instance.currIndex = url.index - 1;
	        }
	      },
	
	      "beforeShow.fb": function (e, instance, current, firstRun) {
	        var gallery;
	
	        if (!current || current.opts.hash === false) {
	          return;
	        }
	
	        // Check if need to update window hash
	        gallery = getGalleryID(instance);
	
	        if (!gallery) {
	          return;
	        }
	
	        // Variable containing last hash value set by fancyBox
	        // It will be used to determine if fancyBox needs to close after hash change is detected
	        instance.currentHash = gallery + (instance.group.length > 1 ? "-" + (current.index + 1) : "");
	
	        // If current hash is the same (this instance most likely is opened by hashchange), then do nothing
	        if (window.location.hash === "#" + instance.currentHash) {
	          return;
	        }
	
	        if (firstRun && !instance.origHash) {
	          instance.origHash = window.location.hash;
	        }
	
	        if (instance.hashTimer) {
	          clearTimeout(instance.hashTimer);
	        }
	
	        // Update hash
	        instance.hashTimer = setTimeout(function () {
	          if ("replaceState" in window.history) {
	            window.history[firstRun ? "pushState" : "replaceState"]({},
	              document.title,
	              window.location.pathname + window.location.search + "#" + instance.currentHash
	            );
	
	            if (firstRun) {
	              instance.hasCreatedHistory = true;
	            }
	          } else {
	            window.location.hash = instance.currentHash;
	          }
	
	          instance.hashTimer = null;
	        }, 300);
	      },
	
	      "beforeClose.fb": function (e, instance, current) {
	        if (!current || current.opts.hash === false) {
	          return;
	        }
	
	        clearTimeout(instance.hashTimer);
	
	        // Goto previous history entry
	        if (instance.currentHash && instance.hasCreatedHistory) {
	          window.history.back();
	        } else if (instance.currentHash) {
	          if ("replaceState" in window.history) {
	            window.history.replaceState({}, document.title, window.location.pathname + window.location.search + (instance.origHash || ""));
	          } else {
	            window.location.hash = instance.origHash;
	          }
	        }
	
	        instance.currentHash = null;
	      }
	    });
	
	    // Check if need to start/close after url has changed
	    $(window).on("hashchange.fb", function () {
	      var url = parseUrl(),
	        fb = null;
	
	      // Find last fancyBox instance that has "hash"
	      $.each(
	        $(".fancybox-container")
	        .get()
	        .reverse(),
	        function (index, value) {
	          var tmp = $(value).data("FancyBox");
	
	          if (tmp && tmp.currentHash) {
	            fb = tmp;
	            return false;
	          }
	        }
	      );
	
	      if (fb) {
	        // Now, compare hash values
	        if (fb.currentHash !== url.gallery + "-" + url.index && !(url.index === 1 && fb.currentHash == url.gallery)) {
	          fb.currentHash = null;
	
	          fb.close();
	        }
	      } else if (url.gallery !== "") {
	        triggerFromUrl(url);
	      }
	    });
	
	    // Check current hash and trigger click event on matching element to start fancyBox, if needed
	    setTimeout(function () {
	      if (!$.fancybox.getInstance()) {
	        triggerFromUrl(parseUrl());
	      }
	    }, 50);
	  });
	})(window, document, jQuery);
	// ==========================================================================
	//
	// Wheel
	// Basic mouse weheel support for gallery navigation
	//
	// ==========================================================================
	(function (document, $) {
	  "use strict";
	
	  var prevTime = new Date().getTime();
	
	  $(document).on({
	    "onInit.fb": function (e, instance, current) {
	      instance.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll", function (e) {
	        var current = instance.current,
	          currTime = new Date().getTime();
	
	        if (instance.group.length < 2 || current.opts.wheel === false || (current.opts.wheel === "auto" && current.type !== "image")) {
	          return;
	        }
	
	        e.preventDefault();
	        e.stopPropagation();
	
	        if (current.$slide.hasClass("fancybox-animated")) {
	          return;
	        }
	
	        e = e.originalEvent || e;
	
	        if (currTime - prevTime < 250) {
	          return;
	        }
	
	        prevTime = currTime;
	
	        instance[(-e.deltaY || -e.deltaX || e.wheelDelta || -e.detail) < 0 ? "next" : "previous"]();
	      });
	    }
	  });
	})(document, jQuery);

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	var require;var require;!function(e){if(true)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.Cocoen=e()}}(function(){return function e(t,n,i){function s(o,a){if(!n[o]){if(!t[o]){var l="function"==typeof require&&require;if(!a&&l)return require(o,!0);if(r)return r(o,!0);var d=new Error("Cannot find module '"+o+"'");throw d.code="MODULE_NOT_FOUND",d}var h=n[o]={exports:{}};t[o][0].call(h.exports,function(e){var n=t[o][1][e];return s(n?n:e)},h,h.exports,e,t,n,i)}return n[o].exports}for(var r="function"==typeof require&&require,o=0;o<i.length;o++)s(i[o]);return s}({1:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(t,n){i(this,e),this.options=s({},e.defaults,n),this.element=t||document.querySelector(".cocoen"),this.init()}return r(e,[{key:"init",value:function(){this.createElements(),this.addEventListeners(),this.dimensions()}},{key:"createElements",value:function(){var e=document.createElement("span");e.className=this.options.dragElementSelector.replace(".",""),this.element.appendChild(e);var t=document.createElement("div"),n=this.element.querySelector("img:first-child");t.appendChild(n.cloneNode(!0)),n.parentNode.replaceChild(t,n),this.dragElement=this.element.querySelector(this.options.dragElementSelector),this.beforeElement=this.element.querySelector("div:first-child"),this.beforeImage=this.beforeElement.querySelector("img")}},{key:"addEventListeners",value:function(){this.element.addEventListener("click",this.onTap.bind(this)),this.element.addEventListener("mousemove",this.onDrag.bind(this)),this.element.addEventListener("touchmove",this.onDrag.bind(this)),this.dragElement.addEventListener("mousedown",this.onDragStart.bind(this)),this.dragElement.addEventListener("touchstart",this.onDragStart.bind(this)),window.addEventListener("mouseup",this.onDragEnd.bind(this)),window.addEventListener("resize",this.dimensions.bind(this))}},{key:"dimensions",value:function(){this.elementWidth=parseInt(window.getComputedStyle(this.element).width,10),this.elementOffsetLeft=this.element.getBoundingClientRect().left+document.body.scrollLeft,this.beforeImage.style.width=this.elementWidth+"px",this.dragElementWidth=parseInt(window.getComputedStyle(this.dragElement).width,10),this.minLeftPos=this.elementOffsetLeft+10,this.maxLeftPos=this.elementOffsetLeft+this.elementWidth-this.dragElementWidth-10}},{key:"onTap",value:function(e){e.preventDefault(),this.leftPos=e.pageX?e.pageX:e.touches[0].pageX,this.requestDrag()}},{key:"onDragStart",value:function(e){e.preventDefault();var t=e.pageX?e.pageX:e.touches[0].pageX,n=this.dragElement.getBoundingClientRect().left+document.body.scrollLeft;this.posX=n+this.dragElementWidth-t,this.isDragging=!0}},{key:"onDragEnd",value:function(e){e.preventDefault(),this.isDragging=!1}},{key:"onDrag",value:function(e){e.preventDefault(),this.isDragging&&(this.moveX=e.pageX?e.pageX:e.touches[0].pageX,this.leftPos=this.moveX+this.posX-this.dragElementWidth,this.requestDrag())}},{key:"drag",value:function(){this.leftPos<this.minLeftPos?this.leftPos=this.minLeftPos:this.leftPos>this.maxLeftPos&&(this.leftPos=this.maxLeftPos);var e=this.leftPos+this.dragElementWidth/2-this.elementOffsetLeft;e/=this.elementWidth;var t=100*e+"%";this.dragElement.style.left=t,this.beforeElement.style.width=t,this.options.dragCallback&&this.options.dragCallback(e)}},{key:"requestDrag",value:function(){window.requestAnimationFrame(this.drag.bind(this))}}]),e}();o.defaults={dragElementSelector:".cocoen-drag",dragCallback:null},t.exports=o},{}]},{},[1])(1)});

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(65);


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * dist/inputmask
	 * https://github.com/RobinHerbots/Inputmask
	 * Copyright (c) 2010 - 2020 Robin Herbots
	 * Licensed under the MIT license
	 * Version: 5.0.5-beta.0
	 */
	!function webpackUniversalModuleDefinition(root, factory) {
	    if (true) module.exports = factory(); else if ("function" == typeof define && define.amd) define([], factory); else {
	        var a = factory();
	        for (var i in a) ("object" == typeof exports ? exports : root)[i] = a[i];
	    }
	}(window, function() {
	    return modules = [ function(module) {
	        module.exports = JSON.parse('{"BACKSPACE":8,"BACKSPACE_SAFARI":127,"DELETE":46,"DOWN":40,"END":35,"ENTER":13,"ESCAPE":27,"HOME":36,"INSERT":45,"LEFT":37,"PAGE_DOWN":34,"PAGE_UP":33,"RIGHT":39,"SPACE":32,"TAB":9,"UP":38,"X":88,"CONTROL":17,"KEY_229":229}');
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.default = void 0, __webpack_require__(10);
	        var _mask = __webpack_require__(11), _inputmask = _interopRequireDefault(__webpack_require__(9)), _window = _interopRequireDefault(__webpack_require__(6)), _maskLexer = __webpack_require__(19), _validationTests = __webpack_require__(3), _positioning = __webpack_require__(2), _validation = __webpack_require__(4), _inputHandling = __webpack_require__(5), _eventruler = __webpack_require__(12), _definitions = _interopRequireDefault(__webpack_require__(20)), _defaults = _interopRequireDefault(__webpack_require__(21));
	        function _typeof(obj) {
	            return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function _typeof(obj) {
	                return typeof obj;
	            } : function _typeof(obj) {
	                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	            }, _typeof(obj);
	        }
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        var document = _window.default.document, dataKey = "_inputmask_opts";
	        function Inputmask(alias, options, internal) {
	            if (!(this instanceof Inputmask)) return new Inputmask(alias, options, internal);
	            this.dependencyLib = _inputmask.default, this.el = void 0, this.events = {}, this.maskset = void 0, 
	            !0 !== internal && ("[object Object]" === Object.prototype.toString.call(alias) ? options = alias : (options = options || {}, 
	            alias && (options.alias = alias)), this.opts = _inputmask.default.extend(!0, {}, this.defaults, options), 
	            this.noMasksCache = options && void 0 !== options.definitions, this.userOptions = options || {}, 
	            resolveAlias(this.opts.alias, options, this.opts)), this.refreshValue = !1, this.undoValue = void 0, 
	            this.$el = void 0, this.skipKeyPressEvent = !1, this.skipInputEvent = !1, this.validationEvent = !1, 
	            this.ignorable = !1, this.maxLength, this.mouseEnter = !1, this.originalPlaceholder = void 0, 
	            this.isComposing = !1;
	        }
	        function resolveAlias(aliasStr, options, opts) {
	            var aliasDefinition = Inputmask.prototype.aliases[aliasStr];
	            return aliasDefinition ? (aliasDefinition.alias && resolveAlias(aliasDefinition.alias, void 0, opts), 
	            _inputmask.default.extend(!0, opts, aliasDefinition), _inputmask.default.extend(!0, opts, options), 
	            !0) : (null === opts.mask && (opts.mask = aliasStr), !1);
	        }
	        function importAttributeOptions(npt, opts, userOptions, dataAttribute) {
	            function importOption(option, optionData) {
	                var attrOption = "" === dataAttribute ? option : dataAttribute + "-" + option;
	                optionData = void 0 !== optionData ? optionData : npt.getAttribute(attrOption), 
	                null !== optionData && ("string" == typeof optionData && (0 === option.indexOf("on") ? optionData = _window.default[optionData] : "false" === optionData ? optionData = !1 : "true" === optionData && (optionData = !0)), 
	                userOptions[option] = optionData);
	            }
	            if (!0 === opts.importDataAttributes) {
	                var attrOptions = npt.getAttribute(dataAttribute), option, dataoptions, optionData, p;
	                if (attrOptions && "" !== attrOptions && (attrOptions = attrOptions.replace(/'/g, '"'), 
	                dataoptions = JSON.parse("{" + attrOptions + "}")), dataoptions) for (p in optionData = void 0, 
	                dataoptions) if ("alias" === p.toLowerCase()) {
	                    optionData = dataoptions[p];
	                    break;
	                }
	                for (option in importOption("alias", optionData), userOptions.alias && resolveAlias(userOptions.alias, userOptions, opts), 
	                opts) {
	                    if (dataoptions) for (p in optionData = void 0, dataoptions) if (p.toLowerCase() === option.toLowerCase()) {
	                        optionData = dataoptions[p];
	                        break;
	                    }
	                    importOption(option, optionData);
	                }
	            }
	            return _inputmask.default.extend(!0, opts, userOptions), "rtl" !== npt.dir && !opts.rightAlign || (npt.style.textAlign = "right"), 
	            "rtl" !== npt.dir && !opts.numericInput || (npt.dir = "ltr", npt.removeAttribute("dir"), 
	            opts.isRTL = !0), Object.keys(userOptions).length;
	        }
	        Inputmask.prototype = {
	            dataAttribute: "data-inputmask",
	            defaults: _defaults.default,
	            definitions: _definitions.default,
	            aliases: {},
	            masksCache: {},
	            get isRTL() {
	                return this.opts.isRTL || this.opts.numericInput;
	            },
	            mask: function mask(elems) {
	                var that = this;
	                return "string" == typeof elems && (elems = document.getElementById(elems) || document.querySelectorAll(elems)), 
	                elems = elems.nodeName ? [ elems ] : elems, elems.forEach(function(el, ndx) {
	                    var scopedOpts = _inputmask.default.extend(!0, {}, that.opts);
	                    if (importAttributeOptions(el, scopedOpts, _inputmask.default.extend(!0, {}, that.userOptions), that.dataAttribute)) {
	                        var maskset = (0, _maskLexer.generateMaskSet)(scopedOpts, that.noMasksCache);
	                        void 0 !== maskset && (void 0 !== el.inputmask && (el.inputmask.opts.autoUnmask = !0, 
	                        el.inputmask.remove()), el.inputmask = new Inputmask(void 0, void 0, !0), el.inputmask.opts = scopedOpts, 
	                        el.inputmask.noMasksCache = that.noMasksCache, el.inputmask.userOptions = _inputmask.default.extend(!0, {}, that.userOptions), 
	                        el.inputmask.el = el, el.inputmask.$el = (0, _inputmask.default)(el), el.inputmask.maskset = maskset, 
	                        _inputmask.default.data(el, dataKey, that.userOptions), _mask.mask.call(el.inputmask));
	                    }
	                }), elems && elems[0] && elems[0].inputmask || this;
	            },
	            option: function option(options, noremask) {
	                return "string" == typeof options ? this.opts[options] : "object" === _typeof(options) ? (_inputmask.default.extend(this.userOptions, options), 
	                this.el && !0 !== noremask && this.mask(this.el), this) : void 0;
	            },
	            unmaskedvalue: function unmaskedvalue(value) {
	                if (this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache), 
	                void 0 === this.el || void 0 !== value) {
	                    var valueBuffer = ("function" == typeof this.opts.onBeforeMask && this.opts.onBeforeMask.call(this, value, this.opts) || value).split("");
	                    _inputHandling.checkVal.call(this, void 0, !1, !1, valueBuffer), "function" == typeof this.opts.onBeforeWrite && this.opts.onBeforeWrite.call(this, void 0, _positioning.getBuffer.call(this), 0, this.opts);
	                }
	                return _inputHandling.unmaskedvalue.call(this, this.el);
	            },
	            remove: function remove() {
	                if (this.el) {
	                    _inputmask.default.data(this.el, dataKey, null);
	                    var cv = this.opts.autoUnmask ? (0, _inputHandling.unmaskedvalue)(this.el) : this._valueGet(this.opts.autoUnmask), valueProperty;
	                    cv !== _positioning.getBufferTemplate.call(this).join("") ? this._valueSet(cv, this.opts.autoUnmask) : this._valueSet(""), 
	                    _eventruler.EventRuler.off(this.el), Object.getOwnPropertyDescriptor && Object.getPrototypeOf ? (valueProperty = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.el), "value"), 
	                    valueProperty && this.__valueGet && Object.defineProperty(this.el, "value", {
	                        get: this.__valueGet,
	                        set: this.__valueSet,
	                        configurable: !0
	                    })) : document.__lookupGetter__ && this.el.__lookupGetter__("value") && this.__valueGet && (this.el.__defineGetter__("value", this.__valueGet), 
	                    this.el.__defineSetter__("value", this.__valueSet)), this.el.inputmask = void 0;
	                }
	                return this.el;
	            },
	            getemptymask: function getemptymask() {
	                return this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache), 
	                _positioning.getBufferTemplate.call(this).join("");
	            },
	            hasMaskedValue: function hasMaskedValue() {
	                return !this.opts.autoUnmask;
	            },
	            isComplete: function isComplete() {
	                return this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache), 
	                _validation.isComplete.call(this, _positioning.getBuffer.call(this));
	            },
	            getmetadata: function getmetadata() {
	                if (this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache), 
	                Array.isArray(this.maskset.metadata)) {
	                    var maskTarget = _validationTests.getMaskTemplate.call(this, !0, 0, !1).join("");
	                    return this.maskset.metadata.forEach(function(mtdt) {
	                        return mtdt.mask !== maskTarget || (maskTarget = mtdt, !1);
	                    }), maskTarget;
	                }
	                return this.maskset.metadata;
	            },
	            isValid: function isValid(value) {
	                if (this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache), 
	                value) {
	                    var valueBuffer = ("function" == typeof this.opts.onBeforeMask && this.opts.onBeforeMask.call(this, value, this.opts) || value).split("");
	                    _inputHandling.checkVal.call(this, void 0, !0, !1, valueBuffer);
	                } else value = this.isRTL ? _positioning.getBuffer.call(this).slice().reverse().join("") : _positioning.getBuffer.call(this).join("");
	                for (var buffer = _positioning.getBuffer.call(this), rl = _positioning.determineLastRequiredPosition.call(this), lmib = buffer.length - 1; rl < lmib && !_positioning.isMask.call(this, lmib); lmib--) ;
	                return buffer.splice(rl, lmib + 1 - rl), _validation.isComplete.call(this, buffer) && value === (this.isRTL ? _positioning.getBuffer.call(this).slice().reverse().join("") : _positioning.getBuffer.call(this).join(""));
	            },
	            format: function format(value, metadata) {
	                this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache);
	                var valueBuffer = ("function" == typeof this.opts.onBeforeMask && this.opts.onBeforeMask.call(this, value, this.opts) || value).split("");
	                _inputHandling.checkVal.call(this, void 0, !0, !1, valueBuffer);
	                var formattedValue = this.isRTL ? _positioning.getBuffer.call(this).slice().reverse().join("") : _positioning.getBuffer.call(this).join("");
	                return metadata ? {
	                    value: formattedValue,
	                    metadata: this.getmetadata()
	                } : formattedValue;
	            },
	            setValue: function setValue(value) {
	                this.el && (0, _inputmask.default)(this.el).trigger("setvalue", [ value ]);
	            },
	            analyseMask: _maskLexer.analyseMask
	        }, Inputmask.extendDefaults = function(options) {
	            _inputmask.default.extend(!0, Inputmask.prototype.defaults, options);
	        }, Inputmask.extendDefinitions = function(definition) {
	            _inputmask.default.extend(!0, Inputmask.prototype.definitions, definition);
	        }, Inputmask.extendAliases = function(alias) {
	            _inputmask.default.extend(!0, Inputmask.prototype.aliases, alias);
	        }, Inputmask.format = function(value, options, metadata) {
	            return Inputmask(options).format(value, metadata);
	        }, Inputmask.unmask = function(value, options) {
	            return Inputmask(options).unmaskedvalue(value);
	        }, Inputmask.isValid = function(value, options) {
	            return Inputmask(options).isValid(value);
	        }, Inputmask.remove = function(elems) {
	            "string" == typeof elems && (elems = document.getElementById(elems) || document.querySelectorAll(elems)), 
	            elems = elems.nodeName ? [ elems ] : elems, elems.forEach(function(el) {
	                el.inputmask && el.inputmask.remove();
	            });
	        }, Inputmask.setValue = function(elems, value) {
	            "string" == typeof elems && (elems = document.getElementById(elems) || document.querySelectorAll(elems)), 
	            elems = elems.nodeName ? [ elems ] : elems, elems.forEach(function(el) {
	                el.inputmask ? el.inputmask.setValue(value) : (0, _inputmask.default)(el).trigger("setvalue", [ value ]);
	            });
	        }, Inputmask.dependencyLib = _inputmask.default, _window.default.Inputmask = Inputmask;
	        var _default = Inputmask;
	        exports.default = _default;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.caret = caret, exports.determineLastRequiredPosition = determineLastRequiredPosition, 
	        exports.determineNewCaretPosition = determineNewCaretPosition, exports.getBuffer = getBuffer, 
	        exports.getBufferTemplate = getBufferTemplate, exports.getLastValidPosition = getLastValidPosition, 
	        exports.isMask = isMask, exports.resetMaskSet = resetMaskSet, exports.seekNext = seekNext, 
	        exports.seekPrevious = seekPrevious, exports.translatePosition = translatePosition;
	        var _validationTests = __webpack_require__(3), _validation = __webpack_require__(4), _mask = __webpack_require__(11);
	        function caret(input, begin, end, notranslate, isDelete) {
	            var inputmask = this, opts = this.opts, range;
	            if (void 0 === begin) return "selectionStart" in input && "selectionEnd" in input ? (begin = input.selectionStart, 
	            end = input.selectionEnd) : window.getSelection ? (range = window.getSelection().getRangeAt(0), 
	            range.commonAncestorContainer.parentNode !== input && range.commonAncestorContainer !== input || (begin = range.startOffset, 
	            end = range.endOffset)) : document.selection && document.selection.createRange && (range = document.selection.createRange(), 
	            begin = 0 - range.duplicate().moveStart("character", -input.inputmask._valueGet().length), 
	            end = begin + range.text.length), {
	                begin: notranslate ? begin : translatePosition.call(this, begin),
	                end: notranslate ? end : translatePosition.call(this, end)
	            };
	            if (Array.isArray(begin) && (end = this.isRTL ? begin[0] : begin[1], begin = this.isRTL ? begin[1] : begin[0]), 
	            void 0 !== begin.begin && (end = this.isRTL ? begin.begin : begin.end, begin = this.isRTL ? begin.end : begin.begin), 
	            "number" == typeof begin) {
	                begin = notranslate ? begin : translatePosition.call(this, begin), end = notranslate ? end : translatePosition.call(this, end), 
	                end = "number" == typeof end ? end : begin;
	                var scrollCalc = parseInt(((input.ownerDocument.defaultView || window).getComputedStyle ? (input.ownerDocument.defaultView || window).getComputedStyle(input, null) : input.currentStyle).fontSize) * end;
	                if (input.scrollLeft = scrollCalc > input.scrollWidth ? scrollCalc : 0, input.inputmask.caretPos = {
	                    begin: begin,
	                    end: end
	                }, opts.insertModeVisual && !1 === opts.insertMode && begin === end && (isDelete || end++), 
	                input === (input.inputmask.shadowRoot || document).activeElement) if ("setSelectionRange" in input) input.setSelectionRange(begin, end); else if (window.getSelection) {
	                    if (range = document.createRange(), void 0 === input.firstChild || null === input.firstChild) {
	                        var textNode = document.createTextNode("");
	                        input.appendChild(textNode);
	                    }
	                    range.setStart(input.firstChild, begin < input.inputmask._valueGet().length ? begin : input.inputmask._valueGet().length), 
	                    range.setEnd(input.firstChild, end < input.inputmask._valueGet().length ? end : input.inputmask._valueGet().length), 
	                    range.collapse(!0);
	                    var sel = window.getSelection();
	                    sel.removeAllRanges(), sel.addRange(range);
	                } else input.createTextRange && (range = input.createTextRange(), range.collapse(!0), 
	                range.moveEnd("character", end), range.moveStart("character", begin), range.select());
	            }
	        }
	        function determineLastRequiredPosition(returnDefinition) {
	            var inputmask = this, maskset = this.maskset, $ = this.dependencyLib, buffer = _validationTests.getMaskTemplate.call(this, !0, getLastValidPosition.call(this), !0, !0), bl = buffer.length, pos, lvp = getLastValidPosition.call(this), positions = {}, lvTest = maskset.validPositions[lvp], ndxIntlzr = void 0 !== lvTest ? lvTest.locator.slice() : void 0, testPos;
	            for (pos = lvp + 1; pos < buffer.length; pos++) testPos = _validationTests.getTestTemplate.call(this, pos, ndxIntlzr, pos - 1), 
	            ndxIntlzr = testPos.locator.slice(), positions[pos] = $.extend(!0, {}, testPos);
	            var lvTestAlt = lvTest && void 0 !== lvTest.alternation ? lvTest.locator[lvTest.alternation] : void 0;
	            for (pos = bl - 1; lvp < pos && (testPos = positions[pos], (testPos.match.optionality || testPos.match.optionalQuantifier && testPos.match.newBlockMarker || lvTestAlt && (lvTestAlt !== positions[pos].locator[lvTest.alternation] && 1 != testPos.match.static || !0 === testPos.match.static && testPos.locator[lvTest.alternation] && _validation.checkAlternationMatch.call(this, testPos.locator[lvTest.alternation].toString().split(","), lvTestAlt.toString().split(",")) && "" !== _validationTests.getTests.call(this, pos)[0].def)) && buffer[pos] === _validationTests.getPlaceholder.call(this, pos, testPos.match)); pos--) bl--;
	            return returnDefinition ? {
	                l: bl,
	                def: positions[bl] ? positions[bl].match : void 0
	            } : bl;
	        }
	        function determineNewCaretPosition(selectedCaret, tabbed) {
	            var inputmask = this, maskset = this.maskset, opts = this.opts;
	            function doRadixFocus(clickPos) {
	                if ("" !== opts.radixPoint && 0 !== opts.digits) {
	                    var vps = maskset.validPositions;
	                    if (void 0 === vps[clickPos] || vps[clickPos].input === _validationTests.getPlaceholder.call(inputmask, clickPos)) {
	                        if (clickPos < seekNext.call(inputmask, -1)) return !0;
	                        var radixPos = getBuffer.call(inputmask).indexOf(opts.radixPoint);
	                        if (-1 !== radixPos) {
	                            for (var vp in vps) if (vps[vp] && radixPos < vp && vps[vp].input !== _validationTests.getPlaceholder.call(inputmask, vp)) return !1;
	                            return !0;
	                        }
	                    }
	                }
	                return !1;
	            }
	            if (tabbed && (inputmask.isRTL ? selectedCaret.end = selectedCaret.begin : selectedCaret.begin = selectedCaret.end), 
	            selectedCaret.begin === selectedCaret.end) {
	                switch (opts.positionCaretOnClick) {
	                  case "none":
	                    break;
	
	                  case "select":
	                    selectedCaret = {
	                        begin: 0,
	                        end: getBuffer.call(inputmask).length
	                    };
	                    break;
	
	                  case "ignore":
	                    selectedCaret.end = selectedCaret.begin = seekNext.call(inputmask, getLastValidPosition.call(inputmask));
	                    break;
	
	                  case "radixFocus":
	                    if (doRadixFocus(selectedCaret.begin)) {
	                        var radixPos = getBuffer.call(inputmask).join("").indexOf(opts.radixPoint);
	                        selectedCaret.end = selectedCaret.begin = opts.numericInput ? seekNext.call(inputmask, radixPos) : radixPos;
	                        break;
	                    }
	
	                  default:
	                    var clickPosition = selectedCaret.begin, lvclickPosition = getLastValidPosition.call(inputmask, clickPosition, !0), lastPosition = seekNext.call(inputmask, -1 !== lvclickPosition || isMask.call(inputmask, 0) ? lvclickPosition : -1);
	                    if (clickPosition <= lastPosition) selectedCaret.end = selectedCaret.begin = isMask.call(inputmask, clickPosition, !1, !0) ? clickPosition : seekNext.call(inputmask, clickPosition); else {
	                        var lvp = maskset.validPositions[lvclickPosition], tt = _validationTests.getTestTemplate.call(inputmask, lastPosition, lvp ? lvp.match.locator : void 0, lvp), placeholder = _validationTests.getPlaceholder.call(inputmask, lastPosition, tt.match);
	                        if ("" !== placeholder && getBuffer.call(inputmask)[lastPosition] !== placeholder && !0 !== tt.match.optionalQuantifier && !0 !== tt.match.newBlockMarker || !isMask.call(inputmask, lastPosition, opts.keepStatic, !0) && tt.match.def === placeholder) {
	                            var newPos = seekNext.call(inputmask, lastPosition);
	                            (newPos <= clickPosition || clickPosition === lastPosition) && (lastPosition = newPos);
	                        }
	                        selectedCaret.end = selectedCaret.begin = lastPosition;
	                    }
	                }
	                return selectedCaret;
	            }
	        }
	        function getBuffer(noCache) {
	            var inputmask = this, maskset = this.maskset;
	            return void 0 !== maskset.buffer && !0 !== noCache || (maskset.buffer = _validationTests.getMaskTemplate.call(this, !0, getLastValidPosition.call(this), !0), 
	            void 0 === maskset._buffer && (maskset._buffer = maskset.buffer.slice())), maskset.buffer;
	        }
	        function getBufferTemplate() {
	            var inputmask = this, maskset = this.maskset;
	            return void 0 === maskset._buffer && (maskset._buffer = _validationTests.getMaskTemplate.call(this, !1, 1), 
	            void 0 === maskset.buffer && (maskset.buffer = maskset._buffer.slice())), maskset._buffer;
	        }
	        function getLastValidPosition(closestTo, strict, validPositions) {
	            var maskset = this.maskset, before = -1, after = -1, valids = validPositions || maskset.validPositions;
	            for (var posNdx in void 0 === closestTo && (closestTo = -1), valids) {
	                var psNdx = parseInt(posNdx);
	                valids[psNdx] && (strict || !0 !== valids[psNdx].generatedInput) && (psNdx <= closestTo && (before = psNdx), 
	                closestTo <= psNdx && (after = psNdx));
	            }
	            return -1 === before || before == closestTo ? after : -1 == after ? before : closestTo - before < after - closestTo ? before : after;
	        }
	        function isMask(pos, strict, fuzzy) {
	            var inputmask = this, maskset = this.maskset, test = _validationTests.getTestTemplate.call(this, pos).match;
	            if ("" === test.def && (test = _validationTests.getTest.call(this, pos).match), 
	            !0 !== test.static) return test.fn;
	            if (!0 === fuzzy && void 0 !== maskset.validPositions[pos] && !0 !== maskset.validPositions[pos].generatedInput) return !0;
	            if (!0 !== strict && -1 < pos) {
	                if (fuzzy) {
	                    var tests = _validationTests.getTests.call(this, pos);
	                    return tests.length > 1 + ("" === tests[tests.length - 1].match.def ? 1 : 0);
	                }
	                var testTemplate = _validationTests.determineTestTemplate.call(this, pos, _validationTests.getTests.call(this, pos)), testPlaceHolder = _validationTests.getPlaceholder.call(this, pos, testTemplate.match);
	                return testTemplate.match.def !== testPlaceHolder;
	            }
	            return !1;
	        }
	        function resetMaskSet(soft) {
	            var maskset = this.maskset;
	            maskset.buffer = void 0, !0 !== soft && (maskset.validPositions = {}, maskset.p = 0);
	        }
	        function seekNext(pos, newBlock, fuzzy) {
	            var inputmask = this;
	            void 0 === fuzzy && (fuzzy = !0);
	            for (var position = pos + 1; "" !== _validationTests.getTest.call(this, position).match.def && (!0 === newBlock && (!0 !== _validationTests.getTest.call(this, position).match.newBlockMarker || !isMask.call(this, position, void 0, !0)) || !0 !== newBlock && !isMask.call(this, position, void 0, fuzzy)); ) position++;
	            return position;
	        }
	        function seekPrevious(pos, newBlock) {
	            var inputmask = this, position = pos - 1;
	            if (pos <= 0) return 0;
	            for (;0 < position && (!0 === newBlock && (!0 !== _validationTests.getTest.call(this, position).match.newBlockMarker || !isMask.call(this, position, void 0, !0)) || !0 !== newBlock && !isMask.call(this, position, void 0, !0)); ) position--;
	            return position;
	        }
	        function translatePosition(pos) {
	            var inputmask = this, opts = this.opts, el = this.el;
	            return !this.isRTL || "number" != typeof pos || opts.greedy && "" === opts.placeholder || !el || (pos = this._valueGet().length - pos), 
	            pos;
	        }
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        function getLocator(tst, align) {
	            var locator = (null != tst.alternation ? tst.mloc[getDecisionTaker(tst)] : tst.locator).join("");
	            if ("" !== locator) for (;locator.length < align; ) locator += "0";
	            return locator;
	        }
	        function getDecisionTaker(tst) {
	            var decisionTaker = tst.locator[tst.alternation];
	            return "string" == typeof decisionTaker && 0 < decisionTaker.length && (decisionTaker = decisionTaker.split(",")[0]), 
	            void 0 !== decisionTaker ? decisionTaker.toString() : "";
	        }
	        function getPlaceholder(pos, test, returnPL) {
	            var inputmask = this, opts = this.opts, maskset = this.maskset;
	            if (test = test || getTest.call(this, pos).match, void 0 !== test.placeholder || !0 === returnPL) return "function" == typeof test.placeholder ? test.placeholder(opts) : test.placeholder;
	            if (!0 !== test.static) return opts.placeholder.charAt(pos % opts.placeholder.length);
	            if (-1 < pos && void 0 === maskset.validPositions[pos]) {
	                var tests = getTests.call(this, pos), staticAlternations = [], prevTest;
	                if (tests.length > 1 + ("" === tests[tests.length - 1].match.def ? 1 : 0)) for (var i = 0; i < tests.length; i++) if ("" !== tests[i].match.def && !0 !== tests[i].match.optionality && !0 !== tests[i].match.optionalQuantifier && (!0 === tests[i].match.static || void 0 === prevTest || !1 !== tests[i].match.fn.test(prevTest.match.def, maskset, pos, !0, opts)) && (staticAlternations.push(tests[i]), 
	                !0 === tests[i].match.static && (prevTest = tests[i]), 1 < staticAlternations.length && /[0-9a-bA-Z]/.test(staticAlternations[0].match.def))) return opts.placeholder.charAt(pos % opts.placeholder.length);
	            }
	            return test.def;
	        }
	        function getMaskTemplate(baseOnInput, minimalPos, includeMode, noJit, clearOptionalTail) {
	            var inputmask = this, opts = this.opts, maskset = this.maskset, greedy = opts.greedy;
	            clearOptionalTail && (opts.greedy = !1), minimalPos = minimalPos || 0;
	            var maskTemplate = [], ndxIntlzr, pos = 0, test, testPos, jitRenderStatic;
	            do {
	                if (!0 === baseOnInput && maskset.validPositions[pos]) testPos = clearOptionalTail && !0 === maskset.validPositions[pos].match.optionality && void 0 === maskset.validPositions[pos + 1] && (!0 === maskset.validPositions[pos].generatedInput || maskset.validPositions[pos].input == opts.skipOptionalPartCharacter && 0 < pos) ? determineTestTemplate.call(this, pos, getTests.call(this, pos, ndxIntlzr, pos - 1)) : maskset.validPositions[pos], 
	                test = testPos.match, ndxIntlzr = testPos.locator.slice(), maskTemplate.push(!0 === includeMode ? testPos.input : !1 === includeMode ? test.nativeDef : getPlaceholder.call(this, pos, test)); else {
	                    testPos = getTestTemplate.call(this, pos, ndxIntlzr, pos - 1), test = testPos.match, 
	                    ndxIntlzr = testPos.locator.slice();
	                    var jitMasking = !0 !== noJit && (!1 !== opts.jitMasking ? opts.jitMasking : test.jit);
	                    jitRenderStatic = jitRenderStatic && test.static && test.def !== opts.groupSeparator && null === test.fn || maskset.validPositions[pos - 1] && test.static && test.def !== opts.groupSeparator && null === test.fn, 
	                    jitRenderStatic || !1 === jitMasking || void 0 === jitMasking || "number" == typeof jitMasking && isFinite(jitMasking) && pos < jitMasking ? maskTemplate.push(!1 === includeMode ? test.nativeDef : getPlaceholder.call(this, pos, test)) : jitRenderStatic = !1;
	                }
	                pos++;
	            } while ((void 0 === this.maxLength || pos < this.maxLength) && (!0 !== test.static || "" !== test.def) || pos < minimalPos);
	            return "" === maskTemplate[maskTemplate.length - 1] && maskTemplate.pop(), !1 === includeMode && void 0 !== maskset.maskLength || (maskset.maskLength = pos - 1), 
	            opts.greedy = greedy, maskTemplate;
	        }
	        function getTestTemplate(pos, ndxIntlzr, tstPs) {
	            var inputmask = this, maskset = this.maskset;
	            return maskset.validPositions[pos] || determineTestTemplate.call(this, pos, getTests.call(this, pos, ndxIntlzr ? ndxIntlzr.slice() : ndxIntlzr, tstPs));
	        }
	        function determineTestTemplate(pos, tests) {
	            var inputmask = this, opts = this.opts;
	            pos = 0 < pos ? pos - 1 : 0;
	            for (var altTest = getTest.call(this, pos), targetLocator = getLocator(altTest), tstLocator, closest, bestMatch, ndx = 0; ndx < tests.length; ndx++) {
	                var tst = tests[ndx];
	                tstLocator = getLocator(tst, targetLocator.length);
	                var distance = Math.abs(tstLocator - targetLocator);
	                (void 0 === closest || "" !== tstLocator && distance < closest || bestMatch && !opts.greedy && bestMatch.match.optionality && "master" === bestMatch.match.newBlockMarker && (!tst.match.optionality || !tst.match.newBlockMarker) || bestMatch && bestMatch.match.optionalQuantifier && !tst.match.optionalQuantifier) && (closest = distance, 
	                bestMatch = tst);
	            }
	            return bestMatch;
	        }
	        function getTest(pos, tests) {
	            var inputmask = this, maskset = this.maskset;
	            return maskset.validPositions[pos] ? maskset.validPositions[pos] : (tests || getTests.call(this, pos))[0];
	        }
	        function getTests(pos, ndxIntlzr, tstPs) {
	            var inputmask = this, $ = this.dependencyLib, maskset = this.maskset, opts = this.opts, el = this.el, maskTokens = maskset.maskToken, testPos = ndxIntlzr ? tstPs : 0, ndxInitializer = ndxIntlzr ? ndxIntlzr.slice() : [ 0 ], matches = [], insertStop = !1, latestMatch, cacheDependency = ndxIntlzr ? ndxIntlzr.join("") : "";
	            function resolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {
	                function handleMatch(match, loopNdx, quantifierRecurse) {
	                    function isFirstMatch(latestMatch, tokenGroup) {
	                        var firstMatch = 0 === tokenGroup.matches.indexOf(latestMatch);
	                        return firstMatch || tokenGroup.matches.every(function(match, ndx) {
	                            return !0 === match.isQuantifier ? firstMatch = isFirstMatch(latestMatch, tokenGroup.matches[ndx - 1]) : Object.prototype.hasOwnProperty.call(match, "matches") && (firstMatch = isFirstMatch(latestMatch, match)), 
	                            !firstMatch;
	                        }), firstMatch;
	                    }
	                    function resolveNdxInitializer(pos, alternateNdx, targetAlternation) {
	                        var bestMatch, indexPos;
	                        if ((maskset.tests[pos] || maskset.validPositions[pos]) && (maskset.tests[pos] || [ maskset.validPositions[pos] ]).every(function(lmnt, ndx) {
	                            if (lmnt.mloc[alternateNdx]) return bestMatch = lmnt, !1;
	                            var alternation = void 0 !== targetAlternation ? targetAlternation : lmnt.alternation, ndxPos = void 0 !== lmnt.locator[alternation] ? lmnt.locator[alternation].toString().indexOf(alternateNdx) : -1;
	                            return (void 0 === indexPos || ndxPos < indexPos) && -1 !== ndxPos && (bestMatch = lmnt, 
	                            indexPos = ndxPos), !0;
	                        }), bestMatch) {
	                            var bestMatchAltIndex = bestMatch.locator[bestMatch.alternation], locator = bestMatch.mloc[alternateNdx] || bestMatch.mloc[bestMatchAltIndex] || bestMatch.locator;
	                            return locator.slice((void 0 !== targetAlternation ? targetAlternation : bestMatch.alternation) + 1);
	                        }
	                        return void 0 !== targetAlternation ? resolveNdxInitializer(pos, alternateNdx) : void 0;
	                    }
	                    function isSubsetOf(source, target) {
	                        function expand(pattern) {
	                            for (var expanded = [], start = -1, end, i = 0, l = pattern.length; i < l; i++) if ("-" === pattern.charAt(i)) for (end = pattern.charCodeAt(i + 1); ++start < end; ) expanded.push(String.fromCharCode(start)); else start = pattern.charCodeAt(i), 
	                            expanded.push(pattern.charAt(i));
	                            return expanded.join("");
	                        }
	                        return source.match.def === target.match.nativeDef || !(!(opts.regex || source.match.fn instanceof RegExp && target.match.fn instanceof RegExp) || !0 === source.match.static || !0 === target.match.static) && -1 !== expand(target.match.fn.toString().replace(/[[\]/]/g, "")).indexOf(expand(source.match.fn.toString().replace(/[[\]/]/g, "")));
	                    }
	                    function staticCanMatchDefinition(source, target) {
	                        return !0 === source.match.static && !0 !== target.match.static && target.match.fn.test(source.match.def, maskset, pos, !1, opts, !1);
	                    }
	                    function setMergeLocators(targetMatch, altMatch) {
	                        var alternationNdx = targetMatch.alternation, shouldMerge = void 0 === altMatch || alternationNdx === altMatch.alternation && -1 === targetMatch.locator[alternationNdx].toString().indexOf(altMatch.locator[alternationNdx]);
	                        if (!shouldMerge && alternationNdx > altMatch.alternation) for (var i = altMatch.alternation; i < alternationNdx; i++) if (targetMatch.locator[i] !== altMatch.locator[i]) {
	                            alternationNdx = i, shouldMerge = !0;
	                            break;
	                        }
	                        if (shouldMerge) {
	                            targetMatch.mloc = targetMatch.mloc || {};
	                            var locNdx = targetMatch.locator[alternationNdx];
	                            if (void 0 !== locNdx) {
	                                if ("string" == typeof locNdx && (locNdx = locNdx.split(",")[0]), void 0 === targetMatch.mloc[locNdx] && (targetMatch.mloc[locNdx] = targetMatch.locator.slice()), 
	                                void 0 !== altMatch) {
	                                    for (var ndx in altMatch.mloc) "string" == typeof ndx && (ndx = ndx.split(",")[0]), 
	                                    void 0 === targetMatch.mloc[ndx] && (targetMatch.mloc[ndx] = altMatch.mloc[ndx]);
	                                    targetMatch.locator[alternationNdx] = Object.keys(targetMatch.mloc).join(",");
	                                }
	                                return !0;
	                            }
	                            targetMatch.alternation = void 0;
	                        }
	                        return !1;
	                    }
	                    function isSameLevel(targetMatch, altMatch) {
	                        if (targetMatch.locator.length !== altMatch.locator.length) return !1;
	                        for (var locNdx = targetMatch.alternation + 1; locNdx < targetMatch.locator.length; locNdx++) if (targetMatch.locator[locNdx] !== altMatch.locator[locNdx]) return !1;
	                        return !0;
	                    }
	                    if (testPos > pos + opts._maxTestPos) throw "Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. " + maskset.mask;
	                    if (testPos === pos && void 0 === match.matches) return matches.push({
	                        match: match,
	                        locator: loopNdx.reverse(),
	                        cd: cacheDependency,
	                        mloc: {}
	                    }), !0;
	                    if (void 0 !== match.matches) {
	                        if (match.isGroup && quantifierRecurse !== match) {
	                            if (match = handleMatch(maskToken.matches[maskToken.matches.indexOf(match) + 1], loopNdx, quantifierRecurse), 
	                            match) return !0;
	                        } else if (match.isOptional) {
	                            var optionalToken = match, mtchsNdx = matches.length;
	                            if (match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse), 
	                            match) {
	                                if (matches.forEach(function(mtch, ndx) {
	                                    mtchsNdx <= ndx && (mtch.match.optionality = !0);
	                                }), latestMatch = matches[matches.length - 1].match, void 0 !== quantifierRecurse || !isFirstMatch(latestMatch, optionalToken)) return !0;
	                                insertStop = !0, testPos = pos;
	                            }
	                        } else if (match.isAlternator) {
	                            var alternateToken = match, malternateMatches = [], maltMatches, currentMatches = matches.slice(), loopNdxCnt = loopNdx.length, altIndex = 0 < ndxInitializer.length ? ndxInitializer.shift() : -1;
	                            if (-1 === altIndex || "string" == typeof altIndex) {
	                                var currentPos = testPos, ndxInitializerClone = ndxInitializer.slice(), altIndexArr = [], amndx;
	                                if ("string" == typeof altIndex) altIndexArr = altIndex.split(","); else for (amndx = 0; amndx < alternateToken.matches.length; amndx++) altIndexArr.push(amndx.toString());
	                                if (void 0 !== maskset.excludes[pos]) {
	                                    for (var altIndexArrClone = altIndexArr.slice(), i = 0, exl = maskset.excludes[pos].length; i < exl; i++) {
	                                        var excludeSet = maskset.excludes[pos][i].toString().split(":");
	                                        loopNdx.length == excludeSet[1] && altIndexArr.splice(altIndexArr.indexOf(excludeSet[0]), 1);
	                                    }
	                                    0 === altIndexArr.length && (delete maskset.excludes[pos], altIndexArr = altIndexArrClone);
	                                }
	                                (!0 === opts.keepStatic || isFinite(parseInt(opts.keepStatic)) && currentPos >= opts.keepStatic) && (altIndexArr = altIndexArr.slice(0, 1));
	                                for (var unMatchedAlternation = !1, ndx = 0; ndx < altIndexArr.length; ndx++) {
	                                    amndx = parseInt(altIndexArr[ndx]), matches = [], ndxInitializer = "string" == typeof altIndex && resolveNdxInitializer(testPos, amndx, loopNdxCnt) || ndxInitializerClone.slice(), 
	                                    alternateToken.matches[amndx] && handleMatch(alternateToken.matches[amndx], [ amndx ].concat(loopNdx), quantifierRecurse) ? match = !0 : 0 === ndx && (unMatchedAlternation = !0), 
	                                    maltMatches = matches.slice(), testPos = currentPos, matches = [];
	                                    for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {
	                                        var altMatch = maltMatches[ndx1], dropMatch = !1;
	                                        altMatch.match.jit = altMatch.match.jit || unMatchedAlternation, altMatch.alternation = altMatch.alternation || loopNdxCnt, 
	                                        setMergeLocators(altMatch);
	                                        for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {
	                                            var altMatch2 = malternateMatches[ndx2];
	                                            if ("string" != typeof altIndex || void 0 !== altMatch.alternation && altIndexArr.includes(altMatch.locator[altMatch.alternation].toString())) {
	                                                if (altMatch.match.nativeDef === altMatch2.match.nativeDef) {
	                                                    dropMatch = !0, setMergeLocators(altMatch2, altMatch);
	                                                    break;
	                                                }
	                                                if (isSubsetOf(altMatch, altMatch2)) {
	                                                    setMergeLocators(altMatch, altMatch2) && (dropMatch = !0, malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch));
	                                                    break;
	                                                }
	                                                if (isSubsetOf(altMatch2, altMatch)) {
	                                                    setMergeLocators(altMatch2, altMatch);
	                                                    break;
	                                                }
	                                                if (staticCanMatchDefinition(altMatch, altMatch2)) {
	                                                    isSameLevel(altMatch, altMatch2) || void 0 !== el.inputmask.userOptions.keepStatic ? setMergeLocators(altMatch, altMatch2) && (dropMatch = !0, 
	                                                    malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch)) : opts.keepStatic = !0;
	                                                    break;
	                                                }
	                                            }
	                                        }
	                                        dropMatch || malternateMatches.push(altMatch);
	                                    }
	                                }
	                                matches = currentMatches.concat(malternateMatches), testPos = pos, insertStop = 0 < matches.length, 
	                                match = 0 < malternateMatches.length, ndxInitializer = ndxInitializerClone.slice();
	                            } else match = handleMatch(alternateToken.matches[altIndex] || maskToken.matches[altIndex], [ altIndex ].concat(loopNdx), quantifierRecurse);
	                            if (match) return !0;
	                        } else if (match.isQuantifier && quantifierRecurse !== maskToken.matches[maskToken.matches.indexOf(match) - 1]) for (var qt = match, qndx = 0 < ndxInitializer.length ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && testPos <= pos; qndx++) {
	                            var tokenGroup = maskToken.matches[maskToken.matches.indexOf(qt) - 1];
	                            if (match = handleMatch(tokenGroup, [ qndx ].concat(loopNdx), tokenGroup), match) {
	                                if (latestMatch = matches[matches.length - 1].match, latestMatch.optionalQuantifier = qndx >= qt.quantifier.min, 
	                                latestMatch.jit = (qndx || 1) * tokenGroup.matches.indexOf(latestMatch) >= qt.quantifier.jit, 
	                                latestMatch.optionalQuantifier && isFirstMatch(latestMatch, tokenGroup)) {
	                                    insertStop = !0, testPos = pos;
	                                    break;
	                                }
	                                return latestMatch.jit && (maskset.jitOffset[pos] = tokenGroup.matches.length - tokenGroup.matches.indexOf(latestMatch)), 
	                                !0;
	                            }
	                        } else if (match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse), 
	                        match) return !0;
	                    } else testPos++;
	                }
	                for (var tndx = 0 < ndxInitializer.length ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx++) if (!0 !== maskToken.matches[tndx].isQuantifier) {
	                    var match = handleMatch(maskToken.matches[tndx], [ tndx ].concat(loopNdx), quantifierRecurse);
	                    if (match && testPos === pos) return match;
	                    if (pos < testPos) break;
	                }
	            }
	            function mergeLocators(pos, tests) {
	                var locator = [], alternation;
	                return Array.isArray(tests) || (tests = [ tests ]), 0 < tests.length && (void 0 === tests[0].alternation || !0 === opts.keepStatic ? (locator = determineTestTemplate.call(inputmask, pos, tests.slice()).locator.slice(), 
	                0 === locator.length && (locator = tests[0].locator.slice())) : tests.forEach(function(tst) {
	                    "" !== tst.def && (0 === locator.length ? (alternation = tst.alternation, locator = tst.locator.slice()) : tst.locator[alternation] && -1 === locator[alternation].toString().indexOf(tst.locator[alternation]) && (locator[alternation] += "," + tst.locator[alternation]));
	                })), locator;
	            }
	            if (-1 < pos && (void 0 === inputmask.maxLength || pos < inputmask.maxLength)) {
	                if (void 0 === ndxIntlzr) {
	                    for (var previousPos = pos - 1, test; void 0 === (test = maskset.validPositions[previousPos] || maskset.tests[previousPos]) && -1 < previousPos; ) previousPos--;
	                    void 0 !== test && -1 < previousPos && (ndxInitializer = mergeLocators(previousPos, test), 
	                    cacheDependency = ndxInitializer.join(""), testPos = previousPos);
	                }
	                if (maskset.tests[pos] && maskset.tests[pos][0].cd === cacheDependency) return maskset.tests[pos];
	                for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {
	                    var match = resolveTestFromToken(maskTokens[mtndx], ndxInitializer, [ mtndx ]);
	                    if (match && testPos === pos || pos < testPos) break;
	                }
	            }
	            return 0 !== matches.length && !insertStop || matches.push({
	                match: {
	                    fn: null,
	                    static: !0,
	                    optionality: !1,
	                    casing: null,
	                    def: "",
	                    placeholder: ""
	                },
	                locator: [],
	                mloc: {},
	                cd: cacheDependency
	            }), void 0 !== ndxIntlzr && maskset.tests[pos] ? $.extend(!0, [], matches) : (maskset.tests[pos] = $.extend(!0, [], matches), 
	            maskset.tests[pos]);
	        }
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.determineTestTemplate = determineTestTemplate, exports.getDecisionTaker = getDecisionTaker, 
	        exports.getMaskTemplate = getMaskTemplate, exports.getPlaceholder = getPlaceholder, 
	        exports.getTest = getTest, exports.getTests = getTests, exports.getTestTemplate = getTestTemplate;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.alternate = alternate, exports.checkAlternationMatch = checkAlternationMatch, 
	        exports.isComplete = isComplete, exports.isValid = isValid, exports.refreshFromBuffer = refreshFromBuffer, 
	        exports.revalidateMask = revalidateMask, exports.handleRemove = handleRemove;
	        var _validationTests = __webpack_require__(3), _keycode = _interopRequireDefault(__webpack_require__(0)), _positioning = __webpack_require__(2), _eventhandlers = __webpack_require__(7);
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        function alternate(maskPos, c, strict, fromIsValid, rAltPos, selection) {
	            var inputmask = this, $ = this.dependencyLib, opts = this.opts, maskset = this.maskset, validPsClone = $.extend(!0, {}, maskset.validPositions), tstClone = $.extend(!0, {}, maskset.tests), lastAlt, alternation, isValidRslt = !1, returnRslt = !1, altPos, prevAltPos, i, validPos, decisionPos, lAltPos = void 0 !== rAltPos ? rAltPos : _positioning.getLastValidPosition.call(this), nextPos, input, begin, end;
	            if (selection && (begin = selection.begin, end = selection.end, selection.begin > selection.end && (begin = selection.end, 
	            end = selection.begin)), -1 === lAltPos && void 0 === rAltPos) lastAlt = 0, prevAltPos = _validationTests.getTest.call(this, lastAlt), 
	            alternation = prevAltPos.alternation; else for (;0 <= lAltPos; lAltPos--) if (altPos = maskset.validPositions[lAltPos], 
	            altPos && void 0 !== altPos.alternation) {
	                if (prevAltPos && prevAltPos.locator[altPos.alternation] !== altPos.locator[altPos.alternation]) break;
	                lastAlt = lAltPos, alternation = maskset.validPositions[lastAlt].alternation, prevAltPos = altPos;
	            }
	            if (void 0 !== alternation) {
	                decisionPos = parseInt(lastAlt), maskset.excludes[decisionPos] = maskset.excludes[decisionPos] || [], 
	                !0 !== maskPos && maskset.excludes[decisionPos].push((0, _validationTests.getDecisionTaker)(prevAltPos) + ":" + prevAltPos.alternation);
	                var validInputs = [], resultPos = -1;
	                for (i = decisionPos; i < _positioning.getLastValidPosition.call(this, void 0, !0) + 1; i++) -1 === resultPos && maskPos <= i && void 0 !== c && (validInputs.push(c), 
	                resultPos = validInputs.length - 1), validPos = maskset.validPositions[i], validPos && !0 !== validPos.generatedInput && (void 0 === selection || i < begin || end <= i) && validInputs.push(validPos.input), 
	                delete maskset.validPositions[i];
	                for (-1 === resultPos && void 0 !== c && (validInputs.push(c), resultPos = validInputs.length - 1); void 0 !== maskset.excludes[decisionPos] && maskset.excludes[decisionPos].length < 10; ) {
	                    for (maskset.tests = {}, _positioning.resetMaskSet.call(this, !0), isValidRslt = !0, 
	                    i = 0; i < validInputs.length && (nextPos = isValidRslt.caret || _positioning.getLastValidPosition.call(this, void 0, !0) + 1, 
	                    input = validInputs[i], isValidRslt = isValid.call(this, nextPos, input, !1, fromIsValid, !0)); i++) i === resultPos && (returnRslt = isValidRslt), 
	                    1 == maskPos && isValidRslt && (returnRslt = {
	                        caretPos: i
	                    });
	                    if (isValidRslt) break;
	                    if (_positioning.resetMaskSet.call(this), prevAltPos = _validationTests.getTest.call(this, decisionPos), 
	                    maskset.validPositions = $.extend(!0, {}, validPsClone), maskset.tests = $.extend(!0, {}, tstClone), 
	                    !maskset.excludes[decisionPos]) {
	                        returnRslt = alternate.call(this, maskPos, c, strict, fromIsValid, decisionPos - 1, selection);
	                        break;
	                    }
	                    var decisionTaker = (0, _validationTests.getDecisionTaker)(prevAltPos);
	                    if (-1 !== maskset.excludes[decisionPos].indexOf(decisionTaker + ":" + prevAltPos.alternation)) {
	                        returnRslt = alternate.call(this, maskPos, c, strict, fromIsValid, decisionPos - 1, selection);
	                        break;
	                    }
	                    for (maskset.excludes[decisionPos].push(decisionTaker + ":" + prevAltPos.alternation), 
	                    i = decisionPos; i < _positioning.getLastValidPosition.call(this, void 0, !0) + 1; i++) delete maskset.validPositions[i];
	                }
	            }
	            return returnRslt && !1 === opts.keepStatic || delete maskset.excludes[decisionPos], 
	            returnRslt;
	        }
	        function casing(elem, test, pos) {
	            var opts = this.opts, maskset = this.maskset;
	            switch (opts.casing || test.casing) {
	              case "upper":
	                elem = elem.toUpperCase();
	                break;
	
	              case "lower":
	                elem = elem.toLowerCase();
	                break;
	
	              case "title":
	                var posBefore = maskset.validPositions[pos - 1];
	                elem = 0 === pos || posBefore && posBefore.input === String.fromCharCode(_keycode.default.SPACE) ? elem.toUpperCase() : elem.toLowerCase();
	                break;
	
	              default:
	                if ("function" == typeof opts.casing) {
	                    var args = Array.prototype.slice.call(arguments);
	                    args.push(maskset.validPositions), elem = opts.casing.apply(this, args);
	                }
	            }
	            return elem;
	        }
	        function checkAlternationMatch(altArr1, altArr2, na) {
	            for (var opts = this.opts, altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1), isMatch = !1, naArr = void 0 !== na ? na.split(",") : [], naNdx, i = 0; i < naArr.length; i++) -1 !== (naNdx = altArr1.indexOf(naArr[i])) && altArr1.splice(naNdx, 1);
	            for (var alndx = 0; alndx < altArr1.length; alndx++) if (altArrC.includes(altArr1[alndx])) {
	                isMatch = !0;
	                break;
	            }
	            return isMatch;
	        }
	        function handleRemove(input, k, pos, strict, fromIsValid) {
	            var inputmask = this, maskset = this.maskset, opts = this.opts;
	            if ((opts.numericInput || this.isRTL) && (k === _keycode.default.BACKSPACE ? k = _keycode.default.DELETE : k === _keycode.default.DELETE && (k = _keycode.default.BACKSPACE), 
	            this.isRTL)) {
	                var pend = pos.end;
	                pos.end = pos.begin, pos.begin = pend;
	            }
	            var lvp = _positioning.getLastValidPosition.call(this, void 0, !0), offset;
	            if (pos.end >= _positioning.getBuffer.call(this).length && lvp >= pos.end && (pos.end = lvp + 1), 
	            k === _keycode.default.BACKSPACE ? pos.end - pos.begin < 1 && (pos.begin = _positioning.seekPrevious.call(this, pos.begin)) : k === _keycode.default.DELETE && pos.begin === pos.end && (pos.end = _positioning.isMask.call(this, pos.end, !0, !0) ? pos.end + 1 : _positioning.seekNext.call(this, pos.end) + 1), 
	            !1 !== (offset = revalidateMask.call(this, pos))) {
	                if (!0 !== strict && !1 !== opts.keepStatic || null !== opts.regex && -1 !== _validationTests.getTest.call(this, pos.begin).match.def.indexOf("|")) {
	                    var result = alternate.call(this, !0);
	                    if (result) {
	                        var newPos = void 0 !== result.caret ? result.caret : result.pos ? _positioning.seekNext.call(this, result.pos.begin ? result.pos.begin : result.pos) : _positioning.getLastValidPosition.call(this, -1, !0);
	                        (k !== _keycode.default.DELETE || pos.begin > newPos) && pos.begin;
	                    }
	                }
	                !0 !== strict && (maskset.p = k === _keycode.default.DELETE ? pos.begin + offset : pos.begin);
	            }
	        }
	        function isComplete(buffer) {
	            var inputmask = this, opts = this.opts, maskset = this.maskset;
	            if ("function" == typeof opts.isComplete) return opts.isComplete(buffer, opts);
	            if ("*" !== opts.repeat) {
	                var complete = !1, lrp = _positioning.determineLastRequiredPosition.call(this, !0), aml = _positioning.seekPrevious.call(this, lrp.l);
	                if (void 0 === lrp.def || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {
	                    complete = !0;
	                    for (var i = 0; i <= aml; i++) {
	                        var test = _validationTests.getTestTemplate.call(this, i).match;
	                        if (!0 !== test.static && void 0 === maskset.validPositions[i] && !0 !== test.optionality && !0 !== test.optionalQuantifier || !0 === test.static && buffer[i] !== _validationTests.getPlaceholder.call(this, i, test)) {
	                            complete = !1;
	                            break;
	                        }
	                    }
	                }
	                return complete;
	            }
	        }
	        function isValid(pos, c, strict, fromIsValid, fromAlternate, validateOnly, fromCheckval) {
	            var inputmask = this, $ = this.dependencyLib, opts = this.opts, el = inputmask.el, maskset = inputmask.maskset;
	            function isSelection(posObj) {
	                return inputmask.isRTL ? 1 < posObj.begin - posObj.end || posObj.begin - posObj.end == 1 : 1 < posObj.end - posObj.begin || posObj.end - posObj.begin == 1;
	            }
	            strict = !0 === strict;
	            var maskPos = pos;
	            function processCommandObject(commandObj) {
	                if (void 0 !== commandObj) {
	                    if (void 0 !== commandObj.remove && (Array.isArray(commandObj.remove) || (commandObj.remove = [ commandObj.remove ]), 
	                    commandObj.remove.sort(function(a, b) {
	                        return b.pos - a.pos;
	                    }).forEach(function(lmnt) {
	                        revalidateMask.call(inputmask, {
	                            begin: lmnt,
	                            end: lmnt + 1
	                        });
	                    }), commandObj.remove = void 0), void 0 !== commandObj.insert && (Array.isArray(commandObj.insert) || (commandObj.insert = [ commandObj.insert ]), 
	                    commandObj.insert.sort(function(a, b) {
	                        return a.pos - b.pos;
	                    }).forEach(function(lmnt) {
	                        "" !== lmnt.c && isValid.call(inputmask, lmnt.pos, lmnt.c, void 0 === lmnt.strict || lmnt.strict, void 0 !== lmnt.fromIsValid ? lmnt.fromIsValid : fromIsValid);
	                    }), commandObj.insert = void 0), commandObj.refreshFromBuffer && commandObj.buffer) {
	                        var refresh = commandObj.refreshFromBuffer;
	                        refreshFromBuffer.call(inputmask, !0 === refresh ? refresh : refresh.start, refresh.end, commandObj.buffer), 
	                        commandObj.refreshFromBuffer = void 0;
	                    }
	                    void 0 !== commandObj.rewritePosition && (maskPos = commandObj.rewritePosition, 
	                    commandObj = !0);
	                }
	                return commandObj;
	            }
	            function _isValid(position, c, strict) {
	                var rslt = !1;
	                return _validationTests.getTests.call(inputmask, position).every(function(tst, ndx) {
	                    var test = tst.match;
	                    if (_positioning.getBuffer.call(inputmask, !0), rslt = null != test.fn ? test.fn.test(c, maskset, position, strict, opts, isSelection(pos)) : (c === test.def || c === opts.skipOptionalPartCharacter) && "" !== test.def && {
	                        c: _validationTests.getPlaceholder.call(inputmask, position, test, !0) || test.def,
	                        pos: position
	                    }, !1 === rslt) return !0;
	                    var elem = void 0 !== rslt.c ? rslt.c : c, validatedPos = position;
	                    return elem = elem === opts.skipOptionalPartCharacter && !0 === test.static ? _validationTests.getPlaceholder.call(inputmask, position, test, !0) || test.def : elem, 
	                    rslt = processCommandObject(rslt), !0 !== rslt && void 0 !== rslt.pos && rslt.pos !== position && (validatedPos = rslt.pos), 
	                    !0 !== rslt && void 0 === rslt.pos && void 0 === rslt.c || !1 === revalidateMask.call(inputmask, pos, $.extend({}, tst, {
	                        input: casing.call(inputmask, elem, test, validatedPos)
	                    }), fromIsValid, validatedPos) && (rslt = !1), !1;
	                }), rslt;
	            }
	            void 0 !== pos.begin && (maskPos = inputmask.isRTL ? pos.end : pos.begin);
	            var result = !0, positionsClone = $.extend(!0, {}, maskset.validPositions);
	            if (!1 === opts.keepStatic && void 0 !== maskset.excludes[maskPos] && !0 !== fromAlternate && !0 !== fromIsValid) for (var i = maskPos; i < (inputmask.isRTL ? pos.begin : pos.end); i++) void 0 !== maskset.excludes[i] && (maskset.excludes[i] = void 0, 
	            delete maskset.tests[i]);
	            if ("function" == typeof opts.preValidation && !0 !== fromIsValid && !0 !== validateOnly && (result = opts.preValidation.call(el, _positioning.getBuffer.call(inputmask), maskPos, c, isSelection(pos), opts, maskset, pos, strict || fromAlternate), 
	            result = processCommandObject(result)), !0 === result) {
	                if (void 0 === inputmask.maxLength || maskPos < inputmask.maxLength) {
	                    if (result = _isValid(maskPos, c, strict), (!strict || !0 === fromIsValid) && !1 === result && !0 !== validateOnly) {
	                        var currentPosValid = maskset.validPositions[maskPos];
	                        if (!currentPosValid || !0 !== currentPosValid.match.static || currentPosValid.match.def !== c && c !== opts.skipOptionalPartCharacter) {
	                            if (opts.insertMode || void 0 === maskset.validPositions[_positioning.seekNext.call(inputmask, maskPos)] || pos.end > maskPos) {
	                                var skip = !1;
	                                if (maskset.jitOffset[maskPos] && void 0 === maskset.validPositions[_positioning.seekNext.call(inputmask, maskPos)] && (result = isValid.call(inputmask, maskPos + maskset.jitOffset[maskPos], c, !0), 
	                                !1 !== result && (!0 !== fromAlternate && (result.caret = maskPos), skip = !0)), 
	                                pos.end > maskPos && (maskset.validPositions[maskPos] = void 0), !skip && !_positioning.isMask.call(inputmask, maskPos, opts.keepStatic && 0 === maskPos)) for (var nPos = maskPos + 1, snPos = _positioning.seekNext.call(inputmask, maskPos, !1, 0 !== maskPos); nPos <= snPos; nPos++) if (result = _isValid(nPos, c, strict), 
	                                !1 !== result) {
	                                    result = trackbackPositions.call(inputmask, maskPos, void 0 !== result.pos ? result.pos : nPos) || result, 
	                                    maskPos = nPos;
	                                    break;
	                                }
	                            }
	                        } else result = {
	                            caret: _positioning.seekNext.call(inputmask, maskPos)
	                        };
	                    }
	                } else result = !1;
	                !1 !== result || !opts.keepStatic || !isComplete.call(inputmask, _positioning.getBuffer.call(inputmask)) && 0 !== maskPos || strict || !0 === fromAlternate ? isSelection(pos) && maskset.tests[maskPos] && 1 < maskset.tests[maskPos].length && opts.keepStatic && !strict && !0 !== fromAlternate && (result = alternate.call(inputmask, !0)) : result = alternate.call(inputmask, maskPos, c, strict, fromIsValid, void 0, pos), 
	                !0 === result && (result = {
	                    pos: maskPos
	                });
	            }
	            if ("function" == typeof opts.postValidation && !0 !== fromIsValid && !0 !== validateOnly) {
	                var postResult = opts.postValidation.call(el, _positioning.getBuffer.call(inputmask, !0), void 0 !== pos.begin ? inputmask.isRTL ? pos.end : pos.begin : pos, c, result, opts, maskset, strict, fromCheckval);
	                void 0 !== postResult && (result = !0 === postResult ? result : postResult);
	            }
	            result && void 0 === result.pos && (result.pos = maskPos), !1 === result || !0 === validateOnly ? (_positioning.resetMaskSet.call(inputmask, !0), 
	            maskset.validPositions = $.extend(!0, {}, positionsClone)) : trackbackPositions.call(inputmask, void 0, maskPos, !0);
	            var endResult = processCommandObject(result);
	            return endResult;
	        }
	        function positionCanMatchDefinition(pos, testDefinition, opts) {
	            for (var inputmask = this, maskset = this.maskset, valid = !1, tests = _validationTests.getTests.call(this, pos), tndx = 0; tndx < tests.length; tndx++) {
	                if (tests[tndx].match && (!(tests[tndx].match.nativeDef !== testDefinition.match[opts.shiftPositions ? "def" : "nativeDef"] || opts.shiftPositions && testDefinition.match.static) || tests[tndx].match.nativeDef === testDefinition.match.nativeDef)) {
	                    valid = !0;
	                    break;
	                }
	                if (tests[tndx].match && tests[tndx].match.def === testDefinition.match.nativeDef) {
	                    valid = void 0;
	                    break;
	                }
	            }
	            return !1 === valid && void 0 !== maskset.jitOffset[pos] && (valid = positionCanMatchDefinition.call(this, pos + maskset.jitOffset[pos], testDefinition, opts)), 
	            valid;
	        }
	        function refreshFromBuffer(start, end, buffer) {
	            var inputmask = this, maskset = this.maskset, opts = this.opts, $ = this.dependencyLib, el = this.el, i, p, skipOptionalPartCharacter = opts.skipOptionalPartCharacter, bffr = this.isRTL ? buffer.slice().reverse() : buffer;
	            if (opts.skipOptionalPartCharacter = "", !0 === start) _positioning.resetMaskSet.call(this), 
	            maskset.tests = {}, start = 0, end = buffer.length, p = _positioning.determineNewCaretPosition.call(this, {
	                begin: 0,
	                end: 0
	            }, !1).begin; else {
	                for (i = start; i < end; i++) delete maskset.validPositions[i];
	                p = start;
	            }
	            var keypress = new $.Event("keypress");
	            for (i = start; i < end; i++) {
	                keypress.which = bffr[i].toString().charCodeAt(0), this.ignorable = !1;
	                var valResult = _eventhandlers.EventHandlers.keypressEvent.call(el, keypress, !0, !1, !1, p);
	                !1 !== valResult && (p = valResult.forwardPosition);
	            }
	            opts.skipOptionalPartCharacter = skipOptionalPartCharacter;
	        }
	        function trackbackPositions(originalPos, newPos, fillOnly) {
	            var inputmask = this, maskset = this.maskset, $ = this.dependencyLib;
	            if (void 0 === originalPos) for (originalPos = newPos - 1; 0 < originalPos && !maskset.validPositions[originalPos]; originalPos--) ;
	            for (var ps = originalPos; ps < newPos; ps++) if (void 0 === maskset.validPositions[ps] && !_positioning.isMask.call(this, ps, !0)) {
	                var vp = 0 == ps ? _validationTests.getTest.call(this, ps) : maskset.validPositions[ps - 1];
	                if (vp) {
	                    var tests = _validationTests.getTests.call(this, ps).slice();
	                    "" === tests[tests.length - 1].match.def && tests.pop();
	                    var bestMatch = _validationTests.determineTestTemplate.call(this, ps, tests), np;
	                    if (bestMatch && (!0 !== bestMatch.match.jit || "master" === bestMatch.match.newBlockMarker && (np = maskset.validPositions[ps + 1]) && !0 === np.match.optionalQuantifier) && (bestMatch = $.extend({}, bestMatch, {
	                        input: _validationTests.getPlaceholder.call(this, ps, bestMatch.match, !0) || bestMatch.match.def
	                    }), bestMatch.generatedInput = !0, revalidateMask.call(this, ps, bestMatch, !0), 
	                    !0 !== fillOnly)) {
	                        var cvpInput = maskset.validPositions[newPos].input;
	                        return maskset.validPositions[newPos] = void 0, isValid.call(this, newPos, cvpInput, !0, !0);
	                    }
	                }
	            }
	        }
	        function revalidateMask(pos, validTest, fromIsValid, validatedPos) {
	            var inputmask = this, maskset = this.maskset, opts = this.opts, $ = this.dependencyLib;
	            function IsEnclosedStatic(pos, valids, selection) {
	                var posMatch = valids[pos];
	                if (void 0 === posMatch || !0 !== posMatch.match.static || !0 === posMatch.match.optionality || void 0 !== valids[0] && void 0 !== valids[0].alternation) return !1;
	                var prevMatch = selection.begin <= pos - 1 ? valids[pos - 1] && !0 === valids[pos - 1].match.static && valids[pos - 1] : valids[pos - 1], nextMatch = selection.end > pos + 1 ? valids[pos + 1] && !0 === valids[pos + 1].match.static && valids[pos + 1] : valids[pos + 1];
	                return prevMatch && nextMatch;
	            }
	            var offset = 0, begin = void 0 !== pos.begin ? pos.begin : pos, end = void 0 !== pos.end ? pos.end : pos;
	            if (pos.begin > pos.end && (begin = pos.end, end = pos.begin), validatedPos = void 0 !== validatedPos ? validatedPos : begin, 
	            begin !== end || opts.insertMode && void 0 !== maskset.validPositions[validatedPos] && void 0 === fromIsValid || void 0 === validTest) {
	                var positionsClone = $.extend(!0, {}, maskset.validPositions), lvp = _positioning.getLastValidPosition.call(this, void 0, !0), i;
	                for (maskset.p = begin, i = lvp; begin <= i; i--) delete maskset.validPositions[i], 
	                void 0 === validTest && delete maskset.tests[i + 1];
	                var valid = !0, j = validatedPos, posMatch = j, t, canMatch;
	                for (validTest && (maskset.validPositions[validatedPos] = $.extend(!0, {}, validTest), 
	                posMatch++, j++), i = validTest ? end : end - 1; i <= lvp; i++) {
	                    if (void 0 !== (t = positionsClone[i]) && !0 !== t.generatedInput && (end <= i || begin <= i && IsEnclosedStatic(i, positionsClone, {
	                        begin: begin,
	                        end: end
	                    }))) {
	                        for (;"" !== _validationTests.getTest.call(this, posMatch).match.def; ) {
	                            if (!1 !== (canMatch = positionCanMatchDefinition.call(this, posMatch, t, opts)) || "+" === t.match.def) {
	                                "+" === t.match.def && _positioning.getBuffer.call(this, !0);
	                                var result = isValid.call(this, posMatch, t.input, "+" !== t.match.def, "+" !== t.match.def);
	                                if (valid = !1 !== result, j = (result.pos || posMatch) + 1, !valid && canMatch) break;
	                            } else valid = !1;
	                            if (valid) {
	                                void 0 === validTest && t.match.static && i === pos.begin && offset++;
	                                break;
	                            }
	                            if (!valid && posMatch > maskset.maskLength) break;
	                            posMatch++;
	                        }
	                        "" == _validationTests.getTest.call(this, posMatch).match.def && (valid = !1), posMatch = j;
	                    }
	                    if (!valid) break;
	                }
	                if (!valid) return maskset.validPositions = $.extend(!0, {}, positionsClone), _positioning.resetMaskSet.call(this, !0), 
	                !1;
	            } else validTest && _validationTests.getTest.call(this, validatedPos).match.cd === validTest.match.cd && (maskset.validPositions[validatedPos] = $.extend(!0, {}, validTest));
	            return _positioning.resetMaskSet.call(this, !0), offset;
	        }
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.applyInputValue = applyInputValue, exports.clearOptionalTail = clearOptionalTail, 
	        exports.checkVal = checkVal, exports.HandleNativePlaceholder = HandleNativePlaceholder, 
	        exports.unmaskedvalue = unmaskedvalue, exports.writeBuffer = writeBuffer;
	        var _keycode = _interopRequireDefault(__webpack_require__(0)), _validationTests = __webpack_require__(3), _positioning = __webpack_require__(2), _validation = __webpack_require__(4), _environment = __webpack_require__(8), _eventhandlers = __webpack_require__(7);
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        function applyInputValue(input, value) {
	            var inputmask = input ? input.inputmask : this, opts = inputmask.opts;
	            input.inputmask.refreshValue = !1, "function" == typeof opts.onBeforeMask && (value = opts.onBeforeMask.call(inputmask, value, opts) || value), 
	            value = value.toString().split(""), checkVal(input, !0, !1, value), inputmask.undoValue = _positioning.getBuffer.call(inputmask).join(""), 
	            (opts.clearMaskOnLostFocus || opts.clearIncomplete) && input.inputmask._valueGet() === _positioning.getBufferTemplate.call(inputmask).join("") && -1 === _positioning.getLastValidPosition.call(inputmask) && input.inputmask._valueSet("");
	        }
	        function clearOptionalTail(buffer) {
	            var inputmask = this;
	            buffer.length = 0;
	            for (var template = _validationTests.getMaskTemplate.call(this, !0, 0, !0, void 0, !0), lmnt; void 0 !== (lmnt = template.shift()); ) buffer.push(lmnt);
	            return buffer;
	        }
	        function checkVal(input, writeOut, strict, nptvl, initiatingEvent) {
	            var inputmask = input ? input.inputmask : this, maskset = inputmask.maskset, opts = inputmask.opts, $ = inputmask.dependencyLib, inputValue = nptvl.slice(), charCodes = "", initialNdx = -1, result = void 0, skipOptionalPartCharacter = opts.skipOptionalPartCharacter;
	            function isTemplateMatch(ndx, charCodes) {
	                for (var targetTemplate = _validationTests.getMaskTemplate.call(inputmask, !0, 0).slice(ndx, _positioning.seekNext.call(inputmask, ndx)).join("").replace(/'/g, ""), charCodeNdx = targetTemplate.indexOf(charCodes); 0 < charCodeNdx && " " === targetTemplate[charCodeNdx - 1]; ) charCodeNdx--;
	                var match = 0 === charCodeNdx && !_positioning.isMask.call(inputmask, ndx) && (_validationTests.getTest.call(inputmask, ndx).match.nativeDef === charCodes.charAt(0) || !0 === _validationTests.getTest.call(inputmask, ndx).match.static && _validationTests.getTest.call(inputmask, ndx).match.nativeDef === "'" + charCodes.charAt(0) || " " === _validationTests.getTest.call(inputmask, ndx).match.nativeDef && (_validationTests.getTest.call(inputmask, ndx + 1).match.nativeDef === charCodes.charAt(0) || !0 === _validationTests.getTest.call(inputmask, ndx + 1).match.static && _validationTests.getTest.call(inputmask, ndx + 1).match.nativeDef === "'" + charCodes.charAt(0)));
	                if (!match && 0 < charCodeNdx && !_positioning.isMask.call(inputmask, ndx, !1, !0)) {
	                    var nextPos = _positioning.seekNext.call(inputmask, ndx);
	                    inputmask.caretPos.begin < nextPos && (inputmask.caretPos = {
	                        begin: nextPos
	                    });
	                }
	                return match;
	            }
	            opts.skipOptionalPartCharacter = "", _positioning.resetMaskSet.call(inputmask), 
	            maskset.tests = {}, initialNdx = opts.radixPoint ? _positioning.determineNewCaretPosition.call(inputmask, {
	                begin: 0,
	                end: 0
	            }).begin : 0, maskset.p = initialNdx, inputmask.caretPos = {
	                begin: initialNdx
	            };
	            var staticMatches = [], prevCaretPos = inputmask.caretPos;
	            if (inputValue.forEach(function(charCode, ndx) {
	                if (void 0 !== charCode) if (void 0 === maskset.validPositions[ndx] && inputValue[ndx] === _validationTests.getPlaceholder.call(inputmask, ndx) && _positioning.isMask.call(inputmask, ndx, !0) && !1 === _validation.isValid.call(inputmask, ndx, inputValue[ndx], !0, void 0, void 0, !0)) maskset.p++; else {
	                    var keypress = new $.Event("_checkval");
	                    keypress.which = charCode.toString().charCodeAt(0), charCodes += charCode;
	                    var lvp = _positioning.getLastValidPosition.call(inputmask, void 0, !0);
	                    isTemplateMatch(initialNdx, charCodes) ? result = _eventhandlers.EventHandlers.keypressEvent.call(input || inputmask, keypress, !0, !1, strict, lvp + 1) : (result = _eventhandlers.EventHandlers.keypressEvent.call(input || inputmask, keypress, !0, !1, strict, inputmask.caretPos.begin), 
	                    result && (initialNdx = inputmask.caretPos.begin + 1, charCodes = "")), result ? (void 0 !== result.pos && maskset.validPositions[result.pos] && !0 === maskset.validPositions[result.pos].match.static && void 0 === maskset.validPositions[result.pos].alternation && (staticMatches.push(result.pos), 
	                    inputmask.isRTL || (result.forwardPosition = result.pos + 1)), writeBuffer.call(inputmask, void 0, _positioning.getBuffer.call(inputmask), result.forwardPosition, keypress, !1), 
	                    inputmask.caretPos = {
	                        begin: result.forwardPosition,
	                        end: result.forwardPosition
	                    }, prevCaretPos = inputmask.caretPos) : inputmask.caretPos = prevCaretPos;
	                }
	            }), 0 < staticMatches.length) {
	                var sndx, validPos, nextValid = _positioning.seekNext.call(inputmask, -1, void 0, !1);
	                if (!_validation.isComplete.call(inputmask, _positioning.getBuffer.call(inputmask)) && staticMatches.length <= nextValid || _validation.isComplete.call(inputmask, _positioning.getBuffer.call(inputmask)) && 0 < staticMatches.length && staticMatches.length !== nextValid && 0 === staticMatches[0]) for (var nextSndx = nextValid; void 0 !== (sndx = staticMatches.shift()); ) {
	                    var keypress = new $.Event("_checkval");
	                    if (validPos = maskset.validPositions[sndx], validPos.generatedInput = !0, keypress.which = validPos.input.charCodeAt(0), 
	                    result = _eventhandlers.EventHandlers.keypressEvent.call(input, keypress, !0, !1, strict, nextSndx), 
	                    result && void 0 !== result.pos && result.pos !== sndx && maskset.validPositions[result.pos] && !0 === maskset.validPositions[result.pos].match.static) staticMatches.push(result.pos); else if (!result) break;
	                    nextSndx++;
	                }
	            }
	            writeOut && writeBuffer.call(inputmask, input, _positioning.getBuffer.call(inputmask), result ? result.forwardPosition : inputmask.caretPos.begin, initiatingEvent || new $.Event("checkval"), initiatingEvent && "input" === initiatingEvent.type && inputmask.undoValue !== _positioning.getBuffer.call(inputmask).join("")), 
	            opts.skipOptionalPartCharacter = skipOptionalPartCharacter;
	        }
	        function HandleNativePlaceholder(npt, value) {
	            var inputmask = npt ? npt.inputmask : this;
	            if (_environment.ie) {
	                if (npt.inputmask._valueGet() !== value && (npt.placeholder !== value || "" === npt.placeholder)) {
	                    var buffer = _positioning.getBuffer.call(inputmask).slice(), nptValue = npt.inputmask._valueGet();
	                    if (nptValue !== value) {
	                        var lvp = _positioning.getLastValidPosition.call(inputmask);
	                        -1 === lvp && nptValue === _positioning.getBufferTemplate.call(inputmask).join("") ? buffer = [] : -1 !== lvp && clearOptionalTail.call(inputmask, buffer), 
	                        writeBuffer(npt, buffer);
	                    }
	                }
	            } else npt.placeholder !== value && (npt.placeholder = value, "" === npt.placeholder && npt.removeAttribute("placeholder"));
	        }
	        function unmaskedvalue(input) {
	            var inputmask = input ? input.inputmask : this, opts = inputmask.opts, maskset = inputmask.maskset;
	            if (input) {
	                if (void 0 === input.inputmask) return input.value;
	                input.inputmask && input.inputmask.refreshValue && applyInputValue(input, input.inputmask._valueGet(!0));
	            }
	            var umValue = [], vps = maskset.validPositions;
	            for (var pndx in vps) vps[pndx] && vps[pndx].match && (1 != vps[pndx].match.static || Array.isArray(maskset.metadata) && !0 !== vps[pndx].generatedInput) && umValue.push(vps[pndx].input);
	            var unmaskedValue = 0 === umValue.length ? "" : (inputmask.isRTL ? umValue.reverse() : umValue).join("");
	            if ("function" == typeof opts.onUnMask) {
	                var bufferValue = (inputmask.isRTL ? _positioning.getBuffer.call(inputmask).slice().reverse() : _positioning.getBuffer.call(inputmask)).join("");
	                unmaskedValue = opts.onUnMask.call(inputmask, bufferValue, unmaskedValue, opts);
	            }
	            return unmaskedValue;
	        }
	        function writeBuffer(input, buffer, caretPos, event, triggerEvents) {
	            var inputmask = input ? input.inputmask : this, opts = inputmask.opts, $ = inputmask.dependencyLib;
	            if (event && "function" == typeof opts.onBeforeWrite) {
	                var result = opts.onBeforeWrite.call(inputmask, event, buffer, caretPos, opts);
	                if (result) {
	                    if (result.refreshFromBuffer) {
	                        var refresh = result.refreshFromBuffer;
	                        _validation.refreshFromBuffer.call(inputmask, !0 === refresh ? refresh : refresh.start, refresh.end, result.buffer || buffer), 
	                        buffer = _positioning.getBuffer.call(inputmask, !0);
	                    }
	                    void 0 !== caretPos && (caretPos = void 0 !== result.caret ? result.caret : caretPos);
	                }
	            }
	            if (void 0 !== input && (input.inputmask._valueSet(buffer.join("")), void 0 === caretPos || void 0 !== event && "blur" === event.type || _positioning.caret.call(inputmask, input, caretPos, void 0, void 0, void 0 !== event && "keydown" === event.type && (event.keyCode === _keycode.default.DELETE || event.keyCode === _keycode.default.BACKSPACE)), 
	            !0 === triggerEvents)) {
	                var $input = $(input), nptVal = input.inputmask._valueGet();
	                input.inputmask.skipInputEvent = !0, $input.trigger("input"), setTimeout(function() {
	                    nptVal === _positioning.getBufferTemplate.call(inputmask).join("") ? $input.trigger("cleared") : !0 === _validation.isComplete.call(inputmask, buffer) && $input.trigger("complete");
	                }, 0);
	            }
	        }
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.default = void 0;
	        var _default = "undefined" != typeof window ? window : new (eval("require('jsdom').JSDOM"))("").window;
	        exports.default = _default;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.EventHandlers = void 0;
	        var _positioning = __webpack_require__(2), _keycode = _interopRequireDefault(__webpack_require__(0)), _environment = __webpack_require__(8), _validation = __webpack_require__(4), _inputHandling = __webpack_require__(5), _validationTests = __webpack_require__(3);
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        var EventHandlers = {
	            keydownEvent: function keydownEvent(e) {
	                var inputmask = this.inputmask, opts = inputmask.opts, $ = inputmask.dependencyLib, maskset = inputmask.maskset, input = this, $input = $(input), k = e.keyCode, pos = _positioning.caret.call(inputmask, input), kdResult = opts.onKeyDown.call(this, e, _positioning.getBuffer.call(inputmask), pos, opts);
	                if (void 0 !== kdResult) return kdResult;
	                if (k === _keycode.default.BACKSPACE || k === _keycode.default.DELETE || _environment.iphone && k === _keycode.default.BACKSPACE_SAFARI || e.ctrlKey && k === _keycode.default.X && !("oncut" in input)) e.preventDefault(), 
	                _validation.handleRemove.call(inputmask, input, k, pos), (0, _inputHandling.writeBuffer)(input, _positioning.getBuffer.call(inputmask, !0), maskset.p, e, input.inputmask._valueGet() !== _positioning.getBuffer.call(inputmask).join("")); else if (k === _keycode.default.END || k === _keycode.default.PAGE_DOWN) {
	                    e.preventDefault();
	                    var caretPos = _positioning.seekNext.call(inputmask, _positioning.getLastValidPosition.call(inputmask));
	                    _positioning.caret.call(inputmask, input, e.shiftKey ? pos.begin : caretPos, caretPos, !0);
	                } else k === _keycode.default.HOME && !e.shiftKey || k === _keycode.default.PAGE_UP ? (e.preventDefault(), 
	                _positioning.caret.call(inputmask, input, 0, e.shiftKey ? pos.begin : 0, !0)) : (opts.undoOnEscape && k === _keycode.default.ESCAPE || 90 === k && e.ctrlKey) && !0 !== e.altKey ? ((0, 
	                _inputHandling.checkVal)(input, !0, !1, inputmask.undoValue.split("")), $input.trigger("click")) : !0 === opts.tabThrough && k === _keycode.default.TAB ? !0 === e.shiftKey ? (pos.end = _positioning.seekPrevious.call(inputmask, pos.end, !0), 
	                !0 === _validationTests.getTest.call(inputmask, pos.end - 1).match.static && pos.end--, 
	                pos.begin = _positioning.seekPrevious.call(inputmask, pos.end, !0), 0 <= pos.begin && 0 < pos.end && (e.preventDefault(), 
	                _positioning.caret.call(inputmask, input, pos.begin, pos.end))) : (pos.begin = _positioning.seekNext.call(inputmask, pos.begin, !0), 
	                pos.end = _positioning.seekNext.call(inputmask, pos.begin, !0), pos.end < maskset.maskLength && pos.end--, 
	                pos.begin <= maskset.maskLength && (e.preventDefault(), _positioning.caret.call(inputmask, input, pos.begin, pos.end))) : e.shiftKey || opts.insertModeVisual && !1 === opts.insertMode && (k === _keycode.default.RIGHT ? setTimeout(function() {
	                    var caretPos = _positioning.caret.call(inputmask, input);
	                    _positioning.caret.call(inputmask, input, caretPos.begin);
	                }, 0) : k === _keycode.default.LEFT && setTimeout(function() {
	                    var caretPos_begin = _positioning.translatePosition.call(inputmask, input.inputmask.caretPos.begin), caretPos_end = _positioning.translatePosition.call(inputmask, input.inputmask.caretPos.end);
	                    inputmask.isRTL ? _positioning.caret.call(inputmask, input, caretPos_begin + (caretPos_begin === maskset.maskLength ? 0 : 1)) : _positioning.caret.call(inputmask, input, caretPos_begin - (0 === caretPos_begin ? 0 : 1));
	                }, 0));
	                inputmask.ignorable = opts.ignorables.includes(k);
	            },
	            keypressEvent: function keypressEvent(e, checkval, writeOut, strict, ndx) {
	                var inputmask = this.inputmask || this, opts = inputmask.opts, $ = inputmask.dependencyLib, maskset = inputmask.maskset, input = inputmask.el, $input = $(input), k = e.which || e.charCode || e.keyCode;
	                if (!(!0 === checkval || e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || inputmask.ignorable)) return k === _keycode.default.ENTER && inputmask.undoValue !== _positioning.getBuffer.call(inputmask).join("") && (inputmask.undoValue = _positioning.getBuffer.call(inputmask).join(""), 
	                setTimeout(function() {
	                    $input.trigger("change");
	                }, 0)), inputmask.skipInputEvent = !0, !0;
	                if (k) {
	                    44 !== k && 46 !== k || 3 !== e.location || "" === opts.radixPoint || (k = opts.radixPoint.charCodeAt(0));
	                    var pos = checkval ? {
	                        begin: ndx,
	                        end: ndx
	                    } : _positioning.caret.call(inputmask, input), forwardPosition, c = String.fromCharCode(k);
	                    maskset.writeOutBuffer = !0;
	                    var valResult = _validation.isValid.call(inputmask, pos, c, strict, void 0, void 0, void 0, checkval);
	                    if (!1 !== valResult && (_positioning.resetMaskSet.call(inputmask, !0), forwardPosition = void 0 !== valResult.caret ? valResult.caret : _positioning.seekNext.call(inputmask, valResult.pos.begin ? valResult.pos.begin : valResult.pos), 
	                    maskset.p = forwardPosition), forwardPosition = opts.numericInput && void 0 === valResult.caret ? _positioning.seekPrevious.call(inputmask, forwardPosition) : forwardPosition, 
	                    !1 !== writeOut && (setTimeout(function() {
	                        opts.onKeyValidation.call(input, k, valResult);
	                    }, 0), maskset.writeOutBuffer && !1 !== valResult)) {
	                        var buffer = _positioning.getBuffer.call(inputmask);
	                        (0, _inputHandling.writeBuffer)(input, buffer, forwardPosition, e, !0 !== checkval);
	                    }
	                    if (e.preventDefault(), checkval) return !1 !== valResult && (valResult.forwardPosition = forwardPosition), 
	                    valResult;
	                }
	            },
	            keyupEvent: function keyupEvent(e) {
	                var inputmask = this.inputmask;
	                !inputmask.isComposing || e.keyCode !== _keycode.default.KEY_229 && e.keyCode !== _keycode.default.ENTER || inputmask.$el.trigger("input");
	            },
	            pasteEvent: function pasteEvent(e) {
	                var inputmask = this.inputmask, opts = inputmask.opts, input = this, inputValue = inputmask._valueGet(!0), caretPos = _positioning.caret.call(inputmask, this), tempValue;
	                inputmask.isRTL && (tempValue = caretPos.end, caretPos.end = caretPos.begin, caretPos.begin = tempValue);
	                var valueBeforeCaret = inputValue.substr(0, caretPos.begin), valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);
	                if (valueBeforeCaret == (inputmask.isRTL ? _positioning.getBufferTemplate.call(inputmask).slice().reverse() : _positioning.getBufferTemplate.call(inputmask)).slice(0, caretPos.begin).join("") && (valueBeforeCaret = ""), 
	                valueAfterCaret == (inputmask.isRTL ? _positioning.getBufferTemplate.call(inputmask).slice().reverse() : _positioning.getBufferTemplate.call(inputmask)).slice(caretPos.end).join("") && (valueAfterCaret = ""), 
	                window.clipboardData && window.clipboardData.getData) inputValue = valueBeforeCaret + window.clipboardData.getData("Text") + valueAfterCaret; else {
	                    if (!e.clipboardData || !e.clipboardData.getData) return !0;
	                    inputValue = valueBeforeCaret + e.clipboardData.getData("text/plain") + valueAfterCaret;
	                }
	                var pasteValue = inputValue;
	                if ("function" == typeof opts.onBeforePaste) {
	                    if (pasteValue = opts.onBeforePaste.call(inputmask, inputValue, opts), !1 === pasteValue) return e.preventDefault();
	                    pasteValue = pasteValue || inputValue;
	                }
	                return (0, _inputHandling.checkVal)(this, !0, !1, pasteValue.toString().split(""), e), 
	                e.preventDefault();
	            },
	            inputFallBackEvent: function inputFallBackEvent(e) {
	                var inputmask = this.inputmask, opts = inputmask.opts, $ = inputmask.dependencyLib;
	                function ieMobileHandler(input, inputValue, caretPos) {
	                    if (_environment.iemobile) {
	                        var inputChar = inputValue.replace(_positioning.getBuffer.call(inputmask).join(""), "");
	                        if (1 === inputChar.length) {
	                            var iv = inputValue.split("");
	                            iv.splice(caretPos.begin, 0, inputChar), inputValue = iv.join("");
	                        }
	                    }
	                    return inputValue;
	                }
	                function analyseChanges(inputValue, buffer, caretPos) {
	                    for (var frontPart = inputValue.substr(0, caretPos.begin).split(""), backPart = inputValue.substr(caretPos.begin).split(""), frontBufferPart = buffer.substr(0, caretPos.begin).split(""), backBufferPart = buffer.substr(caretPos.begin).split(""), fpl = frontPart.length >= frontBufferPart.length ? frontPart.length : frontBufferPart.length, bpl = backPart.length >= backBufferPart.length ? backPart.length : backBufferPart.length, bl, i, action = "", data = [], marker = "~", placeholder; frontPart.length < fpl; ) frontPart.push("~");
	                    for (;frontBufferPart.length < fpl; ) frontBufferPart.push("~");
	                    for (;backPart.length < bpl; ) backPart.unshift("~");
	                    for (;backBufferPart.length < bpl; ) backBufferPart.unshift("~");
	                    var newBuffer = frontPart.concat(backPart), oldBuffer = frontBufferPart.concat(backBufferPart);
	                    for (i = 0, bl = newBuffer.length; i < bl; i++) switch (placeholder = _validationTests.getPlaceholder.call(inputmask, _positioning.translatePosition.call(inputmask, i)), 
	                    action) {
	                      case "insertText":
	                        oldBuffer[i - 1] === newBuffer[i] && caretPos.begin == newBuffer.length - 1 && data.push(newBuffer[i]), 
	                        i = bl;
	                        break;
	
	                      case "insertReplacementText":
	                        "~" === newBuffer[i] ? caretPos.end++ : i = bl;
	                        break;
	
	                      case "deleteContentBackward":
	                        "~" === newBuffer[i] ? caretPos.end++ : i = bl;
	                        break;
	
	                      default:
	                        newBuffer[i] !== oldBuffer[i] && ("~" !== newBuffer[i + 1] && newBuffer[i + 1] !== placeholder && void 0 !== newBuffer[i + 1] || (oldBuffer[i] !== placeholder || "~" !== oldBuffer[i + 1]) && "~" !== oldBuffer[i] ? "~" === oldBuffer[i + 1] && oldBuffer[i] === newBuffer[i + 1] ? (action = "insertText", 
	                        data.push(newBuffer[i]), caretPos.begin--, caretPos.end--) : newBuffer[i] !== placeholder && "~" !== newBuffer[i] && ("~" === newBuffer[i + 1] || oldBuffer[i] !== newBuffer[i] && oldBuffer[i + 1] === newBuffer[i + 1]) ? (action = "insertReplacementText", 
	                        data.push(newBuffer[i]), caretPos.begin--) : "~" === newBuffer[i] ? (action = "deleteContentBackward", 
	                        !_positioning.isMask.call(inputmask, _positioning.translatePosition.call(inputmask, i), !0) && oldBuffer[i] !== opts.radixPoint || caretPos.end++) : i = bl : (action = "insertText", 
	                        data.push(newBuffer[i]), caretPos.begin--, caretPos.end--));
	                        break;
	                    }
	                    return {
	                        action: action,
	                        data: data,
	                        caret: caretPos
	                    };
	                }
	                var input = this, inputValue = input.inputmask._valueGet(!0), buffer = (inputmask.isRTL ? _positioning.getBuffer.call(inputmask).slice().reverse() : _positioning.getBuffer.call(inputmask)).join(""), caretPos = _positioning.caret.call(inputmask, input, void 0, void 0, !0);
	                if (buffer !== inputValue) {
	                    inputValue = ieMobileHandler(input, inputValue, caretPos);
	                    var changes = analyseChanges(inputValue, buffer, caretPos);
	                    switch ((input.inputmask.shadowRoot || document).activeElement !== input && input.focus(), 
	                    (0, _inputHandling.writeBuffer)(input, _positioning.getBuffer.call(inputmask)), 
	                    _positioning.caret.call(inputmask, input, caretPos.begin, caretPos.end, !0), changes.action) {
	                      case "insertText":
	                      case "insertReplacementText":
	                        changes.data.forEach(function(entry, ndx) {
	                            var keypress = new $.Event("keypress");
	                            keypress.which = entry.charCodeAt(0), inputmask.ignorable = !1, EventHandlers.keypressEvent.call(input, keypress);
	                        }), setTimeout(function() {
	                            inputmask.$el.trigger("keyup");
	                        }, 0);
	                        break;
	
	                      case "deleteContentBackward":
	                        var keydown = new $.Event("keydown");
	                        keydown.keyCode = _keycode.default.BACKSPACE, EventHandlers.keydownEvent.call(input, keydown);
	                        break;
	
	                      default:
	                        (0, _inputHandling.applyInputValue)(input, inputValue);
	                        break;
	                    }
	                    e.preventDefault();
	                }
	            },
	            compositionendEvent: function compositionendEvent(e) {
	                var inputmask = this.inputmask;
	                inputmask.isComposing = !1, inputmask.$el.trigger("input");
	            },
	            setValueEvent: function setValueEvent(e, argument_1, argument_2) {
	                var inputmask = this.inputmask, input = this, value = e && e.detail ? e.detail[0] : argument_1;
	                void 0 === value && (value = this.inputmask._valueGet(!0)), (0, _inputHandling.applyInputValue)(this, value), 
	                (e.detail && void 0 !== e.detail[1] || void 0 !== argument_2) && _positioning.caret.call(inputmask, this, e.detail ? e.detail[1] : argument_2);
	            },
	            focusEvent: function focusEvent(e) {
	                var inputmask = this.inputmask, opts = inputmask.opts, input = this, nptValue = this.inputmask._valueGet();
	                opts.showMaskOnFocus && nptValue !== _positioning.getBuffer.call(inputmask).join("") && (0, 
	                _inputHandling.writeBuffer)(this, _positioning.getBuffer.call(inputmask), _positioning.seekNext.call(inputmask, _positioning.getLastValidPosition.call(inputmask))), 
	                !0 !== opts.positionCaretOnTab || !1 !== inputmask.mouseEnter || _validation.isComplete.call(inputmask, _positioning.getBuffer.call(inputmask)) && -1 !== _positioning.getLastValidPosition.call(inputmask) || EventHandlers.clickEvent.apply(this, [ e, !0 ]), 
	                inputmask.undoValue = _positioning.getBuffer.call(inputmask).join("");
	            },
	            invalidEvent: function invalidEvent(e) {
	                this.inputmask.validationEvent = !0;
	            },
	            mouseleaveEvent: function mouseleaveEvent() {
	                var inputmask = this.inputmask, opts = inputmask.opts, input = this;
	                inputmask.mouseEnter = !1, opts.clearMaskOnLostFocus && (this.inputmask.shadowRoot || document).activeElement !== this && (0, 
	                _inputHandling.HandleNativePlaceholder)(this, inputmask.originalPlaceholder);
	            },
	            clickEvent: function clickEvent(e, tabbed) {
	                var inputmask = this.inputmask, input = this;
	                if ((this.inputmask.shadowRoot || document).activeElement === this) {
	                    var newCaretPosition = _positioning.determineNewCaretPosition.call(inputmask, _positioning.caret.call(inputmask, this), tabbed);
	                    void 0 !== newCaretPosition && _positioning.caret.call(inputmask, this, newCaretPosition);
	                }
	            },
	            cutEvent: function cutEvent(e) {
	                var inputmask = this.inputmask, maskset = inputmask.maskset, input = this, pos = _positioning.caret.call(inputmask, this), clipboardData = window.clipboardData || e.clipboardData, clipData = inputmask.isRTL ? _positioning.getBuffer.call(inputmask).slice(pos.end, pos.begin) : _positioning.getBuffer.call(inputmask).slice(pos.begin, pos.end);
	                clipboardData.setData("text", inputmask.isRTL ? clipData.reverse().join("") : clipData.join("")), 
	                document.execCommand && document.execCommand("copy"), _validation.handleRemove.call(inputmask, this, _keycode.default.DELETE, pos), 
	                (0, _inputHandling.writeBuffer)(this, _positioning.getBuffer.call(inputmask), maskset.p, e, inputmask.undoValue !== _positioning.getBuffer.call(inputmask).join(""));
	            },
	            blurEvent: function blurEvent(e) {
	                var inputmask = this.inputmask, opts = inputmask.opts, $ = inputmask.dependencyLib, $input = $(this), input = this;
	                if (this.inputmask) {
	                    (0, _inputHandling.HandleNativePlaceholder)(this, inputmask.originalPlaceholder);
	                    var nptValue = this.inputmask._valueGet(), buffer = _positioning.getBuffer.call(inputmask).slice();
	                    "" !== nptValue && (opts.clearMaskOnLostFocus && (-1 === _positioning.getLastValidPosition.call(inputmask) && nptValue === _positioning.getBufferTemplate.call(inputmask).join("") ? buffer = [] : _inputHandling.clearOptionalTail.call(inputmask, buffer)), 
	                    !1 === _validation.isComplete.call(inputmask, buffer) && (setTimeout(function() {
	                        $input.trigger("incomplete");
	                    }, 0), opts.clearIncomplete && (_positioning.resetMaskSet.call(inputmask), buffer = opts.clearMaskOnLostFocus ? [] : _positioning.getBufferTemplate.call(inputmask).slice())), 
	                    (0, _inputHandling.writeBuffer)(this, buffer, void 0, e)), inputmask.undoValue !== _positioning.getBuffer.call(inputmask).join("") && (inputmask.undoValue = _positioning.getBuffer.call(inputmask).join(""), 
	                    $input.trigger("change"));
	                }
	            },
	            mouseenterEvent: function mouseenterEvent() {
	                var inputmask = this.inputmask, opts = inputmask.opts, input = this;
	                inputmask.mouseEnter = !0, (this.inputmask.shadowRoot || document).activeElement !== this && (null == inputmask.originalPlaceholder && this.placeholder !== inputmask.originalPlaceholder && (inputmask.originalPlaceholder = this.placeholder), 
	                opts.showMaskOnHover && (0, _inputHandling.HandleNativePlaceholder)(this, (inputmask.isRTL ? _positioning.getBufferTemplate.call(inputmask).slice().reverse() : _positioning.getBufferTemplate.call(inputmask)).join("")));
	            },
	            submitEvent: function submitEvent() {
	                var inputmask = this.inputmask, opts = inputmask.opts;
	                inputmask.undoValue !== _positioning.getBuffer.call(inputmask).join("") && inputmask.$el.trigger("change"), 
	                opts.clearMaskOnLostFocus && -1 === _positioning.getLastValidPosition.call(inputmask) && inputmask._valueGet && inputmask._valueGet() === _positioning.getBufferTemplate.call(inputmask).join("") && inputmask._valueSet(""), 
	                opts.clearIncomplete && !1 === _validation.isComplete.call(inputmask, _positioning.getBuffer.call(inputmask)) && inputmask._valueSet(""), 
	                opts.removeMaskOnSubmit && (inputmask._valueSet(inputmask.unmaskedvalue(), !0), 
	                setTimeout(function() {
	                    (0, _inputHandling.writeBuffer)(inputmask.el, _positioning.getBuffer.call(inputmask));
	                }, 0));
	            },
	            resetEvent: function resetEvent() {
	                var inputmask = this.inputmask;
	                inputmask.refreshValue = !0, setTimeout(function() {
	                    (0, _inputHandling.applyInputValue)(inputmask.el, inputmask._valueGet(!0));
	                }, 0);
	            }
	        };
	        exports.EventHandlers = EventHandlers;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.iphone = exports.iemobile = exports.mobile = exports.ie = exports.ua = void 0;
	        var ua = window.navigator && window.navigator.userAgent || "", ie = 0 < ua.indexOf("MSIE ") || 0 < ua.indexOf("Trident/"), mobile = "ontouchstart" in window, iemobile = /iemobile/i.test(ua), iphone = /iphone/i.test(ua) && !iemobile;
	        exports.iphone = iphone, exports.iemobile = iemobile, exports.mobile = mobile, exports.ie = ie, 
	        exports.ua = ua;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.default = void 0;
	        var _extend = _interopRequireDefault(__webpack_require__(13)), _window = _interopRequireDefault(__webpack_require__(6)), _data = _interopRequireDefault(__webpack_require__(17)), _events = __webpack_require__(18);
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        var document = _window.default.document;
	        function DependencyLib(elem) {
	            return elem instanceof DependencyLib ? elem : this instanceof DependencyLib ? void (null != elem && elem !== _window.default && (this[0] = elem.nodeName ? elem : void 0 !== elem[0] && elem[0].nodeName ? elem[0] : document.querySelector(elem), 
	            void 0 !== this[0] && null !== this[0] && (this[0].eventRegistry = this[0].eventRegistry || {}))) : new DependencyLib(elem);
	        }
	        DependencyLib.prototype = {
	            on: _events.on,
	            off: _events.off,
	            trigger: _events.trigger
	        }, DependencyLib.extend = _extend.default, DependencyLib.data = _data.default, DependencyLib.Event = _events.Event;
	        var _default = DependencyLib;
	        exports.default = _default;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        function _typeof(obj) {
	            return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function _typeof(obj) {
	                return typeof obj;
	            } : function _typeof(obj) {
	                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	            }, _typeof(obj);
	        }
	        "function" != typeof Object.getPrototypeOf && (Object.getPrototypeOf = "object" === _typeof("test".__proto__) ? function(object) {
	            return object.__proto__;
	        } : function(object) {
	            return object.constructor.prototype;
	        });
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.mask = mask, __webpack_require__(10);
	        var _keycode = _interopRequireDefault(__webpack_require__(0)), _positioning = __webpack_require__(2), _inputHandling = __webpack_require__(5), _eventruler = __webpack_require__(12), _environment = __webpack_require__(8), _validation = __webpack_require__(4), _eventhandlers = __webpack_require__(7);
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        function mask() {
	            var inputmask = this, opts = this.opts, el = this.el, $ = this.dependencyLib;
	            function isElementTypeSupported(input, opts) {
	                function patchValueProperty(npt) {
	                    var valueGet, valueSet;
	                    function patchValhook(type) {
	                        if ($.valHooks && (void 0 === $.valHooks[type] || !0 !== $.valHooks[type].inputmaskpatch)) {
	                            var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function(elem) {
	                                return elem.value;
	                            }, valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function(elem, value) {
	                                return elem.value = value, elem;
	                            };
	                            $.valHooks[type] = {
	                                get: function get(elem) {
	                                    if (elem.inputmask) {
	                                        if (elem.inputmask.opts.autoUnmask) return elem.inputmask.unmaskedvalue();
	                                        var result = valhookGet(elem);
	                                        return -1 !== _positioning.getLastValidPosition.call(inputmask, void 0, void 0, elem.inputmask.maskset.validPositions) || !0 !== opts.nullable ? result : "";
	                                    }
	                                    return valhookGet(elem);
	                                },
	                                set: function set(elem, value) {
	                                    var result = valhookSet(elem, value);
	                                    return elem.inputmask && (0, _inputHandling.applyInputValue)(elem, value), result;
	                                },
	                                inputmaskpatch: !0
	                            };
	                        }
	                    }
	                    function getter() {
	                        return this.inputmask ? this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : -1 !== _positioning.getLastValidPosition.call(inputmask) || !0 !== opts.nullable ? (this.inputmask.shadowRoot || document.activeElement) === this && opts.clearMaskOnLostFocus ? (inputmask.isRTL ? _inputHandling.clearOptionalTail.call(inputmask, _positioning.getBuffer.call(inputmask).slice()).reverse() : _inputHandling.clearOptionalTail.call(inputmask, _positioning.getBuffer.call(inputmask).slice())).join("") : valueGet.call(this) : "" : valueGet.call(this);
	                    }
	                    function setter(value) {
	                        valueSet.call(this, value), this.inputmask && (0, _inputHandling.applyInputValue)(this, value);
	                    }
	                    function installNativeValueSetFallback(npt) {
	                        _eventruler.EventRuler.on(npt, "mouseenter", function() {
	                            var input = this, value = this.inputmask._valueGet(!0);
	                            value !== (inputmask.isRTL ? _positioning.getBuffer.call(inputmask).reverse() : _positioning.getBuffer.call(inputmask)).join("") && (0, 
	                            _inputHandling.applyInputValue)(this, value);
	                        });
	                    }
	                    if (!npt.inputmask.__valueGet) {
	                        if (!0 !== opts.noValuePatching) {
	                            if (Object.getOwnPropertyDescriptor) {
	                                var valueProperty = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(npt), "value") : void 0;
	                                valueProperty && valueProperty.get && valueProperty.set ? (valueGet = valueProperty.get, 
	                                valueSet = valueProperty.set, Object.defineProperty(npt, "value", {
	                                    get: getter,
	                                    set: setter,
	                                    configurable: !0
	                                })) : "input" !== npt.tagName.toLowerCase() && (valueGet = function valueGet() {
	                                    return this.textContent;
	                                }, valueSet = function valueSet(value) {
	                                    this.textContent = value;
	                                }, Object.defineProperty(npt, "value", {
	                                    get: getter,
	                                    set: setter,
	                                    configurable: !0
	                                }));
	                            } else document.__lookupGetter__ && npt.__lookupGetter__("value") && (valueGet = npt.__lookupGetter__("value"), 
	                            valueSet = npt.__lookupSetter__("value"), npt.__defineGetter__("value", getter), 
	                            npt.__defineSetter__("value", setter));
	                            npt.inputmask.__valueGet = valueGet, npt.inputmask.__valueSet = valueSet;
	                        }
	                        npt.inputmask._valueGet = function(overruleRTL) {
	                            return inputmask.isRTL && !0 !== overruleRTL ? valueGet.call(this.el).split("").reverse().join("") : valueGet.call(this.el);
	                        }, npt.inputmask._valueSet = function(value, overruleRTL) {
	                            valueSet.call(this.el, null == value ? "" : !0 !== overruleRTL && inputmask.isRTL ? value.split("").reverse().join("") : value);
	                        }, void 0 === valueGet && (valueGet = function valueGet() {
	                            return this.value;
	                        }, valueSet = function valueSet(value) {
	                            this.value = value;
	                        }, patchValhook(npt.type), installNativeValueSetFallback(npt));
	                    }
	                }
	                "textarea" !== input.tagName.toLowerCase() && opts.ignorables.push(_keycode.default.ENTER);
	                var elementType = input.getAttribute("type"), isSupported = "input" === input.tagName.toLowerCase() && opts.supportsInputType.includes(elementType) || input.isContentEditable || "textarea" === input.tagName.toLowerCase();
	                if (!isSupported) if ("input" === input.tagName.toLowerCase()) {
	                    var el = document.createElement("input");
	                    el.setAttribute("type", elementType), isSupported = "text" === el.type, el = null;
	                } else isSupported = "partial";
	                return !1 !== isSupported ? patchValueProperty(input) : input.inputmask = void 0, 
	                isSupported;
	            }
	            _eventruler.EventRuler.off(el);
	            var isSupported = isElementTypeSupported(el, opts);
	            if (!1 !== isSupported) {
	                inputmask.originalPlaceholder = el.placeholder, inputmask.maxLength = void 0 !== el ? el.maxLength : void 0, 
	                -1 === inputmask.maxLength && (inputmask.maxLength = void 0), "inputMode" in el && null === el.getAttribute("inputmode") && (el.inputMode = opts.inputmode, 
	                el.setAttribute("inputmode", opts.inputmode)), !0 === isSupported && (opts.showMaskOnFocus = opts.showMaskOnFocus && -1 === [ "cc-number", "cc-exp" ].indexOf(el.autocomplete), 
	                _environment.iphone && (opts.insertModeVisual = !1), _eventruler.EventRuler.on(el, "submit", _eventhandlers.EventHandlers.submitEvent), 
	                _eventruler.EventRuler.on(el, "reset", _eventhandlers.EventHandlers.resetEvent), 
	                _eventruler.EventRuler.on(el, "blur", _eventhandlers.EventHandlers.blurEvent), _eventruler.EventRuler.on(el, "focus", _eventhandlers.EventHandlers.focusEvent), 
	                _eventruler.EventRuler.on(el, "invalid", _eventhandlers.EventHandlers.invalidEvent), 
	                _eventruler.EventRuler.on(el, "click", _eventhandlers.EventHandlers.clickEvent), 
	                _eventruler.EventRuler.on(el, "mouseleave", _eventhandlers.EventHandlers.mouseleaveEvent), 
	                _eventruler.EventRuler.on(el, "mouseenter", _eventhandlers.EventHandlers.mouseenterEvent), 
	                _eventruler.EventRuler.on(el, "paste", _eventhandlers.EventHandlers.pasteEvent), 
	                _eventruler.EventRuler.on(el, "cut", _eventhandlers.EventHandlers.cutEvent), _eventruler.EventRuler.on(el, "complete", opts.oncomplete), 
	                _eventruler.EventRuler.on(el, "incomplete", opts.onincomplete), _eventruler.EventRuler.on(el, "cleared", opts.oncleared), 
	                !0 !== opts.inputEventOnly && (_eventruler.EventRuler.on(el, "keydown", _eventhandlers.EventHandlers.keydownEvent), 
	                _eventruler.EventRuler.on(el, "keypress", _eventhandlers.EventHandlers.keypressEvent), 
	                _eventruler.EventRuler.on(el, "keyup", _eventhandlers.EventHandlers.keyupEvent)), 
	                (_environment.mobile || opts.inputEventOnly) && el.removeAttribute("maxLength"), 
	                _eventruler.EventRuler.on(el, "input", _eventhandlers.EventHandlers.inputFallBackEvent), 
	                _eventruler.EventRuler.on(el, "compositionend", _eventhandlers.EventHandlers.compositionendEvent)), 
	                _eventruler.EventRuler.on(el, "setvalue", _eventhandlers.EventHandlers.setValueEvent), 
	                inputmask.undoValue = _positioning.getBufferTemplate.call(inputmask).join("");
	                var activeElement = (el.inputmask.shadowRoot || document).activeElement;
	                if ("" !== el.inputmask._valueGet(!0) || !1 === opts.clearMaskOnLostFocus || activeElement === el) {
	                    (0, _inputHandling.applyInputValue)(el, el.inputmask._valueGet(!0), opts);
	                    var buffer = _positioning.getBuffer.call(inputmask).slice();
	                    !1 === _validation.isComplete.call(inputmask, buffer) && opts.clearIncomplete && _positioning.resetMaskSet.call(inputmask), 
	                    opts.clearMaskOnLostFocus && activeElement !== el && (-1 === _positioning.getLastValidPosition.call(inputmask) ? buffer = [] : _inputHandling.clearOptionalTail.call(inputmask, buffer)), 
	                    (!1 === opts.clearMaskOnLostFocus || opts.showMaskOnFocus && activeElement === el || "" !== el.inputmask._valueGet(!0)) && (0, 
	                    _inputHandling.writeBuffer)(el, buffer), activeElement === el && _positioning.caret.call(inputmask, el, _positioning.seekNext.call(inputmask, _positioning.getLastValidPosition.call(inputmask)));
	                }
	            }
	        }
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.EventRuler = void 0;
	        var _inputmask = _interopRequireDefault(__webpack_require__(1)), _keycode = _interopRequireDefault(__webpack_require__(0)), _positioning = __webpack_require__(2), _inputHandling = __webpack_require__(5);
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        var EventRuler = {
	            on: function on(input, eventName, eventHandler) {
	                var $ = input.inputmask.dependencyLib, ev = function ev(e) {
	                    e.originalEvent && (e = e.originalEvent || e, arguments[0] = e);
	                    var that = this, args, inputmask = that.inputmask, opts = inputmask ? inputmask.opts : void 0, $ = inputmask.dependencyLib;
	                    if (void 0 === inputmask && "FORM" !== this.nodeName) {
	                        var imOpts = $.data(that, "_inputmask_opts");
	                        $(that).off(), imOpts && new _inputmask.default(imOpts).mask(that);
	                    } else {
	                        if ("setvalue" === e.type || "FORM" === this.nodeName || !(that.disabled || that.readOnly && !("keydown" === e.type && e.ctrlKey && 67 === e.keyCode || !1 === opts.tabThrough && e.keyCode === _keycode.default.TAB))) {
	                            switch (e.type) {
	                              case "input":
	                                if (!0 === inputmask.skipInputEvent || e.inputType && "insertCompositionText" === e.inputType) return inputmask.skipInputEvent = !1, 
	                                e.preventDefault();
	                                break;
	
	                              case "keydown":
	                                inputmask.skipKeyPressEvent = !1, inputmask.skipInputEvent = inputmask.isComposing = e.keyCode === _keycode.default.KEY_229;
	                                break;
	
	                              case "keyup":
	                              case "compositionend":
	                                inputmask.isComposing && (inputmask.skipInputEvent = !1);
	                                break;
	
	                              case "keypress":
	                                if (!0 === inputmask.skipKeyPressEvent) return e.preventDefault();
	                                inputmask.skipKeyPressEvent = !0;
	                                break;
	
	                              case "click":
	                              case "focus":
	                                return inputmask.validationEvent ? (inputmask.validationEvent = !1, input.blur(), 
	                                (0, _inputHandling.HandleNativePlaceholder)(input, (inputmask.isRTL ? _positioning.getBufferTemplate.call(inputmask).slice().reverse() : _positioning.getBufferTemplate.call(inputmask)).join("")), 
	                                setTimeout(function() {
	                                    input.focus();
	                                }, 3e3)) : (args = arguments, setTimeout(function() {
	                                    input.inputmask && eventHandler.apply(that, args);
	                                }, 0)), !1;
	                            }
	                            var returnVal = eventHandler.apply(that, arguments);
	                            return !1 === returnVal && (e.preventDefault(), e.stopPropagation()), returnVal;
	                        }
	                        e.preventDefault();
	                    }
	                };
	                input.inputmask.events[eventName] = input.inputmask.events[eventName] || [], input.inputmask.events[eventName].push(ev), 
	                [ "submit", "reset" ].includes(eventName) ? null !== input.form && $(input.form).on(eventName, ev.bind(input)) : $(input).on(eventName, ev);
	            },
	            off: function off(input, event) {
	                if (input.inputmask && input.inputmask.events) {
	                    var $ = input.inputmask.dependencyLib, events = input.inputmask.events;
	                    for (var eventName in event && (events = [], events[event] = input.inputmask.events[event]), 
	                    events) {
	                        for (var evArr = events[eventName]; 0 < evArr.length; ) {
	                            var ev = evArr.pop();
	                            [ "submit", "reset" ].includes(eventName) ? null !== input.form && $(input.form).off(eventName, ev) : $(input).off(eventName, ev);
	                        }
	                        delete input.inputmask.events[eventName];
	                    }
	                }
	            }
	        };
	        exports.EventRuler = EventRuler;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        function _typeof(obj) {
	            return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function _typeof(obj) {
	                return typeof obj;
	            } : function _typeof(obj) {
	                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	            }, _typeof(obj);
	        }
	        function extend() {
	            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = !1;
	            for ("boolean" == typeof target && (deep = target, target = arguments[i] || {}, 
	            i++), "object" !== _typeof(target) && "function" != typeof target && (target = {}); i < length; i++) if (null != (options = arguments[i])) for (name in options) src = target[name], 
	            copy = options[name], target !== copy && (deep && copy && ("[object Object]" === Object.prototype.toString.call(copy) || (copyIsArray = Array.isArray(copy))) ? (clone = copyIsArray ? (copyIsArray = !1, 
	            src && Array.isArray(src) ? src : []) : src && "[object Object]" === Object.prototype.toString.call(src) ? src : {}, 
	            target[name] = extend(deep, clone, copy)) : void 0 !== copy && (target[name] = copy));
	            return target;
	        }
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.default = extend;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.default = _default;
	        var escapeRegexRegex = new RegExp("(\\" + [ "/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "$", "^" ].join("|\\") + ")", "gim");
	        function _default(str) {
	            return str.replace(escapeRegexRegex, "\\$1");
	        }
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.default = void 0, __webpack_require__(16), __webpack_require__(22), 
	        __webpack_require__(23), __webpack_require__(24);
	        var _inputmask2 = _interopRequireDefault(__webpack_require__(1));
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        var _default = _inputmask2.default;
	        exports.default = _default;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        var _inputmask = _interopRequireDefault(__webpack_require__(1));
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        _inputmask.default.extendDefinitions({
	            A: {
	                validator: "[A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
	                casing: "upper"
	            },
	            "&": {
	                validator: "[0-9A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
	                casing: "upper"
	            },
	            "#": {
	                validator: "[0-9A-Fa-f]",
	                casing: "upper"
	            }
	        });
	        var ipValidatorRegex = new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]");
	        function ipValidator(chrs, maskset, pos, strict, opts) {
	            return chrs = -1 < pos - 1 && "." !== maskset.buffer[pos - 1] ? (chrs = maskset.buffer[pos - 1] + chrs, 
	            -1 < pos - 2 && "." !== maskset.buffer[pos - 2] ? maskset.buffer[pos - 2] + chrs : "0" + chrs) : "00" + chrs, 
	            ipValidatorRegex.test(chrs);
	        }
	        _inputmask.default.extendAliases({
	            cssunit: {
	                regex: "[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"
	            },
	            url: {
	                regex: "(https?|ftp)://.*",
	                autoUnmask: !1,
	                keepStatic: !1,
	                tabThrough: !0
	            },
	            ip: {
	                mask: "i[i[i]].j[j[j]].k[k[k]].l[l[l]]",
	                definitions: {
	                    i: {
	                        validator: ipValidator
	                    },
	                    j: {
	                        validator: ipValidator
	                    },
	                    k: {
	                        validator: ipValidator
	                    },
	                    l: {
	                        validator: ipValidator
	                    }
	                },
	                onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
	                    return maskedValue;
	                },
	                inputmode: "numeric"
	            },
	            email: {
	                mask: "*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",
	                greedy: !1,
	                casing: "lower",
	                onBeforePaste: function onBeforePaste(pastedValue, opts) {
	                    return pastedValue = pastedValue.toLowerCase(), pastedValue.replace("mailto:", "");
	                },
	                definitions: {
	                    "*": {
	                        validator: "[0-9\uff11-\uff19A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5!#$%&'*+/=?^_`{|}~-]"
	                    },
	                    "-": {
	                        validator: "[0-9A-Za-z-]"
	                    }
	                },
	                onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
	                    return maskedValue;
	                },
	                inputmode: "email"
	            },
	            mac: {
	                mask: "##:##:##:##:##:##"
	            },
	            vin: {
	                mask: "V{13}9{4}",
	                definitions: {
	                    V: {
	                        validator: "[A-HJ-NPR-Za-hj-npr-z\\d]",
	                        casing: "upper"
	                    }
	                },
	                clearIncomplete: !0,
	                autoUnmask: !0
	            },
	            ssn: {
	                mask: "999-99-9999",
	                postValidation: function postValidation(buffer, pos, c, currentResult, opts, maskset, strict) {
	                    return /^(?!219-09-9999|078-05-1120)(?!666|000|9.{2}).{3}-(?!00).{2}-(?!0{4}).{4}$/.test(buffer.join(""));
	                }
	            }
	        });
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        function _default(owner, key, value) {
	            if (void 0 === value) return owner.__data ? owner.__data[key] : null;
	            owner.__data = owner.__data || {}, owner.__data[key] = value;
	        }
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.default = _default;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.on = on, exports.off = off, exports.trigger = trigger, exports.Event = void 0;
	        var _extend = _interopRequireDefault(__webpack_require__(13)), _window = _interopRequireDefault(__webpack_require__(6)), _inputmask = _interopRequireDefault(__webpack_require__(9)), Event;
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        function isValidElement(elem) {
	            return elem instanceof Element;
	        }
	        function on(events, handler) {
	            function addEvent(ev, namespace) {
	                elem.addEventListener ? elem.addEventListener(ev, handler, !1) : elem.attachEvent && elem.attachEvent("on" + ev, handler), 
	                eventRegistry[ev] = eventRegistry[ev] || {}, eventRegistry[ev][namespace] = eventRegistry[ev][namespace] || [], 
	                eventRegistry[ev][namespace].push(handler);
	            }
	            if (isValidElement(this[0])) for (var eventRegistry = this[0].eventRegistry, elem = this[0], _events = events.split(" "), endx = 0; endx < _events.length; endx++) {
	                var nsEvent = _events[endx].split("."), ev = nsEvent[0], namespace = nsEvent[1] || "global";
	                addEvent(ev, namespace);
	            }
	            return this;
	        }
	        function off(events, handler) {
	            var eventRegistry, elem;
	            function removeEvent(ev, namespace, handler) {
	                if (ev in eventRegistry == !0) if (elem.removeEventListener ? elem.removeEventListener(ev, handler, !1) : elem.detachEvent && elem.detachEvent("on" + ev, handler), 
	                "global" === namespace) for (var nmsp in eventRegistry[ev]) eventRegistry[ev][nmsp].splice(eventRegistry[ev][nmsp].indexOf(handler), 1); else eventRegistry[ev][namespace].splice(eventRegistry[ev][namespace].indexOf(handler), 1);
	            }
	            function resolveNamespace(ev, namespace) {
	                var evts = [], hndx, hndL;
	                if (0 < ev.length) if (void 0 === handler) for (hndx = 0, hndL = eventRegistry[ev][namespace].length; hndx < hndL; hndx++) evts.push({
	                    ev: ev,
	                    namespace: namespace && 0 < namespace.length ? namespace : "global",
	                    handler: eventRegistry[ev][namespace][hndx]
	                }); else evts.push({
	                    ev: ev,
	                    namespace: namespace && 0 < namespace.length ? namespace : "global",
	                    handler: handler
	                }); else if (0 < namespace.length) for (var evNdx in eventRegistry) for (var nmsp in eventRegistry[evNdx]) if (nmsp === namespace) if (void 0 === handler) for (hndx = 0, 
	                hndL = eventRegistry[evNdx][nmsp].length; hndx < hndL; hndx++) evts.push({
	                    ev: evNdx,
	                    namespace: nmsp,
	                    handler: eventRegistry[evNdx][nmsp][hndx]
	                }); else evts.push({
	                    ev: evNdx,
	                    namespace: nmsp,
	                    handler: handler
	                });
	                return evts;
	            }
	            if (isValidElement(this[0])) {
	                eventRegistry = this[0].eventRegistry, elem = this[0];
	                for (var _events = events.split(" "), endx = 0; endx < _events.length; endx++) for (var nsEvent = _events[endx].split("."), offEvents = resolveNamespace(nsEvent[0], nsEvent[1]), i = 0, offEventsL = offEvents.length; i < offEventsL; i++) removeEvent(offEvents[i].ev, offEvents[i].namespace, offEvents[i].handler);
	            }
	            return this;
	        }
	        function trigger(events) {
	            if (isValidElement(this[0])) for (var eventRegistry = this[0].eventRegistry, elem = this[0], _events = "string" == typeof events ? events.split(" ") : [ events.type ], endx = 0; endx < _events.length; endx++) {
	                var nsEvent = _events[endx].split("."), ev = nsEvent[0], namespace = nsEvent[1] || "global";
	                if (void 0 !== document && "global" === namespace) {
	                    var evnt, i, params = {
	                        bubbles: !0,
	                        cancelable: !0,
	                        detail: arguments[1]
	                    };
	                    if (document.createEvent) {
	                        try {
	                            evnt = new CustomEvent(ev, params);
	                        } catch (e) {
	                            evnt = document.createEvent("CustomEvent"), evnt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);
	                        }
	                        events.type && (0, _extend.default)(evnt, events), elem.dispatchEvent(evnt);
	                    } else evnt = document.createEventObject(), evnt.eventType = ev, evnt.detail = arguments[1], 
	                    events.type && (0, _extend.default)(evnt, events), elem.fireEvent("on" + evnt.eventType, evnt);
	                } else if (void 0 !== eventRegistry[ev]) if (arguments[0] = arguments[0].type ? arguments[0] : _inputmask.default.Event(arguments[0]), 
	                arguments[0].detail = arguments.slice(1), "global" === namespace) for (var nmsp in eventRegistry[ev]) for (i = 0; i < eventRegistry[ev][nmsp].length; i++) eventRegistry[ev][nmsp][i].apply(elem, arguments); else for (i = 0; i < eventRegistry[ev][namespace].length; i++) eventRegistry[ev][namespace][i].apply(elem, arguments);
	            }
	            return this;
	        }
	        exports.Event = Event, "function" == typeof _window.default.CustomEvent ? exports.Event = Event = _window.default.CustomEvent : (exports.Event = Event = function Event(event, params) {
	            params = params || {
	                bubbles: !1,
	                cancelable: !1,
	                detail: void 0
	            };
	            var evt = document.createEvent("CustomEvent");
	            return evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail), 
	            evt;
	        }, Event.prototype = _window.default.Event.prototype);
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.generateMaskSet = generateMaskSet, exports.analyseMask = analyseMask;
	        var _inputmask = _interopRequireDefault(__webpack_require__(9));
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        function generateMaskSet(opts, nocache) {
	            var ms;
	            function generateMask(mask, metadata, opts) {
	                var regexMask = !1, masksetDefinition, maskdefKey;
	                if (null !== mask && "" !== mask || (regexMask = null !== opts.regex, mask = regexMask ? (mask = opts.regex, 
	                mask.replace(/^(\^)(.*)(\$)$/, "$2")) : (regexMask = !0, ".*")), 1 === mask.length && !1 === opts.greedy && 0 !== opts.repeat && (opts.placeholder = ""), 
	                0 < opts.repeat || "*" === opts.repeat || "+" === opts.repeat) {
	                    var repeatStart = "*" === opts.repeat ? 0 : "+" === opts.repeat ? 1 : opts.repeat;
	                    mask = opts.groupmarker[0] + mask + opts.groupmarker[1] + opts.quantifiermarker[0] + repeatStart + "," + opts.repeat + opts.quantifiermarker[1];
	                }
	                return maskdefKey = regexMask ? "regex_" + opts.regex : opts.numericInput ? mask.split("").reverse().join("") : mask, 
	                !1 !== opts.keepStatic && (maskdefKey = "ks_" + maskdefKey), void 0 === Inputmask.prototype.masksCache[maskdefKey] || !0 === nocache ? (masksetDefinition = {
	                    mask: mask,
	                    maskToken: Inputmask.prototype.analyseMask(mask, regexMask, opts),
	                    validPositions: {},
	                    _buffer: void 0,
	                    buffer: void 0,
	                    tests: {},
	                    excludes: {},
	                    metadata: metadata,
	                    maskLength: void 0,
	                    jitOffset: {}
	                }, !0 !== nocache && (Inputmask.prototype.masksCache[maskdefKey] = masksetDefinition, 
	                masksetDefinition = _inputmask.default.extend(!0, {}, Inputmask.prototype.masksCache[maskdefKey]))) : masksetDefinition = _inputmask.default.extend(!0, {}, Inputmask.prototype.masksCache[maskdefKey]), 
	                masksetDefinition;
	            }
	            if ("function" == typeof opts.mask && (opts.mask = opts.mask(opts)), Array.isArray(opts.mask)) {
	                if (1 < opts.mask.length) {
	                    null === opts.keepStatic && (opts.keepStatic = !0);
	                    var altMask = opts.groupmarker[0];
	                    return (opts.isRTL ? opts.mask.reverse() : opts.mask).forEach(function(msk) {
	                        1 < altMask.length && (altMask += opts.groupmarker[1] + opts.alternatormarker + opts.groupmarker[0]), 
	                        void 0 !== msk.mask && "function" != typeof msk.mask ? altMask += msk.mask : altMask += msk;
	                    }), altMask += opts.groupmarker[1], generateMask(altMask, opts.mask, opts);
	                }
	                opts.mask = opts.mask.pop();
	            }
	            return null === opts.keepStatic && (opts.keepStatic = !1), ms = opts.mask && void 0 !== opts.mask.mask && "function" != typeof opts.mask.mask ? generateMask(opts.mask.mask, opts.mask, opts) : generateMask(opts.mask, opts.mask, opts), 
	            ms;
	        }
	        function analyseMask(mask, regexMask, opts) {
	            var tokenizer = /(?:[?*+]|\{[0-9+*]+(?:,[0-9+*]*)?(?:\|[0-9+*]*)?\})|[^.?*+^${[]()|\\]+|./g, regexTokenizer = /\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g, escaped = !1, currentToken = new MaskToken(), match, m, openenings = [], maskTokens = [], openingToken, currentOpeningToken, alternator, lastMatch, closeRegexGroup = !1;
	            function MaskToken(isGroup, isOptional, isQuantifier, isAlternator) {
	                this.matches = [], this.openGroup = isGroup || !1, this.alternatorGroup = !1, this.isGroup = isGroup || !1, 
	                this.isOptional = isOptional || !1, this.isQuantifier = isQuantifier || !1, this.isAlternator = isAlternator || !1, 
	                this.quantifier = {
	                    min: 1,
	                    max: 1
	                };
	            }
	            function insertTestDefinition(mtoken, element, position) {
	                position = void 0 !== position ? position : mtoken.matches.length;
	                var prevMatch = mtoken.matches[position - 1];
	                if (regexMask) 0 === element.indexOf("[") || escaped && /\\d|\\s|\\w]/i.test(element) || "." === element ? mtoken.matches.splice(position++, 0, {
	                    fn: new RegExp(element, opts.casing ? "i" : ""),
	                    static: !1,
	                    optionality: !1,
	                    newBlockMarker: void 0 === prevMatch ? "master" : prevMatch.def !== element,
	                    casing: null,
	                    def: element,
	                    placeholder: void 0,
	                    nativeDef: element
	                }) : (escaped && (element = element[element.length - 1]), element.split("").forEach(function(lmnt, ndx) {
	                    prevMatch = mtoken.matches[position - 1], mtoken.matches.splice(position++, 0, {
	                        fn: /[a-z]/i.test(opts.staticDefinitionSymbol || lmnt) ? new RegExp("[" + (opts.staticDefinitionSymbol || lmnt) + "]", opts.casing ? "i" : "") : null,
	                        static: !0,
	                        optionality: !1,
	                        newBlockMarker: void 0 === prevMatch ? "master" : prevMatch.def !== lmnt && !0 !== prevMatch.static,
	                        casing: null,
	                        def: opts.staticDefinitionSymbol || lmnt,
	                        placeholder: void 0 !== opts.staticDefinitionSymbol ? lmnt : void 0,
	                        nativeDef: (escaped ? "'" : "") + lmnt
	                    });
	                })), escaped = !1; else {
	                    var maskdef = opts.definitions && opts.definitions[element] || opts.usePrototypeDefinitions && Inputmask.prototype.definitions[element];
	                    maskdef && !escaped ? mtoken.matches.splice(position++, 0, {
	                        fn: maskdef.validator ? "string" == typeof maskdef.validator ? new RegExp(maskdef.validator, opts.casing ? "i" : "") : new function() {
	                            this.test = maskdef.validator;
	                        }() : new RegExp("."),
	                        static: maskdef.static || !1,
	                        optionality: !1,
	                        newBlockMarker: void 0 === prevMatch ? "master" : prevMatch.def !== (maskdef.definitionSymbol || element),
	                        casing: maskdef.casing,
	                        def: maskdef.definitionSymbol || element,
	                        placeholder: maskdef.placeholder,
	                        nativeDef: element,
	                        generated: maskdef.generated
	                    }) : (mtoken.matches.splice(position++, 0, {
	                        fn: /[a-z]/i.test(opts.staticDefinitionSymbol || element) ? new RegExp("[" + (opts.staticDefinitionSymbol || element) + "]", opts.casing ? "i" : "") : null,
	                        static: !0,
	                        optionality: !1,
	                        newBlockMarker: void 0 === prevMatch ? "master" : prevMatch.def !== element && !0 !== prevMatch.static,
	                        casing: null,
	                        def: opts.staticDefinitionSymbol || element,
	                        placeholder: void 0 !== opts.staticDefinitionSymbol ? element : void 0,
	                        nativeDef: (escaped ? "'" : "") + element
	                    }), escaped = !1);
	                }
	            }
	            function verifyGroupMarker(maskToken) {
	                maskToken && maskToken.matches && maskToken.matches.forEach(function(token, ndx) {
	                    var nextToken = maskToken.matches[ndx + 1];
	                    (void 0 === nextToken || void 0 === nextToken.matches || !1 === nextToken.isQuantifier) && token && token.isGroup && (token.isGroup = !1, 
	                    regexMask || (insertTestDefinition(token, opts.groupmarker[0], 0), !0 !== token.openGroup && insertTestDefinition(token, opts.groupmarker[1]))), 
	                    verifyGroupMarker(token);
	                });
	            }
	            function defaultCase() {
	                if (0 < openenings.length) {
	                    if (currentOpeningToken = openenings[openenings.length - 1], insertTestDefinition(currentOpeningToken, m), 
	                    currentOpeningToken.isAlternator) {
	                        alternator = openenings.pop();
	                        for (var mndx = 0; mndx < alternator.matches.length; mndx++) alternator.matches[mndx].isGroup && (alternator.matches[mndx].isGroup = !1);
	                        0 < openenings.length ? (currentOpeningToken = openenings[openenings.length - 1], 
	                        currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
	                    }
	                } else insertTestDefinition(currentToken, m);
	            }
	            function reverseTokens(maskToken) {
	                function reverseStatic(st) {
	                    return st === opts.optionalmarker[0] ? st = opts.optionalmarker[1] : st === opts.optionalmarker[1] ? st = opts.optionalmarker[0] : st === opts.groupmarker[0] ? st = opts.groupmarker[1] : st === opts.groupmarker[1] && (st = opts.groupmarker[0]), 
	                    st;
	                }
	                for (var match in maskToken.matches = maskToken.matches.reverse(), maskToken.matches) if (Object.prototype.hasOwnProperty.call(maskToken.matches, match)) {
	                    var intMatch = parseInt(match);
	                    if (maskToken.matches[match].isQuantifier && maskToken.matches[intMatch + 1] && maskToken.matches[intMatch + 1].isGroup) {
	                        var qt = maskToken.matches[match];
	                        maskToken.matches.splice(match, 1), maskToken.matches.splice(intMatch + 1, 0, qt);
	                    }
	                    void 0 !== maskToken.matches[match].matches ? maskToken.matches[match] = reverseTokens(maskToken.matches[match]) : maskToken.matches[match] = reverseStatic(maskToken.matches[match]);
	                }
	                return maskToken;
	            }
	            function groupify(matches) {
	                var groupToken = new MaskToken(!0);
	                return groupToken.openGroup = !1, groupToken.matches = matches, groupToken;
	            }
	            function closeGroup() {
	                if (openingToken = openenings.pop(), openingToken.openGroup = !1, void 0 !== openingToken) if (0 < openenings.length) {
	                    if (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.push(openingToken), 
	                    currentOpeningToken.isAlternator) {
	                        alternator = openenings.pop();
	                        for (var mndx = 0; mndx < alternator.matches.length; mndx++) alternator.matches[mndx].isGroup = !1, 
	                        alternator.matches[mndx].alternatorGroup = !1;
	                        0 < openenings.length ? (currentOpeningToken = openenings[openenings.length - 1], 
	                        currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
	                    }
	                } else currentToken.matches.push(openingToken); else defaultCase();
	            }
	            function groupQuantifier(matches) {
	                var lastMatch = matches.pop();
	                return lastMatch.isQuantifier && (lastMatch = groupify([ matches.pop(), lastMatch ])), 
	                lastMatch;
	            }
	            for (regexMask && (opts.optionalmarker[0] = void 0, opts.optionalmarker[1] = void 0); match = regexMask ? regexTokenizer.exec(mask) : tokenizer.exec(mask); ) {
	                if (m = match[0], regexMask) switch (m.charAt(0)) {
	                  case "?":
	                    m = "{0,1}";
	                    break;
	
	                  case "+":
	                  case "*":
	                    m = "{" + m + "}";
	                    break;
	
	                  case "|":
	                    if (0 === openenings.length) {
	                        var altRegexGroup = groupify(currentToken.matches);
	                        altRegexGroup.openGroup = !0, openenings.push(altRegexGroup), currentToken.matches = [], 
	                        closeRegexGroup = !0;
	                    }
	                    break;
	                }
	                if (escaped) defaultCase(); else switch (m.charAt(0)) {
	                  case "$":
	                  case "^":
	                    regexMask || defaultCase();
	                    break;
	
	                  case "(?=":
	                    break;
	
	                  case "(?!":
	                    break;
	
	                  case "(?<=":
	                    break;
	
	                  case "(?<!":
	                    break;
	
	                  case opts.escapeChar:
	                    escaped = !0, regexMask && defaultCase();
	                    break;
	
	                  case opts.optionalmarker[1]:
	                  case opts.groupmarker[1]:
	                    closeGroup();
	                    break;
	
	                  case opts.optionalmarker[0]:
	                    openenings.push(new MaskToken(!1, !0));
	                    break;
	
	                  case opts.groupmarker[0]:
	                    openenings.push(new MaskToken(!0));
	                    break;
	
	                  case opts.quantifiermarker[0]:
	                    var quantifier = new MaskToken(!1, !1, !0);
	                    m = m.replace(/[{}]/g, "");
	                    var mqj = m.split("|"), mq = mqj[0].split(","), mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]), mq1 = 1 === mq.length ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);
	                    "*" !== mq0 && "+" !== mq0 || (mq0 = "*" === mq1 ? 0 : 1), quantifier.quantifier = {
	                        min: mq0,
	                        max: mq1,
	                        jit: mqj[1]
	                    };
	                    var matches = 0 < openenings.length ? openenings[openenings.length - 1].matches : currentToken.matches;
	                    if (match = matches.pop(), match.isAlternator) {
	                        matches.push(match), matches = match.matches;
	                        var groupToken = new MaskToken(!0), tmpMatch = matches.pop();
	                        matches.push(groupToken), matches = groupToken.matches, match = tmpMatch;
	                    }
	                    match.isGroup || (match = groupify([ match ])), matches.push(match), matches.push(quantifier);
	                    break;
	
	                  case opts.alternatormarker:
	                    if (0 < openenings.length) {
	                        currentOpeningToken = openenings[openenings.length - 1];
	                        var subToken = currentOpeningToken.matches[currentOpeningToken.matches.length - 1];
	                        lastMatch = currentOpeningToken.openGroup && (void 0 === subToken.matches || !1 === subToken.isGroup && !1 === subToken.isAlternator) ? openenings.pop() : groupQuantifier(currentOpeningToken.matches);
	                    } else lastMatch = groupQuantifier(currentToken.matches);
	                    if (lastMatch.isAlternator) openenings.push(lastMatch); else if (lastMatch.alternatorGroup ? (alternator = openenings.pop(), 
	                    lastMatch.alternatorGroup = !1) : alternator = new MaskToken(!1, !1, !1, !0), alternator.matches.push(lastMatch), 
	                    openenings.push(alternator), lastMatch.openGroup) {
	                        lastMatch.openGroup = !1;
	                        var alternatorGroup = new MaskToken(!0);
	                        alternatorGroup.alternatorGroup = !0, openenings.push(alternatorGroup);
	                    }
	                    break;
	
	                  default:
	                    defaultCase();
	                }
	            }
	            for (closeRegexGroup && closeGroup(); 0 < openenings.length; ) openingToken = openenings.pop(), 
	            currentToken.matches.push(openingToken);
	            return 0 < currentToken.matches.length && (verifyGroupMarker(currentToken), maskTokens.push(currentToken)), 
	            (opts.numericInput || opts.isRTL) && reverseTokens(maskTokens[0]), maskTokens;
	        }
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.default = void 0;
	        var _default = {
	            9: {
	                validator: "[0-9\uff10-\uff19]",
	                definitionSymbol: "*"
	            },
	            a: {
	                validator: "[A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
	                definitionSymbol: "*"
	            },
	            "*": {
	                validator: "[0-9\uff10-\uff19A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]"
	            }
	        };
	        exports.default = _default;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        Object.defineProperty(exports, "__esModule", {
	            value: !0
	        }), exports.default = void 0;
	        var _default = {
	            _maxTestPos: 500,
	            placeholder: "_",
	            optionalmarker: [ "[", "]" ],
	            quantifiermarker: [ "{", "}" ],
	            groupmarker: [ "(", ")" ],
	            alternatormarker: "|",
	            escapeChar: "\\",
	            mask: null,
	            regex: null,
	            oncomplete: function oncomplete() {},
	            onincomplete: function onincomplete() {},
	            oncleared: function oncleared() {},
	            repeat: 0,
	            greedy: !1,
	            autoUnmask: !1,
	            removeMaskOnSubmit: !1,
	            clearMaskOnLostFocus: !0,
	            insertMode: !0,
	            insertModeVisual: !0,
	            clearIncomplete: !1,
	            alias: null,
	            onKeyDown: function onKeyDown() {},
	            onBeforeMask: null,
	            onBeforePaste: function onBeforePaste(pastedValue, opts) {
	                return "function" == typeof opts.onBeforeMask ? opts.onBeforeMask.call(this, pastedValue, opts) : pastedValue;
	            },
	            onBeforeWrite: null,
	            onUnMask: null,
	            showMaskOnFocus: !0,
	            showMaskOnHover: !0,
	            onKeyValidation: function onKeyValidation() {},
	            skipOptionalPartCharacter: " ",
	            numericInput: !1,
	            rightAlign: !1,
	            undoOnEscape: !0,
	            radixPoint: "",
	            _radixDance: !1,
	            groupSeparator: "",
	            keepStatic: null,
	            positionCaretOnTab: !0,
	            tabThrough: !1,
	            supportsInputType: [ "text", "tel", "url", "password", "search" ],
	            ignorables: [ 8, 9, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 0, 229 ],
	            isComplete: null,
	            preValidation: null,
	            postValidation: null,
	            staticDefinitionSymbol: void 0,
	            jitMasking: !1,
	            nullable: !0,
	            inputEventOnly: !1,
	            noValuePatching: !1,
	            positionCaretOnClick: "lvp",
	            casing: null,
	            inputmode: "text",
	            importDataAttributes: !0,
	            shiftPositions: !0,
	            usePrototypeDefinitions: !0
	        };
	        exports.default = _default;
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        var _inputmask = _interopRequireDefault(__webpack_require__(1)), _keycode = _interopRequireDefault(__webpack_require__(0)), _escapeRegex = _interopRequireDefault(__webpack_require__(14));
	        function _typeof(obj) {
	            return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function _typeof(obj) {
	                return typeof obj;
	            } : function _typeof(obj) {
	                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	            }, _typeof(obj);
	        }
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        var $ = _inputmask.default.dependencyLib, currentYear = new Date().getFullYear(), formatCode = {
	            d: [ "[1-9]|[12][0-9]|3[01]", Date.prototype.setDate, "day", Date.prototype.getDate ],
	            dd: [ "0[1-9]|[12][0-9]|3[01]", Date.prototype.setDate, "day", function() {
	                return pad(Date.prototype.getDate.call(this), 2);
	            } ],
	            ddd: [ "" ],
	            dddd: [ "" ],
	            m: [ "[1-9]|1[012]", Date.prototype.setMonth, "month", function() {
	                return Date.prototype.getMonth.call(this) + 1;
	            } ],
	            mm: [ "0[1-9]|1[012]", Date.prototype.setMonth, "month", function() {
	                return pad(Date.prototype.getMonth.call(this) + 1, 2);
	            } ],
	            mmm: [ "" ],
	            mmmm: [ "" ],
	            yy: [ "[0-9]{2}", Date.prototype.setFullYear, "year", function() {
	                return pad(Date.prototype.getFullYear.call(this), 2);
	            } ],
	            yyyy: [ "[0-9]{4}", Date.prototype.setFullYear, "year", function() {
	                return pad(Date.prototype.getFullYear.call(this), 4);
	            } ],
	            h: [ "[1-9]|1[0-2]", Date.prototype.setHours, "hours", Date.prototype.getHours ],
	            hh: [ "0[1-9]|1[0-2]", Date.prototype.setHours, "hours", function() {
	                return pad(Date.prototype.getHours.call(this), 2);
	            } ],
	            hx: [ function(x) {
	                return "[0-9]{".concat(x, "}");
	            }, Date.prototype.setHours, "hours", function(x) {
	                return Date.prototype.getHours;
	            } ],
	            H: [ "1?[0-9]|2[0-3]", Date.prototype.setHours, "hours", Date.prototype.getHours ],
	            HH: [ "0[0-9]|1[0-9]|2[0-3]", Date.prototype.setHours, "hours", function() {
	                return pad(Date.prototype.getHours.call(this), 2);
	            } ],
	            Hx: [ function(x) {
	                return "[0-9]{".concat(x, "}");
	            }, Date.prototype.setHours, "hours", function(x) {
	                return function() {
	                    return pad(Date.prototype.getHours.call(this), x);
	                };
	            } ],
	            M: [ "[1-5]?[0-9]", Date.prototype.setMinutes, "minutes", Date.prototype.getMinutes ],
	            MM: [ "0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]", Date.prototype.setMinutes, "minutes", function() {
	                return pad(Date.prototype.getMinutes.call(this), 2);
	            } ],
	            s: [ "[1-5]?[0-9]", Date.prototype.setSeconds, "seconds", Date.prototype.getSeconds ],
	            ss: [ "0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]", Date.prototype.setSeconds, "seconds", function() {
	                return pad(Date.prototype.getSeconds.call(this), 2);
	            } ],
	            l: [ "[0-9]{3}", Date.prototype.setMilliseconds, "milliseconds", function() {
	                return pad(Date.prototype.getMilliseconds.call(this), 3);
	            } ],
	            L: [ "[0-9]{2}", Date.prototype.setMilliseconds, "milliseconds", function() {
	                return pad(Date.prototype.getMilliseconds.call(this), 2);
	            } ],
	            t: [ "[ap]" ],
	            tt: [ "[ap]m" ],
	            T: [ "[AP]" ],
	            TT: [ "[AP]M" ],
	            Z: [ "" ],
	            o: [ "" ],
	            S: [ "" ]
	        }, formatAlias = {
	            isoDate: "yyyy-mm-dd",
	            isoTime: "HH:MM:ss",
	            isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
	            isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
	        };
	        function formatcode(match) {
	            var dynMatches = new RegExp("\\d+$").exec(match[0]);
	            if (dynMatches && void 0 !== dynMatches[0]) {
	                var fcode = formatCode[match[0][0] + "x"].slice("");
	                return fcode[0] = fcode[0](dynMatches[0]), fcode[3] = fcode[3](dynMatches[0]), fcode;
	            }
	            if (formatCode[match[0]]) return formatCode[match[0]];
	        }
	        function getTokenizer(opts) {
	            if (!opts.tokenizer) {
	                var tokens = [], dyntokens = [];
	                for (var ndx in formatCode) if (/\.*x$/.test(ndx)) {
	                    var dynToken = ndx[0] + "\\d+";
	                    -1 === dyntokens.indexOf(dynToken) && dyntokens.push(dynToken);
	                } else -1 === tokens.indexOf(ndx[0]) && tokens.push(ndx[0]);
	                opts.tokenizer = "(" + (0 < dyntokens.length ? dyntokens.join("|") + "|" : "") + tokens.join("+|") + ")+?|.", 
	                opts.tokenizer = new RegExp(opts.tokenizer, "g");
	            }
	            return opts.tokenizer;
	        }
	        function prefillYear(dateParts, currentResult, opts) {
	            if (dateParts.year !== dateParts.rawyear) {
	                var crrntyear = currentYear.toString(), enteredPart = dateParts.rawyear.replace(/[^0-9]/g, ""), currentYearPart = crrntyear.slice(0, enteredPart.length), currentYearNextPart = crrntyear.slice(enteredPart.length);
	                if (2 === enteredPart.length && enteredPart === currentYearPart) {
	                    var entryCurrentYear = new Date(currentYear, dateParts.month - 1, dateParts.day);
	                    dateParts.day == entryCurrentYear.getDate() && (!opts.max || opts.max.date.getTime() >= entryCurrentYear.getTime()) && (dateParts.date.setFullYear(currentYear), 
	                    dateParts.year = crrntyear, currentResult.insert = [ {
	                        pos: currentResult.pos + 1,
	                        c: currentYearNextPart[0]
	                    }, {
	                        pos: currentResult.pos + 2,
	                        c: currentYearNextPart[1]
	                    } ]);
	                }
	            }
	            return currentResult;
	        }
	        function isValidDate(dateParts, currentResult, opts) {
	            if (!isFinite(dateParts.rawday) || "29" == dateParts.day && !isFinite(dateParts.rawyear) || new Date(dateParts.date.getFullYear(), isFinite(dateParts.rawmonth) ? dateParts.month : dateParts.date.getMonth() + 1, 0).getDate() >= dateParts.day) return currentResult;
	            if ("29" == dateParts.day) {
	                var tokenMatch = getTokenMatch(currentResult.pos, opts);
	                if ("yyyy" === tokenMatch.targetMatch[0] && currentResult.pos - tokenMatch.targetMatchIndex == 2) return currentResult.remove = currentResult.pos + 1, 
	                currentResult;
	            }
	            return !1;
	        }
	        function isDateInRange(dateParts, result, opts, maskset, fromCheckval) {
	            if (!result) return result;
	            if (opts.min) {
	                if (dateParts.rawyear) {
	                    var rawYear = dateParts.rawyear.replace(/[^0-9]/g, ""), minYear = opts.min.year.substr(0, rawYear.length), maxYear;
	                    if (rawYear < minYear) {
	                        var tokenMatch = getTokenMatch(result.pos, opts);
	                        if (rawYear = dateParts.rawyear.substr(0, result.pos - tokenMatch.targetMatchIndex + 1), 
	                        minYear = opts.min.year.substr(0, rawYear.length), minYear <= rawYear) return result.remove = tokenMatch.targetMatchIndex + rawYear.length, 
	                        result;
	                        if (rawYear = "yyyy" === tokenMatch.targetMatch[0] ? dateParts.rawyear.substr(1, 1) : dateParts.rawyear.substr(0, 1), 
	                        minYear = opts.min.year.substr(2, 1), maxYear = opts.max ? opts.max.year.substr(2, 1) : rawYear, 
	                        1 === rawYear.length && minYear <= rawYear <= maxYear && !0 !== fromCheckval) return "yyyy" === tokenMatch.targetMatch[0] ? (result.insert = [ {
	                            pos: result.pos + 1,
	                            c: rawYear,
	                            strict: !0
	                        } ], result.caret = result.pos + 2, maskset.validPositions[result.pos].input = opts.min.year[1]) : (result.insert = [ {
	                            pos: result.pos + 1,
	                            c: opts.min.year[1],
	                            strict: !0
	                        }, {
	                            pos: result.pos + 2,
	                            c: rawYear,
	                            strict: !0
	                        } ], result.caret = result.pos + 3, maskset.validPositions[result.pos].input = opts.min.year[0]), 
	                        result;
	                        result = !1;
	                    }
	                }
	                result && dateParts.year && dateParts.year === dateParts.rawyear && opts.min.date.getTime() == opts.min.date.getTime() && (result = opts.min.date.getTime() <= dateParts.date.getTime());
	            }
	            return result && opts.max && opts.max.date.getTime() == opts.max.date.getTime() && (result = opts.max.date.getTime() >= dateParts.date.getTime()), 
	            result;
	        }
	        function parse(format, dateObjValue, opts, raw) {
	            var mask = "", match, fcode;
	            for (getTokenizer(opts).lastIndex = 0; match = getTokenizer(opts).exec(format); ) if (void 0 === dateObjValue) if (fcode = formatcode(match)) mask += "(" + fcode[0] + ")"; else switch (match[0]) {
	              case "[":
	                mask += "(";
	                break;
	
	              case "]":
	                mask += ")?";
	                break;
	
	              default:
	                mask += (0, _escapeRegex.default)(match[0]);
	            } else if (fcode = formatcode(match)) if (!0 !== raw && fcode[3]) {
	                var getFn = fcode[3];
	                mask += getFn.call(dateObjValue.date);
	            } else fcode[2] ? mask += dateObjValue["raw" + fcode[2]] : mask += match[0]; else mask += match[0];
	            return mask;
	        }
	        function pad(val, len) {
	            for (val = String(val), len = len || 2; val.length < len; ) val = "0" + val;
	            return val;
	        }
	        function analyseMask(maskString, format, opts) {
	            var dateObj = {
	                date: new Date(1, 0, 1)
	            }, targetProp, mask = maskString, match, dateOperation;
	            function setValue(dateObj, value, opts) {
	                dateObj[targetProp] = value.replace(/[^0-9]/g, "0"), dateObj["raw" + targetProp] = value, 
	                void 0 !== dateOperation && dateOperation.call(dateObj.date, "month" == targetProp ? parseInt(dateObj[targetProp]) - 1 : dateObj[targetProp]);
	            }
	            if ("string" == typeof mask) {
	                for (getTokenizer(opts).lastIndex = 0; match = getTokenizer(opts).exec(format); ) {
	                    var dynMatches = new RegExp("\\d+$").exec(match[0]), fcode = dynMatches ? match[0][0] + "x" : match[0], value = void 0;
	                    if (dynMatches) {
	                        var lastIndex = getTokenizer(opts).lastIndex, tokanMatch = getTokenMatch(match.index, opts);
	                        getTokenizer(opts).lastIndex = lastIndex, value = mask.slice(0, mask.indexOf(tokanMatch.nextMatch[0]));
	                    } else value = mask.slice(0, fcode.length);
	                    Object.prototype.hasOwnProperty.call(formatCode, fcode) && (targetProp = formatCode[fcode][2], 
	                    dateOperation = formatCode[fcode][1], setValue(dateObj, value, opts)), mask = mask.slice(value.length);
	                }
	                return dateObj;
	            }
	            if (mask && "object" === _typeof(mask) && Object.prototype.hasOwnProperty.call(mask, "date")) return mask;
	        }
	        function importDate(dateObj, opts) {
	            return parse(opts.inputFormat, {
	                date: dateObj
	            }, opts);
	        }
	        function getTokenMatch(pos, opts) {
	            var calcPos = 0, targetMatch, match, matchLength = 0;
	            for (getTokenizer(opts).lastIndex = 0; match = getTokenizer(opts).exec(opts.inputFormat); ) {
	                var dynMatches = new RegExp("\\d+$").exec(match[0]);
	                if (matchLength = dynMatches ? parseInt(dynMatches[0]) : match[0].length, calcPos += matchLength, 
	                pos <= calcPos) {
	                    targetMatch = match, match = getTokenizer(opts).exec(opts.inputFormat);
	                    break;
	                }
	            }
	            return {
	                targetMatchIndex: calcPos - matchLength,
	                nextMatch: match,
	                targetMatch: targetMatch
	            };
	        }
	        _inputmask.default.extendAliases({
	            datetime: {
	                mask: function mask(opts) {
	                    return opts.numericInput = !1, formatCode.S = opts.i18n.ordinalSuffix.join("|"), 
	                    opts.inputFormat = formatAlias[opts.inputFormat] || opts.inputFormat, opts.displayFormat = formatAlias[opts.displayFormat] || opts.displayFormat || opts.inputFormat, 
	                    opts.outputFormat = formatAlias[opts.outputFormat] || opts.outputFormat || opts.inputFormat, 
	                    opts.placeholder = "" !== opts.placeholder ? opts.placeholder : opts.inputFormat.replace(/[[\]]/, ""), 
	                    opts.regex = parse(opts.inputFormat, void 0, opts), opts.min = analyseMask(opts.min, opts.inputFormat, opts), 
	                    opts.max = analyseMask(opts.max, opts.inputFormat, opts), null;
	                },
	                placeholder: "",
	                inputFormat: "isoDateTime",
	                displayFormat: void 0,
	                outputFormat: void 0,
	                min: null,
	                max: null,
	                skipOptionalPartCharacter: "",
	                i18n: {
	                    dayNames: [ "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" ],
	                    monthNames: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	                    ordinalSuffix: [ "st", "nd", "rd", "th" ]
	                },
	                preValidation: function preValidation(buffer, pos, c, isSelection, opts, maskset, caretPos, strict) {
	                    if (strict) return !0;
	                    if (isNaN(c) && buffer[pos] !== c) {
	                        var tokenMatch = getTokenMatch(pos, opts);
	                        if (tokenMatch.nextMatch && tokenMatch.nextMatch[0] === c && 1 < tokenMatch.targetMatch[0].length) {
	                            var validator = formatCode[tokenMatch.targetMatch[0]][0];
	                            if (new RegExp(validator).test("0" + buffer[pos - 1])) return buffer[pos] = buffer[pos - 1], 
	                            buffer[pos - 1] = "0", {
	                                fuzzy: !0,
	                                buffer: buffer,
	                                refreshFromBuffer: {
	                                    start: pos - 1,
	                                    end: pos + 1
	                                },
	                                pos: pos + 1
	                            };
	                        }
	                    }
	                    return !0;
	                },
	                postValidation: function postValidation(buffer, pos, c, currentResult, opts, maskset, strict, fromCheckval) {
	                    if (strict) return !0;
	                    var tokenMatch, validator;
	                    if (!1 === currentResult) return tokenMatch = getTokenMatch(pos + 1, opts), tokenMatch.targetMatch && tokenMatch.targetMatchIndex === pos && 1 < tokenMatch.targetMatch[0].length && void 0 !== formatCode[tokenMatch.targetMatch[0]] && (validator = formatCode[tokenMatch.targetMatch[0]][0], 
	                    new RegExp(validator).test("0" + c)) ? {
	                        insert: [ {
	                            pos: pos,
	                            c: "0"
	                        }, {
	                            pos: pos + 1,
	                            c: c
	                        } ],
	                        pos: pos + 1
	                    } : currentResult;
	                    if (currentResult.fuzzy && (buffer = currentResult.buffer, pos = currentResult.pos), 
	                    tokenMatch = getTokenMatch(pos, opts), tokenMatch.targetMatch && tokenMatch.targetMatch[0] && void 0 !== formatCode[tokenMatch.targetMatch[0]]) {
	                        validator = formatCode[tokenMatch.targetMatch[0]][0];
	                        var part = buffer.slice(tokenMatch.targetMatchIndex, tokenMatch.targetMatchIndex + tokenMatch.targetMatch[0].length);
	                        !1 === new RegExp(validator).test(part.join("")) && 2 === tokenMatch.targetMatch[0].length && maskset.validPositions[tokenMatch.targetMatchIndex] && maskset.validPositions[tokenMatch.targetMatchIndex + 1] && (maskset.validPositions[tokenMatch.targetMatchIndex + 1].input = "0");
	                    }
	                    var result = currentResult, dateParts = analyseMask(buffer.join(""), opts.inputFormat, opts);
	                    return result && dateParts.date.getTime() == dateParts.date.getTime() && (result = prefillYear(dateParts, result, opts), 
	                    result = isValidDate(dateParts, result, opts), result = isDateInRange(dateParts, result, opts, maskset, fromCheckval)), 
	                    pos && result && currentResult.pos !== pos ? {
	                        buffer: parse(opts.inputFormat, dateParts, opts).split(""),
	                        refreshFromBuffer: {
	                            start: pos,
	                            end: currentResult.pos
	                        }
	                    } : result;
	                },
	                onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {
	                    var input = this;
	                    e.ctrlKey && e.keyCode === _keycode.default.RIGHT && (this.inputmask._valueSet(importDate(new Date(), opts)), 
	                    $(this).trigger("setvalue"));
	                },
	                onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
	                    return unmaskedValue ? parse(opts.outputFormat, analyseMask(maskedValue, opts.inputFormat, opts), opts, !0) : unmaskedValue;
	                },
	                casing: function casing(elem, test, pos, validPositions) {
	                    return 0 == test.nativeDef.indexOf("[ap]") ? elem.toLowerCase() : 0 == test.nativeDef.indexOf("[AP]") ? elem.toUpperCase() : elem;
	                },
	                onBeforeMask: function onBeforeMask(initialValue, opts) {
	                    return "[object Date]" === Object.prototype.toString.call(initialValue) && (initialValue = importDate(initialValue, opts)), 
	                    initialValue;
	                },
	                insertMode: !1,
	                shiftPositions: !1,
	                keepStatic: !1,
	                inputmode: "numeric"
	            }
	        });
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        var _inputmask = _interopRequireDefault(__webpack_require__(1)), _keycode = _interopRequireDefault(__webpack_require__(0)), _escapeRegex = _interopRequireDefault(__webpack_require__(14));
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        var $ = _inputmask.default.dependencyLib;
	        function autoEscape(txt, opts) {
	            for (var escapedTxt = "", i = 0; i < txt.length; i++) _inputmask.default.prototype.definitions[txt.charAt(i)] || opts.definitions[txt.charAt(i)] || opts.optionalmarker[0] === txt.charAt(i) || opts.optionalmarker[1] === txt.charAt(i) || opts.quantifiermarker[0] === txt.charAt(i) || opts.quantifiermarker[1] === txt.charAt(i) || opts.groupmarker[0] === txt.charAt(i) || opts.groupmarker[1] === txt.charAt(i) || opts.alternatormarker === txt.charAt(i) ? escapedTxt += "\\" + txt.charAt(i) : escapedTxt += txt.charAt(i);
	            return escapedTxt;
	        }
	        function alignDigits(buffer, digits, opts, force) {
	            if (0 < buffer.length && 0 < digits && (!opts.digitsOptional || force)) {
	                var radixPosition = buffer.indexOf(opts.radixPoint), negationBack = !1;
	                opts.negationSymbol.back === buffer[buffer.length - 1] && (negationBack = !0, buffer.length--), 
	                -1 === radixPosition && (buffer.push(opts.radixPoint), radixPosition = buffer.length - 1);
	                for (var i = 1; i <= digits; i++) isFinite(buffer[radixPosition + i]) || (buffer[radixPosition + i] = "0");
	            }
	            return negationBack && buffer.push(opts.negationSymbol.back), buffer;
	        }
	        function findValidator(symbol, maskset) {
	            var posNdx = 0;
	            if ("+" === symbol) {
	                for (posNdx in maskset.validPositions) ;
	                posNdx = parseInt(posNdx);
	            }
	            for (var tstNdx in maskset.tests) if (tstNdx = parseInt(tstNdx), posNdx <= tstNdx) for (var ndx = 0, ndxl = maskset.tests[tstNdx].length; ndx < ndxl; ndx++) if ((void 0 === maskset.validPositions[tstNdx] || "-" === symbol) && maskset.tests[tstNdx][ndx].match.def === symbol) return tstNdx + (void 0 !== maskset.validPositions[tstNdx] && "-" !== symbol ? 1 : 0);
	            return posNdx;
	        }
	        function findValid(symbol, maskset) {
	            var ret = -1;
	            for (var ndx in maskset.validPositions) {
	                var tst = maskset.validPositions[ndx];
	                if (tst && tst.match.def === symbol) {
	                    ret = parseInt(ndx);
	                    break;
	                }
	            }
	            return ret;
	        }
	        function parseMinMaxOptions(opts) {
	            void 0 === opts.parseMinMaxOptions && (null !== opts.min && (opts.min = opts.min.toString().replace(new RegExp((0, 
	            _escapeRegex.default)(opts.groupSeparator), "g"), ""), "," === opts.radixPoint && (opts.min = opts.min.replace(opts.radixPoint, ".")), 
	            opts.min = isFinite(opts.min) ? parseFloat(opts.min) : NaN, isNaN(opts.min) && (opts.min = Number.MIN_VALUE)), 
	            null !== opts.max && (opts.max = opts.max.toString().replace(new RegExp((0, _escapeRegex.default)(opts.groupSeparator), "g"), ""), 
	            "," === opts.radixPoint && (opts.max = opts.max.replace(opts.radixPoint, ".")), 
	            opts.max = isFinite(opts.max) ? parseFloat(opts.max) : NaN, isNaN(opts.max) && (opts.max = Number.MAX_VALUE)), 
	            opts.parseMinMaxOptions = "done");
	        }
	        function genMask(opts) {
	            opts.repeat = 0, opts.groupSeparator === opts.radixPoint && opts.digits && "0" !== opts.digits && ("." === opts.radixPoint ? opts.groupSeparator = "," : "," === opts.radixPoint ? opts.groupSeparator = "." : opts.groupSeparator = ""), 
	            " " === opts.groupSeparator && (opts.skipOptionalPartCharacter = void 0), 1 < opts.placeholder.length && (opts.placeholder = opts.placeholder.charAt(0)), 
	            "radixFocus" === opts.positionCaretOnClick && "" === opts.placeholder && (opts.positionCaretOnClick = "lvp");
	            var decimalDef = "0", radixPointDef = opts.radixPoint;
	            !0 === opts.numericInput && void 0 === opts.__financeInput ? (decimalDef = "1", 
	            opts.positionCaretOnClick = "radixFocus" === opts.positionCaretOnClick ? "lvp" : opts.positionCaretOnClick, 
	            opts.digitsOptional = !1, isNaN(opts.digits) && (opts.digits = 2), opts._radixDance = !1, 
	            radixPointDef = "," === opts.radixPoint ? "?" : "!", "" !== opts.radixPoint && void 0 === opts.definitions[radixPointDef] && (opts.definitions[radixPointDef] = {}, 
	            opts.definitions[radixPointDef].validator = "[" + opts.radixPoint + "]", opts.definitions[radixPointDef].placeholder = opts.radixPoint, 
	            opts.definitions[radixPointDef].static = !0, opts.definitions[radixPointDef].generated = !0)) : (opts.__financeInput = !1, 
	            opts.numericInput = !0);
	            var mask = "[+]", altMask;
	            if (mask += autoEscape(opts.prefix, opts), "" !== opts.groupSeparator ? (void 0 === opts.definitions[opts.groupSeparator] && (opts.definitions[opts.groupSeparator] = {}, 
	            opts.definitions[opts.groupSeparator].validator = "[" + opts.groupSeparator + "]", 
	            opts.definitions[opts.groupSeparator].placeholder = opts.groupSeparator, opts.definitions[opts.groupSeparator].static = !0, 
	            opts.definitions[opts.groupSeparator].generated = !0), mask += opts._mask(opts)) : mask += "9{+}", 
	            void 0 !== opts.digits && 0 !== opts.digits) {
	                var dq = opts.digits.toString().split(",");
	                isFinite(dq[0]) && dq[1] && isFinite(dq[1]) ? mask += radixPointDef + decimalDef + "{" + opts.digits + "}" : (isNaN(opts.digits) || 0 < parseInt(opts.digits)) && (opts.digitsOptional ? (altMask = mask + radixPointDef + decimalDef + "{0," + opts.digits + "}", 
	                opts.keepStatic = !0) : mask += radixPointDef + decimalDef + "{" + opts.digits + "}");
	            }
	            return mask += autoEscape(opts.suffix, opts), mask += "[-]", altMask && (mask = [ altMask + autoEscape(opts.suffix, opts) + "[-]", mask ]), 
	            opts.greedy = !1, parseMinMaxOptions(opts), mask;
	        }
	        function hanndleRadixDance(pos, c, radixPos, maskset, opts) {
	            return opts._radixDance && opts.numericInput && c !== opts.negationSymbol.back && pos <= radixPos && (0 < radixPos || c == opts.radixPoint) && (void 0 === maskset.validPositions[pos - 1] || maskset.validPositions[pos - 1].input !== opts.negationSymbol.back) && (pos -= 1), 
	            pos;
	        }
	        function decimalValidator(chrs, maskset, pos, strict, opts) {
	            var radixPos = maskset.buffer ? maskset.buffer.indexOf(opts.radixPoint) : -1, result = -1 !== radixPos && new RegExp("[0-9\uff11-\uff19]").test(chrs);
	            return opts._radixDance && result && null == maskset.validPositions[radixPos] ? {
	                insert: {
	                    pos: radixPos === pos ? radixPos + 1 : radixPos,
	                    c: opts.radixPoint
	                },
	                pos: pos
	            } : result;
	        }
	        function checkForLeadingZeroes(buffer, opts) {
	            var numberMatches = new RegExp("(^" + ("" !== opts.negationSymbol.front ? (0, _escapeRegex.default)(opts.negationSymbol.front) + "?" : "") + (0, 
	            _escapeRegex.default)(opts.prefix) + ")(.*)(" + (0, _escapeRegex.default)(opts.suffix) + ("" != opts.negationSymbol.back ? (0, 
	            _escapeRegex.default)(opts.negationSymbol.back) + "?" : "") + "$)").exec(buffer.slice().reverse().join("")), number = numberMatches ? numberMatches[2] : "", leadingzeroes = !1;
	            return number && (number = number.split(opts.radixPoint.charAt(0))[0], leadingzeroes = new RegExp("^[0" + opts.groupSeparator + "]*").exec(number)), 
	            !(!leadingzeroes || !(1 < leadingzeroes[0].length || 0 < leadingzeroes[0].length && leadingzeroes[0].length < number.length)) && leadingzeroes;
	        }
	        _inputmask.default.extendAliases({
	            numeric: {
	                mask: genMask,
	                _mask: function _mask(opts) {
	                    return "(" + opts.groupSeparator + "999){+|1}";
	                },
	                digits: "*",
	                digitsOptional: !0,
	                enforceDigitsOnBlur: !1,
	                radixPoint: ".",
	                positionCaretOnClick: "radixFocus",
	                _radixDance: !0,
	                groupSeparator: "",
	                allowMinus: !0,
	                negationSymbol: {
	                    front: "-",
	                    back: ""
	                },
	                prefix: "",
	                suffix: "",
	                min: null,
	                max: null,
	                SetMaxOnOverflow: !1,
	                step: 1,
	                inputType: "text",
	                unmaskAsNumber: !1,
	                roundingFN: Math.round,
	                inputmode: "numeric",
	                shortcuts: {
	                    k: "000",
	                    m: "000000"
	                },
	                placeholder: "0",
	                greedy: !1,
	                rightAlign: !0,
	                insertMode: !0,
	                autoUnmask: !1,
	                skipOptionalPartCharacter: "",
	                definitions: {
	                    0: {
	                        validator: decimalValidator
	                    },
	                    1: {
	                        validator: decimalValidator,
	                        definitionSymbol: "9"
	                    },
	                    "+": {
	                        validator: function validator(chrs, maskset, pos, strict, opts) {
	                            return opts.allowMinus && ("-" === chrs || chrs === opts.negationSymbol.front);
	                        }
	                    },
	                    "-": {
	                        validator: function validator(chrs, maskset, pos, strict, opts) {
	                            return opts.allowMinus && chrs === opts.negationSymbol.back;
	                        }
	                    }
	                },
	                preValidation: function preValidation(buffer, pos, c, isSelection, opts, maskset, caretPos, strict) {
	                    if (!1 !== opts.__financeInput && c === opts.radixPoint) return !1;
	                    var pattern;
	                    if (pattern = opts.shortcuts && opts.shortcuts[c]) {
	                        if (1 < pattern.length) for (var inserts = [], i = 0; i < pattern.length; i++) inserts.push({
	                            pos: pos + i,
	                            c: pattern[i],
	                            strict: !1
	                        });
	                        return {
	                            insert: inserts
	                        };
	                    }
	                    var radixPos = buffer.indexOf(opts.radixPoint), initPos = pos;
	                    if (pos = hanndleRadixDance(pos, c, radixPos, maskset, opts), "-" === c || c === opts.negationSymbol.front) {
	                        if (!0 !== opts.allowMinus) return !1;
	                        var isNegative = !1, front = findValid("+", maskset), back = findValid("-", maskset);
	                        return -1 !== front && (isNegative = [ front, back ]), !1 !== isNegative ? {
	                            remove: isNegative,
	                            caret: initPos - opts.negationSymbol.front.length
	                        } : {
	                            insert: [ {
	                                pos: findValidator("+", maskset),
	                                c: opts.negationSymbol.front,
	                                fromIsValid: !0
	                            }, {
	                                pos: findValidator("-", maskset),
	                                c: opts.negationSymbol.back,
	                                fromIsValid: void 0
	                            } ],
	                            caret: initPos + opts.negationSymbol.back.length
	                        };
	                    }
	                    if (c === opts.groupSeparator) return {
	                        caret: initPos
	                    };
	                    if (strict) return !0;
	                    if (-1 !== radixPos && !0 === opts._radixDance && !1 === isSelection && c === opts.radixPoint && void 0 !== opts.digits && (isNaN(opts.digits) || 0 < parseInt(opts.digits)) && radixPos !== pos) return {
	                        caret: opts._radixDance && pos === radixPos - 1 ? radixPos + 1 : radixPos
	                    };
	                    if (!1 === opts.__financeInput) if (isSelection) {
	                        if (opts.digitsOptional) return {
	                            rewritePosition: caretPos.end
	                        };
	                        if (!opts.digitsOptional) {
	                            if (caretPos.begin > radixPos && caretPos.end <= radixPos) return c === opts.radixPoint ? {
	                                insert: {
	                                    pos: radixPos + 1,
	                                    c: "0",
	                                    fromIsValid: !0
	                                },
	                                rewritePosition: radixPos
	                            } : {
	                                rewritePosition: radixPos + 1
	                            };
	                            if (caretPos.begin < radixPos) return {
	                                rewritePosition: caretPos.begin - 1
	                            };
	                        }
	                    } else if (!opts.showMaskOnHover && !opts.showMaskOnFocus && !opts.digitsOptional && 0 < opts.digits && "" === this.inputmask.__valueGet.call(this)) return {
	                        rewritePosition: radixPos
	                    };
	                    return {
	                        rewritePosition: pos
	                    };
	                },
	                postValidation: function postValidation(buffer, pos, c, currentResult, opts, maskset, strict) {
	                    if (!1 === currentResult) return currentResult;
	                    if (strict) return !0;
	                    if (null !== opts.min || null !== opts.max) {
	                        var unmasked = opts.onUnMask(buffer.slice().reverse().join(""), void 0, $.extend({}, opts, {
	                            unmaskAsNumber: !0
	                        }));
	                        if (null !== opts.min && unmasked < opts.min && (unmasked.toString().length > opts.min.toString().length || unmasked < 0)) return !1;
	                        if (null !== opts.max && unmasked > opts.max) return !!opts.SetMaxOnOverflow && {
	                            refreshFromBuffer: !0,
	                            buffer: alignDigits(opts.max.toString().replace(".", opts.radixPoint).split(""), opts.digits, opts).reverse()
	                        };
	                    }
	                    return currentResult;
	                },
	                onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
	                    if ("" === unmaskedValue && !0 === opts.nullable) return unmaskedValue;
	                    var processValue = maskedValue.replace(opts.prefix, "");
	                    return processValue = processValue.replace(opts.suffix, ""), processValue = processValue.replace(new RegExp((0, 
	                    _escapeRegex.default)(opts.groupSeparator), "g"), ""), "" !== opts.placeholder.charAt(0) && (processValue = processValue.replace(new RegExp(opts.placeholder.charAt(0), "g"), "0")), 
	                    opts.unmaskAsNumber ? ("" !== opts.radixPoint && -1 !== processValue.indexOf(opts.radixPoint) && (processValue = processValue.replace(_escapeRegex.default.call(this, opts.radixPoint), ".")), 
	                    processValue = processValue.replace(new RegExp("^" + (0, _escapeRegex.default)(opts.negationSymbol.front)), "-"), 
	                    processValue = processValue.replace(new RegExp((0, _escapeRegex.default)(opts.negationSymbol.back) + "$"), ""), 
	                    Number(processValue)) : processValue;
	                },
	                isComplete: function isComplete(buffer, opts) {
	                    var maskedValue = (opts.numericInput ? buffer.slice().reverse() : buffer).join("");
	                    return maskedValue = maskedValue.replace(new RegExp("^" + (0, _escapeRegex.default)(opts.negationSymbol.front)), "-"), 
	                    maskedValue = maskedValue.replace(new RegExp((0, _escapeRegex.default)(opts.negationSymbol.back) + "$"), ""), 
	                    maskedValue = maskedValue.replace(opts.prefix, ""), maskedValue = maskedValue.replace(opts.suffix, ""), 
	                    maskedValue = maskedValue.replace(new RegExp((0, _escapeRegex.default)(opts.groupSeparator) + "([0-9]{3})", "g"), "$1"), 
	                    "," === opts.radixPoint && (maskedValue = maskedValue.replace((0, _escapeRegex.default)(opts.radixPoint), ".")), 
	                    isFinite(maskedValue);
	                },
	                onBeforeMask: function onBeforeMask(initialValue, opts) {
	                    var radixPoint = opts.radixPoint || ",";
	                    isFinite(opts.digits) && (opts.digits = parseInt(opts.digits)), "number" != typeof initialValue && "number" !== opts.inputType || "" === radixPoint || (initialValue = initialValue.toString().replace(".", radixPoint));
	                    var isNagtive = "-" === initialValue.charAt(0) || initialValue.charAt(0) === opts.negationSymbol.front, valueParts = initialValue.split(radixPoint), integerPart = valueParts[0].replace(/[^\-0-9]/g, ""), decimalPart = 1 < valueParts.length ? valueParts[1].replace(/[^0-9]/g, "") : "", forceDigits = 1 < valueParts.length;
	                    initialValue = integerPart + ("" !== decimalPart ? radixPoint + decimalPart : decimalPart);
	                    var digits = 0;
	                    if ("" !== radixPoint && (digits = opts.digitsOptional ? opts.digits < decimalPart.length ? opts.digits : decimalPart.length : opts.digits, 
	                    "" !== decimalPart || !opts.digitsOptional)) {
	                        var digitsFactor = Math.pow(10, digits || 1);
	                        initialValue = initialValue.replace((0, _escapeRegex.default)(radixPoint), "."), 
	                        isNaN(parseFloat(initialValue)) || (initialValue = (opts.roundingFN(parseFloat(initialValue) * digitsFactor) / digitsFactor).toFixed(digits)), 
	                        initialValue = initialValue.toString().replace(".", radixPoint);
	                    }
	                    if (0 === opts.digits && -1 !== initialValue.indexOf(radixPoint) && (initialValue = initialValue.substring(0, initialValue.indexOf(radixPoint))), 
	                    null !== opts.min || null !== opts.max) {
	                        var numberValue = initialValue.toString().replace(radixPoint, ".");
	                        null !== opts.min && numberValue < opts.min ? initialValue = opts.min.toString().replace(".", radixPoint) : null !== opts.max && numberValue > opts.max && (initialValue = opts.max.toString().replace(".", radixPoint));
	                    }
	                    return isNagtive && "-" !== initialValue.charAt(0) && (initialValue = "-" + initialValue), 
	                    alignDigits(initialValue.toString().split(""), digits, opts, forceDigits).join("");
	                },
	                onBeforeWrite: function onBeforeWrite(e, buffer, caretPos, opts) {
	                    function stripBuffer(buffer, stripRadix) {
	                        if (!1 !== opts.__financeInput || stripRadix) {
	                            var position = buffer.indexOf(opts.radixPoint);
	                            -1 !== position && buffer.splice(position, 1);
	                        }
	                        if ("" !== opts.groupSeparator) for (;-1 !== (position = buffer.indexOf(opts.groupSeparator)); ) buffer.splice(position, 1);
	                        return buffer;
	                    }
	                    var result, leadingzeroes = checkForLeadingZeroes(buffer, opts);
	                    if (leadingzeroes) for (var caretNdx = buffer.join("").lastIndexOf(leadingzeroes[0].split("").reverse().join("")) - (leadingzeroes[0] == leadingzeroes.input ? 0 : 1), offset = leadingzeroes[0] == leadingzeroes.input ? 1 : 0, i = leadingzeroes[0].length - offset; 0 < i; i--) delete this.maskset.validPositions[caretNdx + i], 
	                    delete buffer[caretNdx + i];
	                    if (e) switch (e.type) {
	                      case "blur":
	                      case "checkval":
	                        if (null !== opts.min) {
	                            var unmasked = opts.onUnMask(buffer.slice().reverse().join(""), void 0, $.extend({}, opts, {
	                                unmaskAsNumber: !0
	                            }));
	                            if (null !== opts.min && unmasked < opts.min) return {
	                                refreshFromBuffer: !0,
	                                buffer: alignDigits(opts.min.toString().replace(".", opts.radixPoint).split(""), opts.digits, opts).reverse()
	                            };
	                        }
	                        if (buffer[buffer.length - 1] === opts.negationSymbol.front) {
	                            var nmbrMtchs = new RegExp("(^" + ("" != opts.negationSymbol.front ? (0, _escapeRegex.default)(opts.negationSymbol.front) + "?" : "") + (0, 
	                            _escapeRegex.default)(opts.prefix) + ")(.*)(" + (0, _escapeRegex.default)(opts.suffix) + ("" != opts.negationSymbol.back ? (0, 
	                            _escapeRegex.default)(opts.negationSymbol.back) + "?" : "") + "$)").exec(stripBuffer(buffer.slice(), !0).reverse().join("")), number = nmbrMtchs ? nmbrMtchs[2] : "";
	                            0 == number && (result = {
	                                refreshFromBuffer: !0,
	                                buffer: [ 0 ]
	                            });
	                        } else "" !== opts.radixPoint && buffer[0] === opts.radixPoint && (result && result.buffer ? result.buffer.shift() : (buffer.shift(), 
	                        result = {
	                            refreshFromBuffer: !0,
	                            buffer: stripBuffer(buffer)
	                        }));
	                        if (opts.enforceDigitsOnBlur) {
	                            result = result || {};
	                            var bffr = result && result.buffer || buffer.slice().reverse();
	                            result.refreshFromBuffer = !0, result.buffer = alignDigits(bffr, opts.digits, opts, !0).reverse();
	                        }
	                    }
	                    return result;
	                },
	                onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {
	                    var $input = $(this), bffr;
	                    if (e.ctrlKey) switch (e.keyCode) {
	                      case _keycode.default.UP:
	                        return this.inputmask.__valueSet.call(this, parseFloat(this.inputmask.unmaskedvalue()) + parseInt(opts.step)), 
	                        $input.trigger("setvalue"), !1;
	
	                      case _keycode.default.DOWN:
	                        return this.inputmask.__valueSet.call(this, parseFloat(this.inputmask.unmaskedvalue()) - parseInt(opts.step)), 
	                        $input.trigger("setvalue"), !1;
	                    }
	                    if (!e.shiftKey && (e.keyCode === _keycode.default.DELETE || e.keyCode === _keycode.default.BACKSPACE || e.keyCode === _keycode.default.BACKSPACE_SAFARI) && caretPos.begin !== buffer.length) {
	                        if (buffer[e.keyCode === _keycode.default.DELETE ? caretPos.begin - 1 : caretPos.end] === opts.negationSymbol.front) return bffr = buffer.slice().reverse(), 
	                        "" !== opts.negationSymbol.front && bffr.shift(), "" !== opts.negationSymbol.back && bffr.pop(), 
	                        $input.trigger("setvalue", [ bffr.join(""), caretPos.begin ]), !1;
	                        if (!0 === opts._radixDance) {
	                            var radixPos = buffer.indexOf(opts.radixPoint);
	                            if (opts.digitsOptional) {
	                                if (0 === radixPos) return bffr = buffer.slice().reverse(), bffr.pop(), $input.trigger("setvalue", [ bffr.join(""), caretPos.begin >= bffr.length ? bffr.length : caretPos.begin ]), 
	                                !1;
	                            } else if (-1 !== radixPos && (caretPos.begin < radixPos || caretPos.end < radixPos || e.keyCode === _keycode.default.DELETE && caretPos.begin === radixPos)) return caretPos.begin !== caretPos.end || e.keyCode !== _keycode.default.BACKSPACE && e.keyCode !== _keycode.default.BACKSPACE_SAFARI || caretPos.begin++, 
	                            bffr = buffer.slice().reverse(), bffr.splice(bffr.length - caretPos.begin, caretPos.begin - caretPos.end + 1), 
	                            bffr = alignDigits(bffr, opts.digits, opts).join(""), $input.trigger("setvalue", [ bffr, caretPos.begin >= bffr.length ? radixPos + 1 : caretPos.begin ]), 
	                            !1;
	                        }
	                    }
	                }
	            },
	            currency: {
	                prefix: "",
	                groupSeparator: ",",
	                alias: "numeric",
	                digits: 2,
	                digitsOptional: !1
	            },
	            decimal: {
	                alias: "numeric"
	            },
	            integer: {
	                alias: "numeric",
	                digits: 0
	            },
	            percentage: {
	                alias: "numeric",
	                min: 0,
	                max: 100,
	                suffix: " %",
	                digits: 0,
	                allowMinus: !1
	            },
	            indianns: {
	                alias: "numeric",
	                _mask: function _mask(opts) {
	                    return "(" + opts.groupSeparator + "99){*|1}(" + opts.groupSeparator + "999){1|1}";
	                },
	                groupSeparator: ",",
	                radixPoint: ".",
	                placeholder: "0",
	                digits: 2,
	                digitsOptional: !1
	            }
	        });
	    }, function(module, exports, __webpack_require__) {
	        "use strict";
	        var _window = _interopRequireDefault(__webpack_require__(6)), _inputmask = _interopRequireDefault(__webpack_require__(1));
	        function _typeof(obj) {
	            return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function _typeof(obj) {
	                return typeof obj;
	            } : function _typeof(obj) {
	                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	            }, _typeof(obj);
	        }
	        function _classCallCheck(instance, Constructor) {
	            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
	        }
	        function _inherits(subClass, superClass) {
	            if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function");
	            subClass.prototype = Object.create(superClass && superClass.prototype, {
	                constructor: {
	                    value: subClass,
	                    writable: !0,
	                    configurable: !0
	                }
	            }), superClass && _setPrototypeOf(subClass, superClass);
	        }
	        function _createSuper(Derived) {
	            var hasNativeReflectConstruct = _isNativeReflectConstruct();
	            return function _createSuperInternal() {
	                var Super = _getPrototypeOf(Derived), result;
	                if (hasNativeReflectConstruct) {
	                    var NewTarget = _getPrototypeOf(this).constructor;
	                    result = Reflect.construct(Super, arguments, NewTarget);
	                } else result = Super.apply(this, arguments);
	                return _possibleConstructorReturn(this, result);
	            };
	        }
	        function _possibleConstructorReturn(self, call) {
	            return !call || "object" !== _typeof(call) && "function" != typeof call ? _assertThisInitialized(self) : call;
	        }
	        function _assertThisInitialized(self) {
	            if (void 0 === self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	            return self;
	        }
	        function _wrapNativeSuper(Class) {
	            var _cache = "function" == typeof Map ? new Map() : void 0;
	            return _wrapNativeSuper = function _wrapNativeSuper(Class) {
	                if (null === Class || !_isNativeFunction(Class)) return Class;
	                if ("function" != typeof Class) throw new TypeError("Super expression must either be null or a function");
	                if ("undefined" != typeof _cache) {
	                    if (_cache.has(Class)) return _cache.get(Class);
	                    _cache.set(Class, Wrapper);
	                }
	                function Wrapper() {
	                    return _construct(Class, arguments, _getPrototypeOf(this).constructor);
	                }
	                return Wrapper.prototype = Object.create(Class.prototype, {
	                    constructor: {
	                        value: Wrapper,
	                        enumerable: !1,
	                        writable: !0,
	                        configurable: !0
	                    }
	                }), _setPrototypeOf(Wrapper, Class);
	            }, _wrapNativeSuper(Class);
	        }
	        function _construct(Parent, args, Class) {
	            return _construct = _isNativeReflectConstruct() ? Reflect.construct : function _construct(Parent, args, Class) {
	                var a = [ null ];
	                a.push.apply(a, args);
	                var Constructor = Function.bind.apply(Parent, a), instance = new Constructor();
	                return Class && _setPrototypeOf(instance, Class.prototype), instance;
	            }, _construct.apply(null, arguments);
	        }
	        function _isNativeReflectConstruct() {
	            if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
	            if (Reflect.construct.sham) return !1;
	            if ("function" == typeof Proxy) return !0;
	            try {
	                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {})), 
	                !0;
	            } catch (e) {
	                return !1;
	            }
	        }
	        function _isNativeFunction(fn) {
	            return -1 !== Function.toString.call(fn).indexOf("[native code]");
	        }
	        function _setPrototypeOf(o, p) {
	            return _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	                return o.__proto__ = p, o;
	            }, _setPrototypeOf(o, p);
	        }
	        function _getPrototypeOf(o) {
	            return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	                return o.__proto__ || Object.getPrototypeOf(o);
	            }, _getPrototypeOf(o);
	        }
	        function _interopRequireDefault(obj) {
	            return obj && obj.__esModule ? obj : {
	                default: obj
	            };
	        }
	        var document = _window.default.document;
	        if (document && document.head && document.head.attachShadow && _window.default.customElements && void 0 === _window.default.customElements.get("input-mask")) {
	            var InputmaskElement = function(_HTMLElement) {
	                _inherits(InputmaskElement, _HTMLElement);
	                var _super = _createSuper(InputmaskElement);
	                function InputmaskElement() {
	                    var _this;
	                    _classCallCheck(this, InputmaskElement), _this = _super.call(this);
	                    var attributeNames = _this.getAttributeNames(), shadow = _this.attachShadow({
	                        mode: "closed"
	                    }), input = document.createElement("input");
	                    for (var attr in input.type = "text", shadow.appendChild(input), attributeNames) Object.prototype.hasOwnProperty.call(attributeNames, attr) && input.setAttribute(attributeNames[attr], _this.getAttribute(attributeNames[attr]));
	                    var im = new _inputmask.default();
	                    return im.dataAttribute = "", im.mask(input), input.inputmask.shadowRoot = shadow, 
	                    _this;
	                }
	                return InputmaskElement;
	            }(_wrapNativeSuper(HTMLElement));
	            _window.default.customElements.define("input-mask", InputmaskElement);
	        }
	    } ], installedModules = {}, __webpack_require__.m = modules, __webpack_require__.c = installedModules, 
	    __webpack_require__.d = function(exports, name, getter) {
	        __webpack_require__.o(exports, name) || Object.defineProperty(exports, name, {
	            enumerable: !0,
	            get: getter
	        });
	    }, __webpack_require__.r = function(exports) {
	        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports, Symbol.toStringTag, {
	            value: "Module"
	        }), Object.defineProperty(exports, "__esModule", {
	            value: !0
	        });
	    }, __webpack_require__.t = function(value, mode) {
	        if (1 & mode && (value = __webpack_require__(value)), 8 & mode) return value;
	        if (4 & mode && "object" == typeof value && value && value.__esModule) return value;
	        var ns = Object.create(null);
	        if (__webpack_require__.r(ns), Object.defineProperty(ns, "default", {
	            enumerable: !0,
	            value: value
	        }), 2 & mode && "string" != typeof value) for (var key in value) __webpack_require__.d(ns, key, function(key) {
	            return value[key];
	        }.bind(null, key));
	        return ns;
	    }, __webpack_require__.n = function(module) {
	        var getter = module && module.__esModule ? function getDefault() {
	            return module.default;
	        } : function getModuleExports() {
	            return module;
	        };
	        return __webpack_require__.d(getter, "a", getter), getter;
	    }, __webpack_require__.o = function(object, property) {
	        return Object.prototype.hasOwnProperty.call(object, property);
	    }, __webpack_require__.p = "", __webpack_require__(__webpack_require__.s = 15);
	    function __webpack_require__(moduleId) {
	        if (installedModules[moduleId]) return installedModules[moduleId].exports;
	        var module = installedModules[moduleId] = {
	            i: moduleId,
	            l: !1,
	            exports: {}
	        };
	        return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), 
	        module.l = !0, module.exports;
	    }
	    var modules, installedModules;
	});

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery Validation Plugin v1.19.3
	 *
	 * https://jqueryvalidation.org/
	 *
	 * Copyright (c) 2021 Jörn Zaefferer
	 * Released under the MIT license
	 */
	(function( factory ) {
		if ( true ) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(57)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module === "object" && module.exports) {
			module.exports = factory( require( "jquery" ) );
		} else {
			factory( jQuery );
		}
	}(function( $ ) {
	
	$.extend( $.fn, {
	
		// https://jqueryvalidation.org/validate/
		validate: function( options ) {
	
			// If nothing is selected, return nothing; can't chain anyway
			if ( !this.length ) {
				if ( options && options.debug && window.console ) {
					console.warn( "Nothing selected, can't validate, returning nothing." );
				}
				return;
			}
	
			// Check if a validator for this form was already created
			var validator = $.data( this[ 0 ], "validator" );
			if ( validator ) {
				return validator;
			}
	
			// Add novalidate tag if HTML5.
			this.attr( "novalidate", "novalidate" );
	
			validator = new $.validator( options, this[ 0 ] );
			$.data( this[ 0 ], "validator", validator );
	
			if ( validator.settings.onsubmit ) {
	
				this.on( "click.validate", ":submit", function( event ) {
	
					// Track the used submit button to properly handle scripted
					// submits later.
					validator.submitButton = event.currentTarget;
	
					// Allow suppressing validation by adding a cancel class to the submit button
					if ( $( this ).hasClass( "cancel" ) ) {
						validator.cancelSubmit = true;
					}
	
					// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
					if ( $( this ).attr( "formnovalidate" ) !== undefined ) {
						validator.cancelSubmit = true;
					}
				} );
	
				// Validate the form on submit
				this.on( "submit.validate", function( event ) {
					if ( validator.settings.debug ) {
	
						// Prevent form submit to be able to see console output
						event.preventDefault();
					}
	
					function handle() {
						var hidden, result;
	
						// Insert a hidden input as a replacement for the missing submit button
						// The hidden input is inserted in two cases:
						//   - A user defined a `submitHandler`
						//   - There was a pending request due to `remote` method and `stopRequest()`
						//     was called to submit the form in case it's valid
						if ( validator.submitButton && ( validator.settings.submitHandler || validator.formSubmitted ) ) {
							hidden = $( "<input type='hidden'/>" )
								.attr( "name", validator.submitButton.name )
								.val( $( validator.submitButton ).val() )
								.appendTo( validator.currentForm );
						}
	
						if ( validator.settings.submitHandler && !validator.settings.debug ) {
							result = validator.settings.submitHandler.call( validator, validator.currentForm, event );
							if ( hidden ) {
	
								// And clean up afterwards; thanks to no-block-scope, hidden can be referenced
								hidden.remove();
							}
							if ( result !== undefined ) {
								return result;
							}
							return false;
						}
						return true;
					}
	
					// Prevent submit for invalid forms or custom submit handlers
					if ( validator.cancelSubmit ) {
						validator.cancelSubmit = false;
						return handle();
					}
					if ( validator.form() ) {
						if ( validator.pendingRequest ) {
							validator.formSubmitted = true;
							return false;
						}
						return handle();
					} else {
						validator.focusInvalid();
						return false;
					}
				} );
			}
	
			return validator;
		},
	
		// https://jqueryvalidation.org/valid/
		valid: function() {
			var valid, validator, errorList;
	
			if ( $( this[ 0 ] ).is( "form" ) ) {
				valid = this.validate().form();
			} else {
				errorList = [];
				valid = true;
				validator = $( this[ 0 ].form ).validate();
				this.each( function() {
					valid = validator.element( this ) && valid;
					if ( !valid ) {
						errorList = errorList.concat( validator.errorList );
					}
				} );
				validator.errorList = errorList;
			}
			return valid;
		},
	
		// https://jqueryvalidation.org/rules/
		rules: function( command, argument ) {
			var element = this[ 0 ],
				isContentEditable = typeof this.attr( "contenteditable" ) !== "undefined" && this.attr( "contenteditable" ) !== "false",
				settings, staticRules, existingRules, data, param, filtered;
	
			// If nothing is selected, return empty object; can't chain anyway
			if ( element == null ) {
				return;
			}
	
			if ( !element.form && isContentEditable ) {
				element.form = this.closest( "form" )[ 0 ];
				element.name = this.attr( "name" );
			}
	
			if ( element.form == null ) {
				return;
			}
	
			if ( command ) {
				settings = $.data( element.form, "validator" ).settings;
				staticRules = settings.rules;
				existingRules = $.validator.staticRules( element );
				switch ( command ) {
				case "add":
					$.extend( existingRules, $.validator.normalizeRule( argument ) );
	
					// Remove messages from rules, but allow them to be set separately
					delete existingRules.messages;
					staticRules[ element.name ] = existingRules;
					if ( argument.messages ) {
						settings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );
					}
					break;
				case "remove":
					if ( !argument ) {
						delete staticRules[ element.name ];
						return existingRules;
					}
					filtered = {};
					$.each( argument.split( /\s/ ), function( index, method ) {
						filtered[ method ] = existingRules[ method ];
						delete existingRules[ method ];
					} );
					return filtered;
				}
			}
	
			data = $.validator.normalizeRules(
			$.extend(
				{},
				$.validator.classRules( element ),
				$.validator.attributeRules( element ),
				$.validator.dataRules( element ),
				$.validator.staticRules( element )
			), element );
	
			// Make sure required is at front
			if ( data.required ) {
				param = data.required;
				delete data.required;
				data = $.extend( { required: param }, data );
			}
	
			// Make sure remote is at back
			if ( data.remote ) {
				param = data.remote;
				delete data.remote;
				data = $.extend( data, { remote: param } );
			}
	
			return data;
		}
	} );
	
	// JQuery trim is deprecated, provide a trim method based on String.prototype.trim
	var trim = function( str ) {
	
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim#Polyfill
		return str.replace( /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "" );
	};
	
	// Custom selectors
	$.extend( $.expr.pseudos || $.expr[ ":" ], {		// '|| $.expr[ ":" ]' here enables backwards compatibility to jQuery 1.7. Can be removed when dropping jQ 1.7.x support
	
		// https://jqueryvalidation.org/blank-selector/
		blank: function( a ) {
			return !trim( "" + $( a ).val() );
		},
	
		// https://jqueryvalidation.org/filled-selector/
		filled: function( a ) {
			var val = $( a ).val();
			return val !== null && !!trim( "" + val );
		},
	
		// https://jqueryvalidation.org/unchecked-selector/
		unchecked: function( a ) {
			return !$( a ).prop( "checked" );
		}
	} );
	
	// Constructor for validator
	$.validator = function( options, form ) {
		this.settings = $.extend( true, {}, $.validator.defaults, options );
		this.currentForm = form;
		this.init();
	};
	
	// https://jqueryvalidation.org/jQuery.validator.format/
	$.validator.format = function( source, params ) {
		if ( arguments.length === 1 ) {
			return function() {
				var args = $.makeArray( arguments );
				args.unshift( source );
				return $.validator.format.apply( this, args );
			};
		}
		if ( params === undefined ) {
			return source;
		}
		if ( arguments.length > 2 && params.constructor !== Array  ) {
			params = $.makeArray( arguments ).slice( 1 );
		}
		if ( params.constructor !== Array ) {
			params = [ params ];
		}
		$.each( params, function( i, n ) {
			source = source.replace( new RegExp( "\\{" + i + "\\}", "g" ), function() {
				return n;
			} );
		} );
		return source;
	};
	
	$.extend( $.validator, {
	
		defaults: {
			messages: {},
			groups: {},
			rules: {},
			errorClass: "error",
			pendingClass: "pending",
			validClass: "valid",
			errorElement: "label",
			focusCleanup: false,
			focusInvalid: true,
			errorContainer: $( [] ),
			errorLabelContainer: $( [] ),
			onsubmit: true,
			ignore: ":hidden",
			ignoreTitle: false,
			onfocusin: function( element ) {
				this.lastActive = element;
	
				// Hide error label and remove error class on focus if enabled
				if ( this.settings.focusCleanup ) {
					if ( this.settings.unhighlight ) {
						this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
					}
					this.hideThese( this.errorsFor( element ) );
				}
			},
			onfocusout: function( element ) {
				if ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {
					this.element( element );
				}
			},
			onkeyup: function( element, event ) {
	
				// Avoid revalidate the field when pressing one of the following keys
				// Shift       => 16
				// Ctrl        => 17
				// Alt         => 18
				// Caps lock   => 20
				// End         => 35
				// Home        => 36
				// Left arrow  => 37
				// Up arrow    => 38
				// Right arrow => 39
				// Down arrow  => 40
				// Insert      => 45
				// Num lock    => 144
				// AltGr key   => 225
				var excludedKeys = [
					16, 17, 18, 20, 35, 36, 37,
					38, 39, 40, 45, 144, 225
				];
	
				if ( event.which === 9 && this.elementValue( element ) === "" || $.inArray( event.keyCode, excludedKeys ) !== -1 ) {
					return;
				} else if ( element.name in this.submitted || element.name in this.invalid ) {
					this.element( element );
				}
			},
			onclick: function( element ) {
	
				// Click on selects, radiobuttons and checkboxes
				if ( element.name in this.submitted ) {
					this.element( element );
	
				// Or option elements, check parent select in that case
				} else if ( element.parentNode.name in this.submitted ) {
					this.element( element.parentNode );
				}
			},
			highlight: function( element, errorClass, validClass ) {
				if ( element.type === "radio" ) {
					this.findByName( element.name ).addClass( errorClass ).removeClass( validClass );
				} else {
					$( element ).addClass( errorClass ).removeClass( validClass );
				}
			},
			unhighlight: function( element, errorClass, validClass ) {
				if ( element.type === "radio" ) {
					this.findByName( element.name ).removeClass( errorClass ).addClass( validClass );
				} else {
					$( element ).removeClass( errorClass ).addClass( validClass );
				}
			}
		},
	
		// https://jqueryvalidation.org/jQuery.validator.setDefaults/
		setDefaults: function( settings ) {
			$.extend( $.validator.defaults, settings );
		},
	
		messages: {
			required: "This field is required.",
			remote: "Please fix this field.",
			email: "Please enter a valid email address.",
			url: "Please enter a valid URL.",
			date: "Please enter a valid date.",
			dateISO: "Please enter a valid date (ISO).",
			number: "Please enter a valid number.",
			digits: "Please enter only digits.",
			equalTo: "Please enter the same value again.",
			maxlength: $.validator.format( "Please enter no more than {0} characters." ),
			minlength: $.validator.format( "Please enter at least {0} characters." ),
			rangelength: $.validator.format( "Please enter a value between {0} and {1} characters long." ),
			range: $.validator.format( "Please enter a value between {0} and {1}." ),
			max: $.validator.format( "Please enter a value less than or equal to {0}." ),
			min: $.validator.format( "Please enter a value greater than or equal to {0}." ),
			step: $.validator.format( "Please enter a multiple of {0}." )
		},
	
		autoCreateRanges: false,
	
		prototype: {
	
			init: function() {
				this.labelContainer = $( this.settings.errorLabelContainer );
				this.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );
				this.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );
				this.submitted = {};
				this.valueCache = {};
				this.pendingRequest = 0;
				this.pending = {};
				this.invalid = {};
				this.reset();
	
				var currentForm = this.currentForm,
					groups = ( this.groups = {} ),
					rules;
				$.each( this.settings.groups, function( key, value ) {
					if ( typeof value === "string" ) {
						value = value.split( /\s/ );
					}
					$.each( value, function( index, name ) {
						groups[ name ] = key;
					} );
				} );
				rules = this.settings.rules;
				$.each( rules, function( key, value ) {
					rules[ key ] = $.validator.normalizeRule( value );
				} );
	
				function delegate( event ) {
					var isContentEditable = typeof $( this ).attr( "contenteditable" ) !== "undefined" && $( this ).attr( "contenteditable" ) !== "false";
	
					// Set form expando on contenteditable
					if ( !this.form && isContentEditable ) {
						this.form = $( this ).closest( "form" )[ 0 ];
						this.name = $( this ).attr( "name" );
					}
	
					// Ignore the element if it belongs to another form. This will happen mainly
					// when setting the `form` attribute of an input to the id of another form.
					if ( currentForm !== this.form ) {
						return;
					}
	
					var validator = $.data( this.form, "validator" ),
						eventType = "on" + event.type.replace( /^validate/, "" ),
						settings = validator.settings;
					if ( settings[ eventType ] && !$( this ).is( settings.ignore ) ) {
						settings[ eventType ].call( validator, this, event );
					}
				}
	
				$( this.currentForm )
					.on( "focusin.validate focusout.validate keyup.validate",
						":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " +
						"[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " +
						"[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " +
						"[type='radio'], [type='checkbox'], [contenteditable], [type='button']", delegate )
	
					// Support: Chrome, oldIE
					// "select" is provided as event.target when clicking a option
					.on( "click.validate", "select, option, [type='radio'], [type='checkbox']", delegate );
	
				if ( this.settings.invalidHandler ) {
					$( this.currentForm ).on( "invalid-form.validate", this.settings.invalidHandler );
				}
			},
	
			// https://jqueryvalidation.org/Validator.form/
			form: function() {
				this.checkForm();
				$.extend( this.submitted, this.errorMap );
				this.invalid = $.extend( {}, this.errorMap );
				if ( !this.valid() ) {
					$( this.currentForm ).triggerHandler( "invalid-form", [ this ] );
				}
				this.showErrors();
				return this.valid();
			},
	
			checkForm: function() {
				this.prepareForm();
				for ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {
					this.check( elements[ i ] );
				}
				return this.valid();
			},
	
			// https://jqueryvalidation.org/Validator.element/
			element: function( element ) {
				var cleanElement = this.clean( element ),
					checkElement = this.validationTargetFor( cleanElement ),
					v = this,
					result = true,
					rs, group;
	
				if ( checkElement === undefined ) {
					delete this.invalid[ cleanElement.name ];
				} else {
					this.prepareElement( checkElement );
					this.currentElements = $( checkElement );
	
					// If this element is grouped, then validate all group elements already
					// containing a value
					group = this.groups[ checkElement.name ];
					if ( group ) {
						$.each( this.groups, function( name, testgroup ) {
							if ( testgroup === group && name !== checkElement.name ) {
								cleanElement = v.validationTargetFor( v.clean( v.findByName( name ) ) );
								if ( cleanElement && cleanElement.name in v.invalid ) {
									v.currentElements.push( cleanElement );
									result = v.check( cleanElement ) && result;
								}
							}
						} );
					}
	
					rs = this.check( checkElement ) !== false;
					result = result && rs;
					if ( rs ) {
						this.invalid[ checkElement.name ] = false;
					} else {
						this.invalid[ checkElement.name ] = true;
					}
	
					if ( !this.numberOfInvalids() ) {
	
						// Hide error containers on last error
						this.toHide = this.toHide.add( this.containers );
					}
					this.showErrors();
	
					// Add aria-invalid status for screen readers
					$( element ).attr( "aria-invalid", !rs );
				}
	
				return result;
			},
	
			// https://jqueryvalidation.org/Validator.showErrors/
			showErrors: function( errors ) {
				if ( errors ) {
					var validator = this;
	
					// Add items to error list and map
					$.extend( this.errorMap, errors );
					this.errorList = $.map( this.errorMap, function( message, name ) {
						return {
							message: message,
							element: validator.findByName( name )[ 0 ]
						};
					} );
	
					// Remove items from success list
					this.successList = $.grep( this.successList, function( element ) {
						return !( element.name in errors );
					} );
				}
				if ( this.settings.showErrors ) {
					this.settings.showErrors.call( this, this.errorMap, this.errorList );
				} else {
					this.defaultShowErrors();
				}
			},
	
			// https://jqueryvalidation.org/Validator.resetForm/
			resetForm: function() {
				if ( $.fn.resetForm ) {
					$( this.currentForm ).resetForm();
				}
				this.invalid = {};
				this.submitted = {};
				this.prepareForm();
				this.hideErrors();
				var elements = this.elements()
					.removeData( "previousValue" )
					.removeAttr( "aria-invalid" );
	
				this.resetElements( elements );
			},
	
			resetElements: function( elements ) {
				var i;
	
				if ( this.settings.unhighlight ) {
					for ( i = 0; elements[ i ]; i++ ) {
						this.settings.unhighlight.call( this, elements[ i ],
							this.settings.errorClass, "" );
						this.findByName( elements[ i ].name ).removeClass( this.settings.validClass );
					}
				} else {
					elements
						.removeClass( this.settings.errorClass )
						.removeClass( this.settings.validClass );
				}
			},
	
			numberOfInvalids: function() {
				return this.objectLength( this.invalid );
			},
	
			objectLength: function( obj ) {
				/* jshint unused: false */
				var count = 0,
					i;
				for ( i in obj ) {
	
					// This check allows counting elements with empty error
					// message as invalid elements
					if ( obj[ i ] !== undefined && obj[ i ] !== null && obj[ i ] !== false ) {
						count++;
					}
				}
				return count;
			},
	
			hideErrors: function() {
				this.hideThese( this.toHide );
			},
	
			hideThese: function( errors ) {
				errors.not( this.containers ).text( "" );
				this.addWrapper( errors ).hide();
			},
	
			valid: function() {
				return this.size() === 0;
			},
	
			size: function() {
				return this.errorList.length;
			},
	
			focusInvalid: function() {
				if ( this.settings.focusInvalid ) {
					try {
						$( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [] )
						.filter( ":visible" )
						.trigger( "focus" )
	
						// Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
						.trigger( "focusin" );
					} catch ( e ) {
	
						// Ignore IE throwing errors when focusing hidden elements
					}
				}
			},
	
			findLastActive: function() {
				var lastActive = this.lastActive;
				return lastActive && $.grep( this.errorList, function( n ) {
					return n.element.name === lastActive.name;
				} ).length === 1 && lastActive;
			},
	
			elements: function() {
				var validator = this,
					rulesCache = {};
	
				// Select all valid inputs inside the form (no submit or reset buttons)
				return $( this.currentForm )
				.find( "input, select, textarea, [contenteditable]" )
				.not( ":submit, :reset, :image, :disabled" )
				.not( this.settings.ignore )
				.filter( function() {
					var name = this.name || $( this ).attr( "name" ); // For contenteditable
					var isContentEditable = typeof $( this ).attr( "contenteditable" ) !== "undefined" && $( this ).attr( "contenteditable" ) !== "false";
	
					if ( !name && validator.settings.debug && window.console ) {
						console.error( "%o has no name assigned", this );
					}
	
					// Set form expando on contenteditable
					if ( isContentEditable ) {
						this.form = $( this ).closest( "form" )[ 0 ];
						this.name = name;
					}
	
					// Ignore elements that belong to other/nested forms
					if ( this.form !== validator.currentForm ) {
						return false;
					}
	
					// Select only the first element for each name, and only those with rules specified
					if ( name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {
						return false;
					}
	
					rulesCache[ name ] = true;
					return true;
				} );
			},
	
			clean: function( selector ) {
				return $( selector )[ 0 ];
			},
	
			errors: function() {
				var errorClass = this.settings.errorClass.split( " " ).join( "." );
				return $( this.settings.errorElement + "." + errorClass, this.errorContext );
			},
	
			resetInternals: function() {
				this.successList = [];
				this.errorList = [];
				this.errorMap = {};
				this.toShow = $( [] );
				this.toHide = $( [] );
			},
	
			reset: function() {
				this.resetInternals();
				this.currentElements = $( [] );
			},
	
			prepareForm: function() {
				this.reset();
				this.toHide = this.errors().add( this.containers );
			},
	
			prepareElement: function( element ) {
				this.reset();
				this.toHide = this.errorsFor( element );
			},
	
			elementValue: function( element ) {
				var $element = $( element ),
					type = element.type,
					isContentEditable = typeof $element.attr( "contenteditable" ) !== "undefined" && $element.attr( "contenteditable" ) !== "false",
					val, idx;
	
				if ( type === "radio" || type === "checkbox" ) {
					return this.findByName( element.name ).filter( ":checked" ).val();
				} else if ( type === "number" && typeof element.validity !== "undefined" ) {
					return element.validity.badInput ? "NaN" : $element.val();
				}
	
				if ( isContentEditable ) {
					val = $element.text();
				} else {
					val = $element.val();
				}
	
				if ( type === "file" ) {
	
					// Modern browser (chrome & safari)
					if ( val.substr( 0, 12 ) === "C:\\fakepath\\" ) {
						return val.substr( 12 );
					}
	
					// Legacy browsers
					// Unix-based path
					idx = val.lastIndexOf( "/" );
					if ( idx >= 0 ) {
						return val.substr( idx + 1 );
					}
	
					// Windows-based path
					idx = val.lastIndexOf( "\\" );
					if ( idx >= 0 ) {
						return val.substr( idx + 1 );
					}
	
					// Just the file name
					return val;
				}
	
				if ( typeof val === "string" ) {
					return val.replace( /\r/g, "" );
				}
				return val;
			},
	
			check: function( element ) {
				element = this.validationTargetFor( this.clean( element ) );
	
				var rules = $( element ).rules(),
					rulesCount = $.map( rules, function( n, i ) {
						return i;
					} ).length,
					dependencyMismatch = false,
					val = this.elementValue( element ),
					result, method, rule, normalizer;
	
				// Prioritize the local normalizer defined for this element over the global one
				// if the former exists, otherwise user the global one in case it exists.
				if ( typeof rules.normalizer === "function" ) {
					normalizer = rules.normalizer;
				} else if (	typeof this.settings.normalizer === "function" ) {
					normalizer = this.settings.normalizer;
				}
	
				// If normalizer is defined, then call it to retreive the changed value instead
				// of using the real one.
				// Note that `this` in the normalizer is `element`.
				if ( normalizer ) {
					val = normalizer.call( element, val );
	
					// Delete the normalizer from rules to avoid treating it as a pre-defined method.
					delete rules.normalizer;
				}
	
				for ( method in rules ) {
					rule = { method: method, parameters: rules[ method ] };
					try {
						result = $.validator.methods[ method ].call( this, val, element, rule.parameters );
	
						// If a method indicates that the field is optional and therefore valid,
						// don't mark it as valid when there are no other rules
						if ( result === "dependency-mismatch" && rulesCount === 1 ) {
							dependencyMismatch = true;
							continue;
						}
						dependencyMismatch = false;
	
						if ( result === "pending" ) {
							this.toHide = this.toHide.not( this.errorsFor( element ) );
							return;
						}
	
						if ( !result ) {
							this.formatAndAdd( element, rule );
							return false;
						}
					} catch ( e ) {
						if ( this.settings.debug && window.console ) {
							console.log( "Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e );
						}
						if ( e instanceof TypeError ) {
							e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
						}
	
						throw e;
					}
				}
				if ( dependencyMismatch ) {
					return;
				}
				if ( this.objectLength( rules ) ) {
					this.successList.push( element );
				}
				return true;
			},
	
			// Return the custom message for the given element and validation method
			// specified in the element's HTML5 data attribute
			// return the generic message if present and no method specific message is present
			customDataMessage: function( element, method ) {
				return $( element ).data( "msg" + method.charAt( 0 ).toUpperCase() +
					method.substring( 1 ).toLowerCase() ) || $( element ).data( "msg" );
			},
	
			// Return the custom message for the given element name and validation method
			customMessage: function( name, method ) {
				var m = this.settings.messages[ name ];
				return m && ( m.constructor === String ? m : m[ method ] );
			},
	
			// Return the first defined argument, allowing empty strings
			findDefined: function() {
				for ( var i = 0; i < arguments.length; i++ ) {
					if ( arguments[ i ] !== undefined ) {
						return arguments[ i ];
					}
				}
				return undefined;
			},
	
			// The second parameter 'rule' used to be a string, and extended to an object literal
			// of the following form:
			// rule = {
			//     method: "method name",
			//     parameters: "the given method parameters"
			// }
			//
			// The old behavior still supported, kept to maintain backward compatibility with
			// old code, and will be removed in the next major release.
			defaultMessage: function( element, rule ) {
				if ( typeof rule === "string" ) {
					rule = { method: rule };
				}
	
				var message = this.findDefined(
						this.customMessage( element.name, rule.method ),
						this.customDataMessage( element, rule.method ),
	
						// 'title' is never undefined, so handle empty string as undefined
						!this.settings.ignoreTitle && element.title || undefined,
						$.validator.messages[ rule.method ],
						"<strong>Warning: No message defined for " + element.name + "</strong>"
					),
					theregex = /\$?\{(\d+)\}/g;
				if ( typeof message === "function" ) {
					message = message.call( this, rule.parameters, element );
				} else if ( theregex.test( message ) ) {
					message = $.validator.format( message.replace( theregex, "{$1}" ), rule.parameters );
				}
	
				return message;
			},
	
			formatAndAdd: function( element, rule ) {
				var message = this.defaultMessage( element, rule );
	
				this.errorList.push( {
					message: message,
					element: element,
					method: rule.method
				} );
	
				this.errorMap[ element.name ] = message;
				this.submitted[ element.name ] = message;
			},
	
			addWrapper: function( toToggle ) {
				if ( this.settings.wrapper ) {
					toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
				}
				return toToggle;
			},
	
			defaultShowErrors: function() {
				var i, elements, error;
				for ( i = 0; this.errorList[ i ]; i++ ) {
					error = this.errorList[ i ];
					if ( this.settings.highlight ) {
						this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
					}
					this.showLabel( error.element, error.message );
				}
				if ( this.errorList.length ) {
					this.toShow = this.toShow.add( this.containers );
				}
				if ( this.settings.success ) {
					for ( i = 0; this.successList[ i ]; i++ ) {
						this.showLabel( this.successList[ i ] );
					}
				}
				if ( this.settings.unhighlight ) {
					for ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {
						this.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );
					}
				}
				this.toHide = this.toHide.not( this.toShow );
				this.hideErrors();
				this.addWrapper( this.toShow ).show();
			},
	
			validElements: function() {
				return this.currentElements.not( this.invalidElements() );
			},
	
			invalidElements: function() {
				return $( this.errorList ).map( function() {
					return this.element;
				} );
			},
	
			showLabel: function( element, message ) {
				var place, group, errorID, v,
					error = this.errorsFor( element ),
					elementID = this.idOrName( element ),
					describedBy = $( element ).attr( "aria-describedby" );
	
				if ( error.length ) {
	
					// Refresh error/success class
					error.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );
	
					// Replace message on existing label
					error.html( message );
				} else {
	
					// Create error element
					error = $( "<" + this.settings.errorElement + ">" )
						.attr( "id", elementID + "-error" )
						.addClass( this.settings.errorClass )
						.html( message || "" );
	
					// Maintain reference to the element to be placed into the DOM
					place = error;
					if ( this.settings.wrapper ) {
	
						// Make sure the element is visible, even in IE
						// actually showing the wrapped element is handled elsewhere
						place = error.hide().show().wrap( "<" + this.settings.wrapper + "/>" ).parent();
					}
					if ( this.labelContainer.length ) {
						this.labelContainer.append( place );
					} else if ( this.settings.errorPlacement ) {
						this.settings.errorPlacement.call( this, place, $( element ) );
					} else {
						place.insertAfter( element );
					}
	
					// Link error back to the element
					if ( error.is( "label" ) ) {
	
						// If the error is a label, then associate using 'for'
						error.attr( "for", elementID );
	
						// If the element is not a child of an associated label, then it's necessary
						// to explicitly apply aria-describedby
					} else if ( error.parents( "label[for='" + this.escapeCssMeta( elementID ) + "']" ).length === 0 ) {
						errorID = error.attr( "id" );
	
						// Respect existing non-error aria-describedby
						if ( !describedBy ) {
							describedBy = errorID;
						} else if ( !describedBy.match( new RegExp( "\\b" + this.escapeCssMeta( errorID ) + "\\b" ) ) ) {
	
							// Add to end of list if not already present
							describedBy += " " + errorID;
						}
						$( element ).attr( "aria-describedby", describedBy );
	
						// If this element is grouped, then assign to all elements in the same group
						group = this.groups[ element.name ];
						if ( group ) {
							v = this;
							$.each( v.groups, function( name, testgroup ) {
								if ( testgroup === group ) {
									$( "[name='" + v.escapeCssMeta( name ) + "']", v.currentForm )
										.attr( "aria-describedby", error.attr( "id" ) );
								}
							} );
						}
					}
				}
				if ( !message && this.settings.success ) {
					error.text( "" );
					if ( typeof this.settings.success === "string" ) {
						error.addClass( this.settings.success );
					} else {
						this.settings.success( error, element );
					}
				}
				this.toShow = this.toShow.add( error );
			},
	
			errorsFor: function( element ) {
				var name = this.escapeCssMeta( this.idOrName( element ) ),
					describer = $( element ).attr( "aria-describedby" ),
					selector = "label[for='" + name + "'], label[for='" + name + "'] *";
	
				// 'aria-describedby' should directly reference the error element
				if ( describer ) {
					selector = selector + ", #" + this.escapeCssMeta( describer )
						.replace( /\s+/g, ", #" );
				}
	
				return this
					.errors()
					.filter( selector );
			},
	
			// See https://api.jquery.com/category/selectors/, for CSS
			// meta-characters that should be escaped in order to be used with JQuery
			// as a literal part of a name/id or any selector.
			escapeCssMeta: function( string ) {
				return string.replace( /([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1" );
			},
	
			idOrName: function( element ) {
				return this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );
			},
	
			validationTargetFor: function( element ) {
	
				// If radio/checkbox, validate first element in group instead
				if ( this.checkable( element ) ) {
					element = this.findByName( element.name );
				}
	
				// Always apply ignore filter
				return $( element ).not( this.settings.ignore )[ 0 ];
			},
	
			checkable: function( element ) {
				return ( /radio|checkbox/i ).test( element.type );
			},
	
			findByName: function( name ) {
				return $( this.currentForm ).find( "[name='" + this.escapeCssMeta( name ) + "']" );
			},
	
			getLength: function( value, element ) {
				switch ( element.nodeName.toLowerCase() ) {
				case "select":
					return $( "option:selected", element ).length;
				case "input":
					if ( this.checkable( element ) ) {
						return this.findByName( element.name ).filter( ":checked" ).length;
					}
				}
				return value.length;
			},
	
			depend: function( param, element ) {
				return this.dependTypes[ typeof param ] ? this.dependTypes[ typeof param ]( param, element ) : true;
			},
	
			dependTypes: {
				"boolean": function( param ) {
					return param;
				},
				"string": function( param, element ) {
					return !!$( param, element.form ).length;
				},
				"function": function( param, element ) {
					return param( element );
				}
			},
	
			optional: function( element ) {
				var val = this.elementValue( element );
				return !$.validator.methods.required.call( this, val, element ) && "dependency-mismatch";
			},
	
			startRequest: function( element ) {
				if ( !this.pending[ element.name ] ) {
					this.pendingRequest++;
					$( element ).addClass( this.settings.pendingClass );
					this.pending[ element.name ] = true;
				}
			},
	
			stopRequest: function( element, valid ) {
				this.pendingRequest--;
	
				// Sometimes synchronization fails, make sure pendingRequest is never < 0
				if ( this.pendingRequest < 0 ) {
					this.pendingRequest = 0;
				}
				delete this.pending[ element.name ];
				$( element ).removeClass( this.settings.pendingClass );
				if ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {
					$( this.currentForm ).submit();
	
					// Remove the hidden input that was used as a replacement for the
					// missing submit button. The hidden input is added by `handle()`
					// to ensure that the value of the used submit button is passed on
					// for scripted submits triggered by this method
					if ( this.submitButton ) {
						$( "input:hidden[name='" + this.submitButton.name + "']", this.currentForm ).remove();
					}
	
					this.formSubmitted = false;
				} else if ( !valid && this.pendingRequest === 0 && this.formSubmitted ) {
					$( this.currentForm ).triggerHandler( "invalid-form", [ this ] );
					this.formSubmitted = false;
				}
			},
	
			previousValue: function( element, method ) {
				method = typeof method === "string" && method || "remote";
	
				return $.data( element, "previousValue" ) || $.data( element, "previousValue", {
					old: null,
					valid: true,
					message: this.defaultMessage( element, { method: method } )
				} );
			},
	
			// Cleans up all forms and elements, removes validator-specific events
			destroy: function() {
				this.resetForm();
	
				$( this.currentForm )
					.off( ".validate" )
					.removeData( "validator" )
					.find( ".validate-equalTo-blur" )
						.off( ".validate-equalTo" )
						.removeClass( "validate-equalTo-blur" )
					.find( ".validate-lessThan-blur" )
						.off( ".validate-lessThan" )
						.removeClass( "validate-lessThan-blur" )
					.find( ".validate-lessThanEqual-blur" )
						.off( ".validate-lessThanEqual" )
						.removeClass( "validate-lessThanEqual-blur" )
					.find( ".validate-greaterThanEqual-blur" )
						.off( ".validate-greaterThanEqual" )
						.removeClass( "validate-greaterThanEqual-blur" )
					.find( ".validate-greaterThan-blur" )
						.off( ".validate-greaterThan" )
						.removeClass( "validate-greaterThan-blur" );
			}
	
		},
	
		classRuleSettings: {
			required: { required: true },
			email: { email: true },
			url: { url: true },
			date: { date: true },
			dateISO: { dateISO: true },
			number: { number: true },
			digits: { digits: true },
			creditcard: { creditcard: true }
		},
	
		addClassRules: function( className, rules ) {
			if ( className.constructor === String ) {
				this.classRuleSettings[ className ] = rules;
			} else {
				$.extend( this.classRuleSettings, className );
			}
		},
	
		classRules: function( element ) {
			var rules = {},
				classes = $( element ).attr( "class" );
	
			if ( classes ) {
				$.each( classes.split( " " ), function() {
					if ( this in $.validator.classRuleSettings ) {
						$.extend( rules, $.validator.classRuleSettings[ this ] );
					}
				} );
			}
			return rules;
		},
	
		normalizeAttributeRule: function( rules, type, method, value ) {
	
			// Convert the value to a number for number inputs, and for text for backwards compability
			// allows type="date" and others to be compared as strings
			if ( /min|max|step/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {
				value = Number( value );
	
				// Support Opera Mini, which returns NaN for undefined minlength
				if ( isNaN( value ) ) {
					value = undefined;
				}
			}
	
			if ( value || value === 0 ) {
				rules[ method ] = value;
			} else if ( type === method && type !== "range" ) {
	
				// Exception: the jquery validate 'range' method
				// does not test for the html5 'range' type
				rules[ method ] = true;
			}
		},
	
		attributeRules: function( element ) {
			var rules = {},
				$element = $( element ),
				type = element.getAttribute( "type" ),
				method, value;
	
			for ( method in $.validator.methods ) {
	
				// Support for <input required> in both html5 and older browsers
				if ( method === "required" ) {
					value = element.getAttribute( method );
	
					// Some browsers return an empty string for the required attribute
					// and non-HTML5 browsers might have required="" markup
					if ( value === "" ) {
						value = true;
					}
	
					// Force non-HTML5 browsers to return bool
					value = !!value;
				} else {
					value = $element.attr( method );
				}
	
				this.normalizeAttributeRule( rules, type, method, value );
			}
	
			// 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
			if ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {
				delete rules.maxlength;
			}
	
			return rules;
		},
	
		dataRules: function( element ) {
			var rules = {},
				$element = $( element ),
				type = element.getAttribute( "type" ),
				method, value;
	
			for ( method in $.validator.methods ) {
				value = $element.data( "rule" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );
	
				// Cast empty attributes like `data-rule-required` to `true`
				if ( value === "" ) {
					value = true;
				}
	
				this.normalizeAttributeRule( rules, type, method, value );
			}
			return rules;
		},
	
		staticRules: function( element ) {
			var rules = {},
				validator = $.data( element.form, "validator" );
	
			if ( validator.settings.rules ) {
				rules = $.validator.normalizeRule( validator.settings.rules[ element.name ] ) || {};
			}
			return rules;
		},
	
		normalizeRules: function( rules, element ) {
	
			// Handle dependency check
			$.each( rules, function( prop, val ) {
	
				// Ignore rule when param is explicitly false, eg. required:false
				if ( val === false ) {
					delete rules[ prop ];
					return;
				}
				if ( val.param || val.depends ) {
					var keepRule = true;
					switch ( typeof val.depends ) {
					case "string":
						keepRule = !!$( val.depends, element.form ).length;
						break;
					case "function":
						keepRule = val.depends.call( element, element );
						break;
					}
					if ( keepRule ) {
						rules[ prop ] = val.param !== undefined ? val.param : true;
					} else {
						$.data( element.form, "validator" ).resetElements( $( element ) );
						delete rules[ prop ];
					}
				}
			} );
	
			// Evaluate parameters
			$.each( rules, function( rule, parameter ) {
				rules[ rule ] = typeof parameter === "function" && rule !== "normalizer" ? parameter( element ) : parameter;
			} );
	
			// Clean number parameters
			$.each( [ "minlength", "maxlength" ], function() {
				if ( rules[ this ] ) {
					rules[ this ] = Number( rules[ this ] );
				}
			} );
			$.each( [ "rangelength", "range" ], function() {
				var parts;
				if ( rules[ this ] ) {
					if ( Array.isArray( rules[ this ] ) ) {
						rules[ this ] = [ Number( rules[ this ][ 0 ] ), Number( rules[ this ][ 1 ] ) ];
					} else if ( typeof rules[ this ] === "string" ) {
						parts = rules[ this ].replace( /[\[\]]/g, "" ).split( /[\s,]+/ );
						rules[ this ] = [ Number( parts[ 0 ] ), Number( parts[ 1 ] ) ];
					}
				}
			} );
	
			if ( $.validator.autoCreateRanges ) {
	
				// Auto-create ranges
				if ( rules.min != null && rules.max != null ) {
					rules.range = [ rules.min, rules.max ];
					delete rules.min;
					delete rules.max;
				}
				if ( rules.minlength != null && rules.maxlength != null ) {
					rules.rangelength = [ rules.minlength, rules.maxlength ];
					delete rules.minlength;
					delete rules.maxlength;
				}
			}
	
			return rules;
		},
	
		// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
		normalizeRule: function( data ) {
			if ( typeof data === "string" ) {
				var transformed = {};
				$.each( data.split( /\s/ ), function() {
					transformed[ this ] = true;
				} );
				data = transformed;
			}
			return data;
		},
	
		// https://jqueryvalidation.org/jQuery.validator.addMethod/
		addMethod: function( name, method, message ) {
			$.validator.methods[ name ] = method;
			$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];
			if ( method.length < 3 ) {
				$.validator.addClassRules( name, $.validator.normalizeRule( name ) );
			}
		},
	
		// https://jqueryvalidation.org/jQuery.validator.methods/
		methods: {
	
			// https://jqueryvalidation.org/required-method/
			required: function( value, element, param ) {
	
				// Check if dependency is met
				if ( !this.depend( param, element ) ) {
					return "dependency-mismatch";
				}
				if ( element.nodeName.toLowerCase() === "select" ) {
	
					// Could be an array for select-multiple or a string, both are fine this way
					var val = $( element ).val();
					return val && val.length > 0;
				}
				if ( this.checkable( element ) ) {
					return this.getLength( value, element ) > 0;
				}
				return value !== undefined && value !== null && value.length > 0;
			},
	
			// https://jqueryvalidation.org/email-method/
			email: function( value, element ) {
	
				// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
				// Retrieved 2014-01-14
				// If you have a problem with this implementation, report a bug against the above spec
				// Or use custom methods to implement your own email validation
				return this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );
			},
	
			// https://jqueryvalidation.org/url-method/
			url: function( value, element ) {
	
				// Copyright (c) 2010-2013 Diego Perini, MIT licensed
				// https://gist.github.com/dperini/729294
				// see also https://mathiasbynens.be/demo/url-regex
				// modified to allow protocol-relative URLs
				return this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test( value );
			},
	
			// https://jqueryvalidation.org/date-method/
			date: ( function() {
				var called = false;
	
				return function( value, element ) {
					if ( !called ) {
						called = true;
						if ( this.settings.debug && window.console ) {
							console.warn(
								"The `date` method is deprecated and will be removed in version '2.0.0'.\n" +
								"Please don't use it, since it relies on the Date constructor, which\n" +
								"behaves very differently across browsers and locales. Use `dateISO`\n" +
								"instead or one of the locale specific methods in `localizations/`\n" +
								"and `additional-methods.js`."
							);
						}
					}
	
					return this.optional( element ) || !/Invalid|NaN/.test( new Date( value ).toString() );
				};
			}() ),
	
			// https://jqueryvalidation.org/dateISO-method/
			dateISO: function( value, element ) {
				return this.optional( element ) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test( value );
			},
	
			// https://jqueryvalidation.org/number-method/
			number: function( value, element ) {
				return this.optional( element ) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test( value );
			},
	
			// https://jqueryvalidation.org/digits-method/
			digits: function( value, element ) {
				return this.optional( element ) || /^\d+$/.test( value );
			},
	
			// https://jqueryvalidation.org/minlength-method/
			minlength: function( value, element, param ) {
				var length = Array.isArray( value ) ? value.length : this.getLength( value, element );
				return this.optional( element ) || length >= param;
			},
	
			// https://jqueryvalidation.org/maxlength-method/
			maxlength: function( value, element, param ) {
				var length = Array.isArray( value ) ? value.length : this.getLength( value, element );
				return this.optional( element ) || length <= param;
			},
	
			// https://jqueryvalidation.org/rangelength-method/
			rangelength: function( value, element, param ) {
				var length = Array.isArray( value ) ? value.length : this.getLength( value, element );
				return this.optional( element ) || ( length >= param[ 0 ] && length <= param[ 1 ] );
			},
	
			// https://jqueryvalidation.org/min-method/
			min: function( value, element, param ) {
				return this.optional( element ) || value >= param;
			},
	
			// https://jqueryvalidation.org/max-method/
			max: function( value, element, param ) {
				return this.optional( element ) || value <= param;
			},
	
			// https://jqueryvalidation.org/range-method/
			range: function( value, element, param ) {
				return this.optional( element ) || ( value >= param[ 0 ] && value <= param[ 1 ] );
			},
	
			// https://jqueryvalidation.org/step-method/
			step: function( value, element, param ) {
				var type = $( element ).attr( "type" ),
					errorMessage = "Step attribute on input type " + type + " is not supported.",
					supportedTypes = [ "text", "number", "range" ],
					re = new RegExp( "\\b" + type + "\\b" ),
					notSupported = type && !re.test( supportedTypes.join() ),
					decimalPlaces = function( num ) {
						var match = ( "" + num ).match( /(?:\.(\d+))?$/ );
						if ( !match ) {
							return 0;
						}
	
						// Number of digits right of decimal point.
						return match[ 1 ] ? match[ 1 ].length : 0;
					},
					toInt = function( num ) {
						return Math.round( num * Math.pow( 10, decimals ) );
					},
					valid = true,
					decimals;
	
				// Works only for text, number and range input types
				// TODO find a way to support input types date, datetime, datetime-local, month, time and week
				if ( notSupported ) {
					throw new Error( errorMessage );
				}
	
				decimals = decimalPlaces( param );
	
				// Value can't have too many decimals
				if ( decimalPlaces( value ) > decimals || toInt( value ) % toInt( param ) !== 0 ) {
					valid = false;
				}
	
				return this.optional( element ) || valid;
			},
	
			// https://jqueryvalidation.org/equalTo-method/
			equalTo: function( value, element, param ) {
	
				// Bind to the blur event of the target in order to revalidate whenever the target field is updated
				var target = $( param );
				if ( this.settings.onfocusout && target.not( ".validate-equalTo-blur" ).length ) {
					target.addClass( "validate-equalTo-blur" ).on( "blur.validate-equalTo", function() {
						$( element ).valid();
					} );
				}
				return value === target.val();
			},
	
			// https://jqueryvalidation.org/remote-method/
			remote: function( value, element, param, method ) {
				if ( this.optional( element ) ) {
					return "dependency-mismatch";
				}
	
				method = typeof method === "string" && method || "remote";
	
				var previous = this.previousValue( element, method ),
					validator, data, optionDataString;
	
				if ( !this.settings.messages[ element.name ] ) {
					this.settings.messages[ element.name ] = {};
				}
				previous.originalMessage = previous.originalMessage || this.settings.messages[ element.name ][ method ];
				this.settings.messages[ element.name ][ method ] = previous.message;
	
				param = typeof param === "string" && { url: param } || param;
				optionDataString = $.param( $.extend( { data: value }, param.data ) );
				if ( previous.old === optionDataString ) {
					return previous.valid;
				}
	
				previous.old = optionDataString;
				validator = this;
				this.startRequest( element );
				data = {};
				data[ element.name ] = value;
				$.ajax( $.extend( true, {
					mode: "abort",
					port: "validate" + element.name,
					dataType: "json",
					data: data,
					context: validator.currentForm,
					success: function( response ) {
						var valid = response === true || response === "true",
							errors, message, submitted;
	
						validator.settings.messages[ element.name ][ method ] = previous.originalMessage;
						if ( valid ) {
							submitted = validator.formSubmitted;
							validator.resetInternals();
							validator.toHide = validator.errorsFor( element );
							validator.formSubmitted = submitted;
							validator.successList.push( element );
							validator.invalid[ element.name ] = false;
							validator.showErrors();
						} else {
							errors = {};
							message = response || validator.defaultMessage( element, { method: method, parameters: value } );
							errors[ element.name ] = previous.message = message;
							validator.invalid[ element.name ] = true;
							validator.showErrors( errors );
						}
						previous.valid = valid;
						validator.stopRequest( element, valid );
					}
				}, param ) );
				return "pending";
			}
		}
	
	} );
	
	// Ajax mode: abort
	// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
	// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
	
	var pendingRequests = {},
		ajax;
	
	// Use a prefilter if available (1.5+)
	if ( $.ajaxPrefilter ) {
		$.ajaxPrefilter( function( settings, _, xhr ) {
			var port = settings.port;
			if ( settings.mode === "abort" ) {
				if ( pendingRequests[ port ] ) {
					pendingRequests[ port ].abort();
				}
				pendingRequests[ port ] = xhr;
			}
		} );
	} else {
	
		// Proxy ajax
		ajax = $.ajax;
		$.ajax = function( settings ) {
			var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
				port = ( "port" in settings ? settings : $.ajaxSettings ).port;
			if ( mode === "abort" ) {
				if ( pendingRequests[ port ] ) {
					pendingRequests[ port ].abort();
				}
				pendingRequests[ port ] = ajax.apply( this, arguments );
				return pendingRequests[ port ];
			}
			return ajax.apply( this, arguments );
		};
	}
	return $;
	}));

/***/ }),
/* 67 */
/***/ (function(module, exports) {

	(function() {
	  var $, AbstractChosen, Chosen, SelectParser,
	    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;
	
	  SelectParser = (function() {
	    function SelectParser() {
	      this.options_index = 0;
	      this.parsed = [];
	    }
	
	    SelectParser.prototype.add_node = function(child) {
	      if (child.nodeName.toUpperCase() === "OPTGROUP") {
	        return this.add_group(child);
	      } else {
	        return this.add_option(child);
	      }
	    };
	
	    SelectParser.prototype.add_group = function(group) {
	      var group_position, i, len, option, ref, results1;
	      group_position = this.parsed.length;
	      this.parsed.push({
	        array_index: group_position,
	        group: true,
	        label: group.label,
	        title: group.title ? group.title : void 0,
	        children: 0,
	        disabled: group.disabled,
	        classes: group.className
	      });
	      ref = group.childNodes;
	      results1 = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        option = ref[i];
	        results1.push(this.add_option(option, group_position, group.disabled));
	      }
	      return results1;
	    };
	
	    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
	      if (option.nodeName.toUpperCase() === "OPTION") {
	        if (option.text !== "") {
	          if (group_position != null) {
	            this.parsed[group_position].children += 1;
	          }
	          this.parsed.push({
	            array_index: this.parsed.length,
	            options_index: this.options_index,
	            value: option.value,
	            text: option.text,
	            html: option.innerHTML,
	            title: option.title ? option.title : void 0,
	            selected: option.selected,
	            disabled: group_disabled === true ? group_disabled : option.disabled,
	            group_array_index: group_position,
	            group_label: group_position != null ? this.parsed[group_position].label : null,
	            classes: option.className,
	            style: option.style.cssText
	          });
	        } else {
	          this.parsed.push({
	            array_index: this.parsed.length,
	            options_index: this.options_index,
	            empty: true
	          });
	        }
	        return this.options_index += 1;
	      }
	    };
	
	    return SelectParser;
	
	  })();
	
	  SelectParser.select_to_array = function(select) {
	    var child, i, len, parser, ref;
	    parser = new SelectParser();
	    ref = select.childNodes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      child = ref[i];
	      parser.add_node(child);
	    }
	    return parser.parsed;
	  };
	
	  AbstractChosen = (function() {
	    function AbstractChosen(form_field, options1) {
	      this.form_field = form_field;
	      this.options = options1 != null ? options1 : {};
	      this.label_click_handler = bind(this.label_click_handler, this);
	      if (!AbstractChosen.browser_is_supported()) {
	        return;
	      }
	      this.is_multiple = this.form_field.multiple;
	      this.set_default_text();
	      this.set_default_values();
	      this.setup();
	      this.set_up_html();
	      this.register_observers();
	      this.on_ready();
	    }
	
	    AbstractChosen.prototype.set_default_values = function() {
	      this.click_test_action = (function(_this) {
	        return function(evt) {
	          return _this.test_active_click(evt);
	        };
	      })(this);
	      this.activate_action = (function(_this) {
	        return function(evt) {
	          return _this.activate_field(evt);
	        };
	      })(this);
	      this.active_field = false;
	      this.mouse_on_container = false;
	      this.results_showing = false;
	      this.result_highlighted = null;
	      this.is_rtl = this.options.rtl || /\bchosen-rtl\b/.test(this.form_field.className);
	      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
	      this.disable_search_threshold = this.options.disable_search_threshold || 0;
	      this.disable_search = this.options.disable_search || false;
	      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
	      this.group_search = this.options.group_search != null ? this.options.group_search : true;
	      this.search_contains = this.options.search_contains || false;
	      this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;
	      this.max_selected_options = this.options.max_selected_options || Infinity;
	      this.inherit_select_classes = this.options.inherit_select_classes || false;
	      this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;
	      this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;
	      this.include_group_label_in_selected = this.options.include_group_label_in_selected || false;
	      this.max_shown_results = this.options.max_shown_results || Number.POSITIVE_INFINITY;
	      this.case_sensitive_search = this.options.case_sensitive_search || false;
	      return this.hide_results_on_select = this.options.hide_results_on_select != null ? this.options.hide_results_on_select : true;
	    };
	
	    AbstractChosen.prototype.set_default_text = function() {
	      if (this.form_field.getAttribute("data-placeholder")) {
	        this.default_text = this.form_field.getAttribute("data-placeholder");
	      } else if (this.is_multiple) {
	        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
	      } else {
	        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
	      }
	      this.default_text = this.escape_html(this.default_text);
	      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
	    };
	
	    AbstractChosen.prototype.choice_label = function(item) {
	      if (this.include_group_label_in_selected && (item.group_label != null)) {
	        return "<b class='group-name'>" + (this.escape_html(item.group_label)) + "</b>" + item.html;
	      } else {
	        return item.html;
	      }
	    };
	
	    AbstractChosen.prototype.mouse_enter = function() {
	      return this.mouse_on_container = true;
	    };
	
	    AbstractChosen.prototype.mouse_leave = function() {
	      return this.mouse_on_container = false;
	    };
	
	    AbstractChosen.prototype.input_focus = function(evt) {
	      if (this.is_multiple) {
	        if (!this.active_field) {
	          return setTimeout(((function(_this) {
	            return function() {
	              return _this.container_mousedown();
	            };
	          })(this)), 50);
	        }
	      } else {
	        if (!this.active_field) {
	          return this.activate_field();
	        }
	      }
	    };
	
	    AbstractChosen.prototype.input_blur = function(evt) {
	      if (!this.mouse_on_container) {
	        this.active_field = false;
	        return setTimeout(((function(_this) {
	          return function() {
	            return _this.blur_test();
	          };
	        })(this)), 100);
	      }
	    };
	
	    AbstractChosen.prototype.label_click_handler = function(evt) {
	      if (this.is_multiple) {
	        return this.container_mousedown(evt);
	      } else {
	        return this.activate_field();
	      }
	    };
	
	    AbstractChosen.prototype.results_option_build = function(options) {
	      var content, data, data_content, i, len, ref, shown_results;
	      content = '';
	      shown_results = 0;
	      ref = this.results_data;
	      for (i = 0, len = ref.length; i < len; i++) {
	        data = ref[i];
	        data_content = '';
	        if (data.group) {
	          data_content = this.result_add_group(data);
	        } else {
	          data_content = this.result_add_option(data);
	        }
	        if (data_content !== '') {
	          shown_results++;
	          content += data_content;
	        }
	        if (options != null ? options.first : void 0) {
	          if (data.selected && this.is_multiple) {
	            this.choice_build(data);
	          } else if (data.selected && !this.is_multiple) {
	            this.single_set_selected_text(this.choice_label(data));
	          }
	        }
	        if (shown_results >= this.max_shown_results) {
	          break;
	        }
	      }
	      return content;
	    };
	
	    AbstractChosen.prototype.result_add_option = function(option) {
	      var classes, option_el;
	      if (!option.search_match) {
	        return '';
	      }
	      if (!this.include_option_in_results(option)) {
	        return '';
	      }
	      classes = [];
	      if (!option.disabled && !(option.selected && this.is_multiple)) {
	        classes.push("active-result");
	      }
	      if (option.disabled && !(option.selected && this.is_multiple)) {
	        classes.push("disabled-result");
	      }
	      if (option.selected) {
	        classes.push("result-selected");
	      }
	      if (option.group_array_index != null) {
	        classes.push("group-option");
	      }
	      if (option.classes !== "") {
	        classes.push(option.classes);
	      }
	      option_el = document.createElement("li");
	      option_el.className = classes.join(" ");
	      if (option.style) {
	        option_el.style.cssText = option.style;
	      }
	      option_el.setAttribute("data-option-array-index", option.array_index);
	      option_el.innerHTML = option.highlighted_html || option.html;
	      if (option.title) {
	        option_el.title = option.title;
	      }
	      return this.outerHTML(option_el);
	    };
	
	    AbstractChosen.prototype.result_add_group = function(group) {
	      var classes, group_el;
	      if (!(group.search_match || group.group_match)) {
	        return '';
	      }
	      if (!(group.active_options > 0)) {
	        return '';
	      }
	      classes = [];
	      classes.push("group-result");
	      if (group.classes) {
	        classes.push(group.classes);
	      }
	      group_el = document.createElement("li");
	      group_el.className = classes.join(" ");
	      group_el.innerHTML = group.highlighted_html || this.escape_html(group.label);
	      if (group.title) {
	        group_el.title = group.title;
	      }
	      return this.outerHTML(group_el);
	    };
	
	    AbstractChosen.prototype.results_update_field = function() {
	      this.set_default_text();
	      if (!this.is_multiple) {
	        this.results_reset_cleanup();
	      }
	      this.result_clear_highlight();
	      this.results_build();
	      if (this.results_showing) {
	        return this.winnow_results();
	      }
	    };
	
	    AbstractChosen.prototype.reset_single_select_options = function() {
	      var i, len, ref, result, results1;
	      ref = this.results_data;
	      results1 = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        result = ref[i];
	        if (result.selected) {
	          results1.push(result.selected = false);
	        } else {
	          results1.push(void 0);
	        }
	      }
	      return results1;
	    };
	
	    AbstractChosen.prototype.results_toggle = function() {
	      if (this.results_showing) {
	        return this.results_hide();
	      } else {
	        return this.results_show();
	      }
	    };
	
	    AbstractChosen.prototype.results_search = function(evt) {
	      if (this.results_showing) {
	        return this.winnow_results();
	      } else {
	        return this.results_show();
	      }
	    };
	
	    AbstractChosen.prototype.winnow_results = function(options) {
	      var escapedQuery, fix, i, len, option, prefix, query, ref, regex, results, results_group, search_match, startpos, suffix, text;
	      this.no_results_clear();
	      results = 0;
	      query = this.get_search_text();
	      escapedQuery = query.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	      regex = this.get_search_regex(escapedQuery);
	      ref = this.results_data;
	      for (i = 0, len = ref.length; i < len; i++) {
	        option = ref[i];
	        option.search_match = false;
	        results_group = null;
	        search_match = null;
	        option.highlighted_html = '';
	        if (this.include_option_in_results(option)) {
	          if (option.group) {
	            option.group_match = false;
	            option.active_options = 0;
	          }
	          if ((option.group_array_index != null) && this.results_data[option.group_array_index]) {
	            results_group = this.results_data[option.group_array_index];
	            if (results_group.active_options === 0 && results_group.search_match) {
	              results += 1;
	            }
	            results_group.active_options += 1;
	          }
	          text = option.group ? option.label : option.text;
	          if (!(option.group && !this.group_search)) {
	            search_match = this.search_string_match(text, regex);
	            option.search_match = search_match != null;
	            if (option.search_match && !option.group) {
	              results += 1;
	            }
	            if (option.search_match) {
	              if (query.length) {
	                startpos = search_match.index;
	                prefix = text.slice(0, startpos);
	                fix = text.slice(startpos, startpos + query.length);
	                suffix = text.slice(startpos + query.length);
	                option.highlighted_html = (this.escape_html(prefix)) + "<em>" + (this.escape_html(fix)) + "</em>" + (this.escape_html(suffix));
	              }
	              if (results_group != null) {
	                results_group.group_match = true;
	              }
	            } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {
	              option.search_match = true;
	            }
	          }
	        }
	      }
	      this.result_clear_highlight();
	      if (results < 1 && query.length) {
	        this.update_results_content("");
	        return this.no_results(query);
	      } else {
	        this.update_results_content(this.results_option_build());
	        if (!(options != null ? options.skip_highlight : void 0)) {
	          return this.winnow_results_set_highlight();
	        }
	      }
	    };
	
	    AbstractChosen.prototype.get_search_regex = function(escaped_search_string) {
	      var regex_flag, regex_string;
	      regex_string = this.search_contains ? escaped_search_string : "(^|\\s|\\b)" + escaped_search_string + "[^\\s]*";
	      if (!(this.enable_split_word_search || this.search_contains)) {
	        regex_string = "^" + regex_string;
	      }
	      regex_flag = this.case_sensitive_search ? "" : "i";
	      return new RegExp(regex_string, regex_flag);
	    };
	
	    AbstractChosen.prototype.search_string_match = function(search_string, regex) {
	      var match;
	      match = regex.exec(search_string);
	      if (!this.search_contains && (match != null ? match[1] : void 0)) {
	        match.index += 1;
	      }
	      return match;
	    };
	
	    AbstractChosen.prototype.choices_count = function() {
	      var i, len, option, ref;
	      if (this.selected_option_count != null) {
	        return this.selected_option_count;
	      }
	      this.selected_option_count = 0;
	      ref = this.form_field.options;
	      for (i = 0, len = ref.length; i < len; i++) {
	        option = ref[i];
	        if (option.selected) {
	          this.selected_option_count += 1;
	        }
	      }
	      return this.selected_option_count;
	    };
	
	    AbstractChosen.prototype.choices_click = function(evt) {
	      evt.preventDefault();
	      this.activate_field();
	      if (!(this.results_showing || this.is_disabled)) {
	        return this.results_show();
	      }
	    };
	
	    AbstractChosen.prototype.keydown_checker = function(evt) {
	      var ref, stroke;
	      stroke = (ref = evt.which) != null ? ref : evt.keyCode;
	      this.search_field_scale();
	      if (stroke !== 8 && this.pending_backstroke) {
	        this.clear_backstroke();
	      }
	      switch (stroke) {
	        case 8:
	          this.backstroke_length = this.get_search_field_value().length;
	          break;
	        case 9:
	          if (this.results_showing && !this.is_multiple) {
	            this.result_select(evt);
	          }
	          this.mouse_on_container = false;
	          break;
	        case 13:
	          if (this.results_showing) {
	            evt.preventDefault();
	          }
	          break;
	        case 27:
	          if (this.results_showing) {
	            evt.preventDefault();
	          }
	          break;
	        case 32:
	          if (this.disable_search) {
	            evt.preventDefault();
	          }
	          break;
	        case 38:
	          evt.preventDefault();
	          this.keyup_arrow();
	          break;
	        case 40:
	          evt.preventDefault();
	          this.keydown_arrow();
	          break;
	      }
	    };
	
	    AbstractChosen.prototype.keyup_checker = function(evt) {
	      var ref, stroke;
	      stroke = (ref = evt.which) != null ? ref : evt.keyCode;
	      this.search_field_scale();
	      switch (stroke) {
	        case 8:
	          if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
	            this.keydown_backstroke();
	          } else if (!this.pending_backstroke) {
	            this.result_clear_highlight();
	            this.results_search();
	          }
	          break;
	        case 13:
	          evt.preventDefault();
	          if (this.results_showing) {
	            this.result_select(evt);
	          }
	          break;
	        case 27:
	          if (this.results_showing) {
	            this.results_hide();
	          }
	          break;
	        case 9:
	        case 16:
	        case 17:
	        case 18:
	        case 38:
	        case 40:
	        case 91:
	          break;
	        default:
	          this.results_search();
	          break;
	      }
	    };
	
	    AbstractChosen.prototype.clipboard_event_checker = function(evt) {
	      if (this.is_disabled) {
	        return;
	      }
	      return setTimeout(((function(_this) {
	        return function() {
	          return _this.results_search();
	        };
	      })(this)), 50);
	    };
	
	    AbstractChosen.prototype.container_width = function() {
	      if (this.options.width != null) {
	        return this.options.width;
	      } else {
	        return this.form_field.offsetWidth + "px";
	      }
	    };
	
	    AbstractChosen.prototype.include_option_in_results = function(option) {
	      if (this.is_multiple && (!this.display_selected_options && option.selected)) {
	        return false;
	      }
	      if (!this.display_disabled_options && option.disabled) {
	        return false;
	      }
	      if (option.empty) {
	        return false;
	      }
	      return true;
	    };
	
	    AbstractChosen.prototype.search_results_touchstart = function(evt) {
	      this.touch_started = true;
	      return this.search_results_mouseover(evt);
	    };
	
	    AbstractChosen.prototype.search_results_touchmove = function(evt) {
	      this.touch_started = false;
	      return this.search_results_mouseout(evt);
	    };
	
	    AbstractChosen.prototype.search_results_touchend = function(evt) {
	      if (this.touch_started) {
	        return this.search_results_mouseup(evt);
	      }
	    };
	
	    AbstractChosen.prototype.outerHTML = function(element) {
	      var tmp;
	      if (element.outerHTML) {
	        return element.outerHTML;
	      }
	      tmp = document.createElement("div");
	      tmp.appendChild(element);
	      return tmp.innerHTML;
	    };
	
	    AbstractChosen.prototype.get_single_html = function() {
	      return "<a class=\"chosen-single chosen-default\">\n  <span>" + this.default_text + "</span>\n  <div><b></b></div>\n</a>\n<div class=\"chosen-drop\">\n  <div class=\"chosen-search\">\n    <input class=\"chosen-search-input\" type=\"text\" autocomplete=\"off\" />\n  </div>\n  <ul class=\"chosen-results\"></ul>\n</div>";
	    };
	
	    AbstractChosen.prototype.get_multi_html = function() {
	      return "<ul class=\"chosen-choices\">\n  <li class=\"search-field\">\n    <input class=\"chosen-search-input\" type=\"text\" autocomplete=\"off\" value=\"" + this.default_text + "\" />\n  </li>\n</ul>\n<div class=\"chosen-drop\">\n  <ul class=\"chosen-results\"></ul>\n</div>";
	    };
	
	    AbstractChosen.prototype.get_no_results_html = function(terms) {
	      return "<li class=\"no-results\">\n  " + this.results_none_found + " <span>" + (this.escape_html(terms)) + "</span>\n</li>";
	    };
	
	    AbstractChosen.browser_is_supported = function() {
	      if ("Microsoft Internet Explorer" === window.navigator.appName) {
	        return document.documentMode >= 8;
	      }
	      if (/iP(od|hone)/i.test(window.navigator.userAgent) || /IEMobile/i.test(window.navigator.userAgent) || /Windows Phone/i.test(window.navigator.userAgent) || /BlackBerry/i.test(window.navigator.userAgent) || /BB10/i.test(window.navigator.userAgent) || /Android.*Mobile/i.test(window.navigator.userAgent)) {
	        return false;
	      }
	      return true;
	    };
	
	    AbstractChosen.default_multiple_text = "Select Some Options";
	
	    AbstractChosen.default_single_text = "Select an Option";
	
	    AbstractChosen.default_no_result_text = "No results match";
	
	    return AbstractChosen;
	
	  })();
	
	  $ = jQuery;
	
	  $.fn.extend({
	    chosen: function(options) {
	      if (!AbstractChosen.browser_is_supported()) {
	        return this;
	      }
	      return this.each(function(input_field) {
	        var $this, chosen;
	        $this = $(this);
	        chosen = $this.data('chosen');
	        if (options === 'destroy') {
	          if (chosen instanceof Chosen) {
	            chosen.destroy();
	          }
	          return;
	        }
	        if (!(chosen instanceof Chosen)) {
	          $this.data('chosen', new Chosen(this, options));
	        }
	      });
	    }
	  });
	
	  Chosen = (function(superClass) {
	    extend(Chosen, superClass);
	
	    function Chosen() {
	      return Chosen.__super__.constructor.apply(this, arguments);
	    }
	
	    Chosen.prototype.setup = function() {
	      this.form_field_jq = $(this.form_field);
	      return this.current_selectedIndex = this.form_field.selectedIndex;
	    };
	
	    Chosen.prototype.set_up_html = function() {
	      var container_classes, container_props;
	      container_classes = ["chosen-container"];
	      container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));
	      if (this.inherit_select_classes && this.form_field.className) {
	        container_classes.push(this.form_field.className);
	      }
	      if (this.is_rtl) {
	        container_classes.push("chosen-rtl");
	      }
	      container_props = {
	        'class': container_classes.join(' '),
	        'title': this.form_field.title
	      };
	      if (this.form_field.id.length) {
	        container_props.id = this.form_field.id.replace(/[^\w]/g, '_') + "_chosen";
	      }
	      this.container = $("<div />", container_props);
	      this.container.width(this.container_width());
	      if (this.is_multiple) {
	        this.container.html(this.get_multi_html());
	      } else {
	        this.container.html(this.get_single_html());
	      }
	      this.form_field_jq.hide().after(this.container);
	      this.dropdown = this.container.find('div.chosen-drop').first();
	      this.search_field = this.container.find('input').first();
	      this.search_results = this.container.find('ul.chosen-results').first();
	      this.search_field_scale();
	      this.search_no_results = this.container.find('li.no-results').first();
	      if (this.is_multiple) {
	        this.search_choices = this.container.find('ul.chosen-choices').first();
	        this.search_container = this.container.find('li.search-field').first();
	      } else {
	        this.search_container = this.container.find('div.chosen-search').first();
	        this.selected_item = this.container.find('.chosen-single').first();
	      }
	      this.results_build();
	      this.set_tab_index();
	      return this.set_label_behavior();
	    };
	
	    Chosen.prototype.on_ready = function() {
	      return this.form_field_jq.trigger("chosen:ready", {
	        chosen: this
	      });
	    };
	
	    Chosen.prototype.register_observers = function() {
	      this.container.on('touchstart.chosen', (function(_this) {
	        return function(evt) {
	          _this.container_mousedown(evt);
	        };
	      })(this));
	      this.container.on('touchend.chosen', (function(_this) {
	        return function(evt) {
	          _this.container_mouseup(evt);
	        };
	      })(this));
	      this.container.on('mousedown.chosen', (function(_this) {
	        return function(evt) {
	          _this.container_mousedown(evt);
	        };
	      })(this));
	      this.container.on('mouseup.chosen', (function(_this) {
	        return function(evt) {
	          _this.container_mouseup(evt);
	        };
	      })(this));
	      this.container.on('mouseenter.chosen', (function(_this) {
	        return function(evt) {
	          _this.mouse_enter(evt);
	        };
	      })(this));
	      this.container.on('mouseleave.chosen', (function(_this) {
	        return function(evt) {
	          _this.mouse_leave(evt);
	        };
	      })(this));
	      this.search_results.on('mouseup.chosen', (function(_this) {
	        return function(evt) {
	          _this.search_results_mouseup(evt);
	        };
	      })(this));
	      this.search_results.on('mouseover.chosen', (function(_this) {
	        return function(evt) {
	          _this.search_results_mouseover(evt);
	        };
	      })(this));
	      this.search_results.on('mouseout.chosen', (function(_this) {
	        return function(evt) {
	          _this.search_results_mouseout(evt);
	        };
	      })(this));
	      this.search_results.on('mousewheel.chosen DOMMouseScroll.chosen', (function(_this) {
	        return function(evt) {
	          _this.search_results_mousewheel(evt);
	        };
	      })(this));
	      this.search_results.on('touchstart.chosen', (function(_this) {
	        return function(evt) {
	          _this.search_results_touchstart(evt);
	        };
	      })(this));
	      this.search_results.on('touchmove.chosen', (function(_this) {
	        return function(evt) {
	          _this.search_results_touchmove(evt);
	        };
	      })(this));
	      this.search_results.on('touchend.chosen', (function(_this) {
	        return function(evt) {
	          _this.search_results_touchend(evt);
	        };
	      })(this));
	      this.form_field_jq.on("chosen:updated.chosen", (function(_this) {
	        return function(evt) {
	          _this.results_update_field(evt);
	        };
	      })(this));
	      this.form_field_jq.on("chosen:activate.chosen", (function(_this) {
	        return function(evt) {
	          _this.activate_field(evt);
	        };
	      })(this));
	      this.form_field_jq.on("chosen:open.chosen", (function(_this) {
	        return function(evt) {
	          _this.container_mousedown(evt);
	        };
	      })(this));
	      this.form_field_jq.on("chosen:close.chosen", (function(_this) {
	        return function(evt) {
	          _this.close_field(evt);
	        };
	      })(this));
	      this.search_field.on('blur.chosen', (function(_this) {
	        return function(evt) {
	          _this.input_blur(evt);
	        };
	      })(this));
	      this.search_field.on('keyup.chosen', (function(_this) {
	        return function(evt) {
	          _this.keyup_checker(evt);
	        };
	      })(this));
	      this.search_field.on('keydown.chosen', (function(_this) {
	        return function(evt) {
	          _this.keydown_checker(evt);
	        };
	      })(this));
	      this.search_field.on('focus.chosen', (function(_this) {
	        return function(evt) {
	          _this.input_focus(evt);
	        };
	      })(this));
	      this.search_field.on('cut.chosen', (function(_this) {
	        return function(evt) {
	          _this.clipboard_event_checker(evt);
	        };
	      })(this));
	      this.search_field.on('paste.chosen', (function(_this) {
	        return function(evt) {
	          _this.clipboard_event_checker(evt);
	        };
	      })(this));
	      if (this.is_multiple) {
	        return this.search_choices.on('click.chosen', (function(_this) {
	          return function(evt) {
	            _this.choices_click(evt);
	          };
	        })(this));
	      } else {
	        return this.container.on('click.chosen', function(evt) {
	          evt.preventDefault();
	        });
	      }
	    };
	
	    Chosen.prototype.destroy = function() {
	      $(this.container[0].ownerDocument).off('click.chosen', this.click_test_action);
	      if (this.form_field_label.length > 0) {
	        this.form_field_label.off('click.chosen');
	      }
	      if (this.search_field[0].tabIndex) {
	        this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;
	      }
	      this.container.remove();
	      this.form_field_jq.removeData('chosen');
	      return this.form_field_jq.show();
	    };
	
	    Chosen.prototype.search_field_disabled = function() {
	      this.is_disabled = this.form_field.disabled || this.form_field_jq.parents('fieldset').is(':disabled');
	      this.container.toggleClass('chosen-disabled', this.is_disabled);
	      this.search_field[0].disabled = this.is_disabled;
	      if (!this.is_multiple) {
	        this.selected_item.off('focus.chosen', this.activate_field);
	      }
	      if (this.is_disabled) {
	        return this.close_field();
	      } else if (!this.is_multiple) {
	        return this.selected_item.on('focus.chosen', this.activate_field);
	      }
	    };
	
	    Chosen.prototype.container_mousedown = function(evt) {
	      var ref;
	      if (this.is_disabled) {
	        return;
	      }
	      if (evt && ((ref = evt.type) === 'mousedown' || ref === 'touchstart') && !this.results_showing) {
	        evt.preventDefault();
	      }
	      if (!((evt != null) && ($(evt.target)).hasClass("search-choice-close"))) {
	        if (!this.active_field) {
	          if (this.is_multiple) {
	            this.search_field.val("");
	          }
	          $(this.container[0].ownerDocument).on('click.chosen', this.click_test_action);
	          this.results_show();
	        } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chosen-single").length)) {
	          evt.preventDefault();
	          this.results_toggle();
	        }
	        return this.activate_field();
	      }
	    };
	
	    Chosen.prototype.container_mouseup = function(evt) {
	      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
	        return this.results_reset(evt);
	      }
	    };
	
	    Chosen.prototype.search_results_mousewheel = function(evt) {
	      var delta;
	      if (evt.originalEvent) {
	        delta = evt.originalEvent.deltaY || -evt.originalEvent.wheelDelta || evt.originalEvent.detail;
	      }
	      if (delta != null) {
	        evt.preventDefault();
	        if (evt.type === 'DOMMouseScroll') {
	          delta = delta * 40;
	        }
	        return this.search_results.scrollTop(delta + this.search_results.scrollTop());
	      }
	    };
	
	    Chosen.prototype.blur_test = function(evt) {
	      if (!this.active_field && this.container.hasClass("chosen-container-active")) {
	        return this.close_field();
	      }
	    };
	
	    Chosen.prototype.close_field = function() {
	      $(this.container[0].ownerDocument).off("click.chosen", this.click_test_action);
	      this.active_field = false;
	      this.results_hide();
	      this.container.removeClass("chosen-container-active");
	      this.clear_backstroke();
	      this.show_search_field_default();
	      this.search_field_scale();
	      return this.search_field.blur();
	    };
	
	    Chosen.prototype.activate_field = function() {
	      if (this.is_disabled) {
	        return;
	      }
	      this.container.addClass("chosen-container-active");
	      this.active_field = true;
	      this.search_field.val(this.search_field.val());
	      return this.search_field.focus();
	    };
	
	    Chosen.prototype.test_active_click = function(evt) {
	      var active_container;
	      active_container = $(evt.target).closest('.chosen-container');
	      if (active_container.length && this.container[0] === active_container[0]) {
	        return this.active_field = true;
	      } else {
	        return this.close_field();
	      }
	    };
	
	    Chosen.prototype.results_build = function() {
	      this.parsing = true;
	      this.selected_option_count = null;
	      this.results_data = SelectParser.select_to_array(this.form_field);
	      if (this.is_multiple) {
	        this.search_choices.find("li.search-choice").remove();
	      } else {
	        this.single_set_selected_text();
	        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
	          this.search_field[0].readOnly = true;
	          this.container.addClass("chosen-container-single-nosearch");
	        } else {
	          this.search_field[0].readOnly = false;
	          this.container.removeClass("chosen-container-single-nosearch");
	        }
	      }
	      this.update_results_content(this.results_option_build({
	        first: true
	      }));
	      this.search_field_disabled();
	      this.show_search_field_default();
	      this.search_field_scale();
	      return this.parsing = false;
	    };
	
	    Chosen.prototype.result_do_highlight = function(el) {
	      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
	      if (el.length) {
	        this.result_clear_highlight();
	        this.result_highlight = el;
	        this.result_highlight.addClass("highlighted");
	        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
	        visible_top = this.search_results.scrollTop();
	        visible_bottom = maxHeight + visible_top;
	        high_top = this.result_highlight.position().top + this.search_results.scrollTop();
	        high_bottom = high_top + this.result_highlight.outerHeight();
	        if (high_bottom >= visible_bottom) {
	          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
	        } else if (high_top < visible_top) {
	          return this.search_results.scrollTop(high_top);
	        }
	      }
	    };
	
	    Chosen.prototype.result_clear_highlight = function() {
	      if (this.result_highlight) {
	        this.result_highlight.removeClass("highlighted");
	      }
	      return this.result_highlight = null;
	    };
	
	    Chosen.prototype.results_show = function() {
	      if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
	        this.form_field_jq.trigger("chosen:maxselected", {
	          chosen: this
	        });
	        return false;
	      }
	      this.container.addClass("chosen-with-drop");
	      this.results_showing = true;
	      this.search_field.focus();
	      this.search_field.val(this.get_search_field_value());
	      this.winnow_results();
	      return this.form_field_jq.trigger("chosen:showing_dropdown", {
	        chosen: this
	      });
	    };
	
	    Chosen.prototype.update_results_content = function(content) {
	      return this.search_results.html(content);
	    };
	
	    Chosen.prototype.results_hide = function() {
	      if (this.results_showing) {
	        this.result_clear_highlight();
	        this.container.removeClass("chosen-with-drop");
	        this.form_field_jq.trigger("chosen:hiding_dropdown", {
	          chosen: this
	        });
	      }
	      return this.results_showing = false;
	    };
	
	    Chosen.prototype.set_tab_index = function(el) {
	      var ti;
	      if (this.form_field.tabIndex) {
	        ti = this.form_field.tabIndex;
	        this.form_field.tabIndex = -1;
	        return this.search_field[0].tabIndex = ti;
	      }
	    };
	
	    Chosen.prototype.set_label_behavior = function() {
	      this.form_field_label = this.form_field_jq.parents("label");
	      if (!this.form_field_label.length && this.form_field.id.length) {
	        this.form_field_label = $("label[for='" + this.form_field.id + "']");
	      }
	      if (this.form_field_label.length > 0) {
	        return this.form_field_label.on('click.chosen', this.label_click_handler);
	      }
	    };
	
	    Chosen.prototype.show_search_field_default = function() {
	      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
	        this.search_field.val(this.default_text);
	        return this.search_field.addClass("default");
	      } else {
	        this.search_field.val("");
	        return this.search_field.removeClass("default");
	      }
	    };
	
	    Chosen.prototype.search_results_mouseup = function(evt) {
	      var target;
	      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
	      if (target.length) {
	        this.result_highlight = target;
	        this.result_select(evt);
	        return this.search_field.focus();
	      }
	    };
	
	    Chosen.prototype.search_results_mouseover = function(evt) {
	      var target;
	      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
	      if (target) {
	        return this.result_do_highlight(target);
	      }
	    };
	
	    Chosen.prototype.search_results_mouseout = function(evt) {
	      if ($(evt.target).hasClass("active-result") || $(evt.target).parents('.active-result').first()) {
	        return this.result_clear_highlight();
	      }
	    };
	
	    Chosen.prototype.choice_build = function(item) {
	      var choice, close_link;
	      choice = $('<li />', {
	        "class": "search-choice"
	      }).html("<span>" + (this.choice_label(item)) + "</span>");
	      if (item.disabled) {
	        choice.addClass('search-choice-disabled');
	      } else {
	        close_link = $('<a />', {
	          "class": 'search-choice-close',
	          'data-option-array-index': item.array_index
	        });
	        close_link.on('click.chosen', (function(_this) {
	          return function(evt) {
	            return _this.choice_destroy_link_click(evt);
	          };
	        })(this));
	        choice.append(close_link);
	      }
	      return this.search_container.before(choice);
	    };
	
	    Chosen.prototype.choice_destroy_link_click = function(evt) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      if (!this.is_disabled) {
	        return this.choice_destroy($(evt.target));
	      }
	    };
	
	    Chosen.prototype.choice_destroy = function(link) {
	      if (this.result_deselect(link[0].getAttribute("data-option-array-index"))) {
	        if (this.active_field) {
	          this.search_field.focus();
	        } else {
	          this.show_search_field_default();
	        }
	        if (this.is_multiple && this.choices_count() > 0 && this.get_search_field_value().length < 1) {
	          this.results_hide();
	        }
	        link.parents('li').first().remove();
	        return this.search_field_scale();
	      }
	    };
	
	    Chosen.prototype.results_reset = function() {
	      this.reset_single_select_options();
	      this.form_field.options[0].selected = true;
	      this.single_set_selected_text();
	      this.show_search_field_default();
	      this.results_reset_cleanup();
	      this.trigger_form_field_change();
	      if (this.active_field) {
	        return this.results_hide();
	      }
	    };
	
	    Chosen.prototype.results_reset_cleanup = function() {
	      this.current_selectedIndex = this.form_field.selectedIndex;
	      return this.selected_item.find("abbr").remove();
	    };
	
	    Chosen.prototype.result_select = function(evt) {
	      var high, item;
	      if (this.result_highlight) {
	        high = this.result_highlight;
	        this.result_clear_highlight();
	        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
	          this.form_field_jq.trigger("chosen:maxselected", {
	            chosen: this
	          });
	          return false;
	        }
	        if (this.is_multiple) {
	          high.removeClass("active-result");
	        } else {
	          this.reset_single_select_options();
	        }
	        high.addClass("result-selected");
	        item = this.results_data[high[0].getAttribute("data-option-array-index")];
	        item.selected = true;
	        this.form_field.options[item.options_index].selected = true;
	        this.selected_option_count = null;
	        if (this.is_multiple) {
	          this.choice_build(item);
	        } else {
	          this.single_set_selected_text(this.choice_label(item));
	        }
	        if (this.is_multiple && (!this.hide_results_on_select || (evt.metaKey || evt.ctrlKey))) {
	          if (evt.metaKey || evt.ctrlKey) {
	            this.winnow_results({
	              skip_highlight: true
	            });
	          } else {
	            this.search_field.val("");
	            this.winnow_results();
	          }
	        } else {
	          this.results_hide();
	          this.show_search_field_default();
	        }
	        if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
	          this.trigger_form_field_change({
	            selected: this.form_field.options[item.options_index].value
	          });
	        }
	        this.current_selectedIndex = this.form_field.selectedIndex;
	        evt.preventDefault();
	        return this.search_field_scale();
	      }
	    };
	
	    Chosen.prototype.single_set_selected_text = function(text) {
	      if (text == null) {
	        text = this.default_text;
	      }
	      if (text === this.default_text) {
	        this.selected_item.addClass("chosen-default");
	      } else {
	        this.single_deselect_control_build();
	        this.selected_item.removeClass("chosen-default");
	      }
	      return this.selected_item.find("span").html(text);
	    };
	
	    Chosen.prototype.result_deselect = function(pos) {
	      var result_data;
	      result_data = this.results_data[pos];
	      if (!this.form_field.options[result_data.options_index].disabled) {
	        result_data.selected = false;
	        this.form_field.options[result_data.options_index].selected = false;
	        this.selected_option_count = null;
	        this.result_clear_highlight();
	        if (this.results_showing) {
	          this.winnow_results();
	        }
	        this.trigger_form_field_change({
	          deselected: this.form_field.options[result_data.options_index].value
	        });
	        this.search_field_scale();
	        return true;
	      } else {
	        return false;
	      }
	    };
	
	    Chosen.prototype.single_deselect_control_build = function() {
	      if (!this.allow_single_deselect) {
	        return;
	      }
	      if (!this.selected_item.find("abbr").length) {
	        this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
	      }
	      return this.selected_item.addClass("chosen-single-with-deselect");
	    };
	
	    Chosen.prototype.get_search_field_value = function() {
	      return this.search_field.val();
	    };
	
	    Chosen.prototype.get_search_text = function() {
	      return $.trim(this.get_search_field_value());
	    };
	
	    Chosen.prototype.escape_html = function(text) {
	      return $('<div/>').text(text).html();
	    };
	
	    Chosen.prototype.winnow_results_set_highlight = function() {
	      var do_high, selected_results;
	      selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
	      do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
	      if (do_high != null) {
	        return this.result_do_highlight(do_high);
	      }
	    };
	
	    Chosen.prototype.no_results = function(terms) {
	      var no_results_html;
	      no_results_html = this.get_no_results_html(terms);
	      this.search_results.append(no_results_html);
	      return this.form_field_jq.trigger("chosen:no_results", {
	        chosen: this
	      });
	    };
	
	    Chosen.prototype.no_results_clear = function() {
	      return this.search_results.find(".no-results").remove();
	    };
	
	    Chosen.prototype.keydown_arrow = function() {
	      var next_sib;
	      if (this.results_showing && this.result_highlight) {
	        next_sib = this.result_highlight.nextAll("li.active-result").first();
	        if (next_sib) {
	          return this.result_do_highlight(next_sib);
	        }
	      } else {
	        return this.results_show();
	      }
	    };
	
	    Chosen.prototype.keyup_arrow = function() {
	      var prev_sibs;
	      if (!this.results_showing && !this.is_multiple) {
	        return this.results_show();
	      } else if (this.result_highlight) {
	        prev_sibs = this.result_highlight.prevAll("li.active-result");
	        if (prev_sibs.length) {
	          return this.result_do_highlight(prev_sibs.first());
	        } else {
	          if (this.choices_count() > 0) {
	            this.results_hide();
	          }
	          return this.result_clear_highlight();
	        }
	      }
	    };
	
	    Chosen.prototype.keydown_backstroke = function() {
	      var next_available_destroy;
	      if (this.pending_backstroke) {
	        this.choice_destroy(this.pending_backstroke.find("a").first());
	        return this.clear_backstroke();
	      } else {
	        next_available_destroy = this.search_container.siblings("li.search-choice").last();
	        if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
	          this.pending_backstroke = next_available_destroy;
	          if (this.single_backstroke_delete) {
	            return this.keydown_backstroke();
	          } else {
	            return this.pending_backstroke.addClass("search-choice-focus");
	          }
	        }
	      }
	    };
	
	    Chosen.prototype.clear_backstroke = function() {
	      if (this.pending_backstroke) {
	        this.pending_backstroke.removeClass("search-choice-focus");
	      }
	      return this.pending_backstroke = null;
	    };
	
	    Chosen.prototype.search_field_scale = function() {
	      var div, i, len, style, style_block, styles, width;
	      if (!this.is_multiple) {
	        return;
	      }
	      style_block = {
	        position: 'absolute',
	        left: '-1000px',
	        top: '-1000px',
	        display: 'none',
	        whiteSpace: 'pre'
	      };
	      styles = ['fontSize', 'fontStyle', 'fontWeight', 'fontFamily', 'lineHeight', 'textTransform', 'letterSpacing'];
	      for (i = 0, len = styles.length; i < len; i++) {
	        style = styles[i];
	        style_block[style] = this.search_field.css(style);
	      }
	      div = $('<div />').css(style_block);
	      div.text(this.get_search_field_value());
	      $('body').append(div);
	      width = div.width() + 25;
	      div.remove();
	      if (this.container.is(':visible')) {
	        width = Math.min(this.container.outerWidth() - 10, width);
	      }
	      return this.search_field.width(width);
	    };
	
	    Chosen.prototype.trigger_form_field_change = function(extra) {
	      this.form_field_jq.trigger("input", extra);
	      return this.form_field_jq.trigger("change", extra);
	    };
	
	    return Chosen;
	
	  })(AbstractChosen);
	
	}).call(this);


/***/ })
/******/ ]);
//# sourceMappingURL=app.min.js.map